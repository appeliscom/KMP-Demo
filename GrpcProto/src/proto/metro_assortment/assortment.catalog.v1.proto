syntax = "proto3";

option go_package = "GoServerCore/proto-storage/generated/go/metro_assortment";

package metro.assortment.v1;

import "metro_assortment/assortment.private.v1.proto";
import "identity_service/common.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";
import "metro_assortment/assortment.bmpl.v1.proto";
import "metro_assortment/assortment.attributes.v1.proto";
import "metro_assortment/assortment.cip.v1.proto";
import "appelis/paging.proto";
import "appelis/sort.proto";

service Catalog {
  rpc GetArticles(GetArticlesRequest) returns (GetArticleResponse) {}
  rpc GetAssortment(GetAssortmentRequest) returns (GetAssortmentResponse) {}
  rpc GetArticleCountByCategoryIds(GetArticleCountByCategoryIdsRequest) returns (GetArticleCountByCategoryIdsResponse){}
  rpc GetAssortmentFilter(GetAssortmentFilterRequest) returns (GetAssortmentFilterResponse) {}
  rpc GetArticleRelatedArticles(GetArticleRelatedArticlesRequest) returns (GetArticleResponse) {}
  // Rpc for scanning articles
  rpc ScanArticle(ScanArticleRequest) returns (ScanArticleResponse) {}
}

message ScanArticleRequest {
  appelis.identity.common.v1.Token token = 1;
  string scanned = 2;
}

message ScanArticleResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError tokenErr = 1;
    CatalogArticle article = 2;
  }
}

message GetAssortmentFilterResponse {
  message FilterAttributeValue {
    AttributeValue value = 1;
    uint64 articleCount = 2;
  }

  message FilterAttribute {
    Attribute attribute = 1;
    repeated FilterAttributeValue values = 2;
  }

  message AssortmentFilter {
    double priceFrom = 1;
    double priceTo = 2;
    int64 cipCount = 3;
    repeated FilterAttribute attributes = 4;
  }

  oneof payload {
    appelis.identity.common.v1.TokenError tokenErr = 1;
    AssortmentFilter filter = 2;
  }
}

message GetAssortmentFilterRequest {
  appelis.identity.common.v1.Token token = 1;
  FilterFlagsExt filter = 2;
}

message FilterFlagsExt {
  FilterFlags flags = 1;
  // Id of category. if empty returns empty results.
  string categoryId = 2;
}

message FilterFlags {
  // if empty returns empty results.
  string businessId = 3;
  // Optional: keyword when user searches for articles before using filter.
  google.protobuf.StringValue keyword = 4;
  // Optional: if default value will be sent status will not be used in filtering.
  StockStatus status = 5;
  // Optional: if used filter attributes will be filtered according to this value
  double priceFrom = 6;
  // Optional: if used filter attributes will be filtered according to this value
  double priceTo = 7;
  // Only set when filtering using priceFrom/priceTo.
  FilterPriceType priceType = 8;
  // filtering only on assortment with CIP prices for registration.
  bool cipOnly = 9;

  repeated int64 attributeValueIds = 10;
}

enum FilterPriceType {
  UNKNOWN_FILTER_PRICE_TYPE = 0;
  FILTER_PRICE_UNIT = 1;
  FILTER_PRICE_UNIT_TAX = 2;
  FILTER_PRICE_MUNIT = 3;
  FILTER_PRICE_MUNIT_TAX = 4;
  FILTER_PRICE_PACK = 5;
  FILTER_PRICE_PACK_TAX = 6;
}

enum SortField {
  UNKNOWN_SORT_TYPE = 0;
  PRICE_UNIT = 1;
  PRICE_UNIT_TAX = 2;
  PRICE_MUNIT = 3;
  PRICE_MUNIT_TAX = 4;
  PRICE_PACK = 5;
  PRICE_PACK_TAX = 6;
  RELEVANCE = 7;
}

message SortingFlags {
  appelis.SortOrder type = 1;
  SortField field = 2;
}

message GetAssortmentRequest {
  appelis.identity.common.v1.Token token = 1;
  SortingFlags sorting = 2;
  FilterFlagsExt filtering = 3;
  appelis.CursorForwardPagingParams paging = 4;
  // Field mask will be applied to whole response.
  google.protobuf.FieldMask field_mask = 5;
}

message GetAssortmentResponse {
  message AssortmentNode {
    string cursor = 1;
    CatalogArticle data = 2;
  }

  message AssortmentPage {
    bool hasNext = 1;
    int64 totalCount = 2;
    repeated AssortmentNode nodes = 3;
  }

  oneof payload {
    appelis.identity.common.v1.TokenError tokenErr = 1;
    AssortmentPage page = 2;
  }
}

message GetArticleCountByCategoryIdsRequest {
  appelis.identity.common.v1.Token token = 1;
  // Ids of categories for which client wants article counts.
  repeated string categoryIds = 2;
  // Count of articles will be dependent of filter setup.
  FilterFlags filter = 3;
}

message GetArticleCountByCategoryIdsResponse {
  message ArticleCount{
    // Per selected category ids, as value article count.
    map<string, uint64> articleCounts = 1;
  }

  oneof payload {
    appelis.identity.common.v1.TokenError tokenErr = 1;
    ArticleCount data = 2;
  }
}

message GetArticleRelatedArticlesRequest {
  // Token representing client. If MobileUser is in claims, then prices will be filtered according to user price level.
  appelis.identity.common.v1.Token token = 1;
  // Id of article that client wants and its parent to related association.
  string articleId = 2;
  // Field mask will be applied to whole response.
  google.protobuf.FieldMask field_mask = 3;
  // Maximum length of output array.
  uint32 size = 4;
  // Optional: if business if provided impl does filtering on business availability and status=available.
  google.protobuf.StringValue businessId = 5;
}

message GetArticlesRequest {
  // Token representing client.
  appelis.identity.common.v1.Token token = 1;
  // Field mask will be applied to whole response.
  google.protobuf.FieldMask field_mask = 3;
  // Id of articles that client wants.
  repeated string articleIds = 2;
}

message GetArticleResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError tokenErr = 1;
    CatalogArticleArray data = 2;
  }
}

message CatalogArticle {
  Article data = 1;
  Article depositArticle = 2;
  BmplPricesArray bmplPrices = 3;
  AttributeValuesArray attributeValues = 4;
  CipPrices cipPrices = 5;
}

message CatalogArticleArray {
  repeated CatalogArticle array = 1;
}

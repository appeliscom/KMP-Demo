// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -Onone -module-name Shared
import Foundation
@_exported import Shared
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Shared.Skie.KMP_Demo__shared.RootDestination {
  @frozen public enum __Sealed : Swift.Hashable {
    case appStartup(Shared.RootDestination.AppStartup)
    case mainNavigation(Shared.RootDestination.MainNavigation)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.KMP_Demo__shared.RootDestination.__Sealed, b: Shared.Skie.KMP_Demo__shared.RootDestination.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KMP_Demo__shared.RootDestination.__Sealed where __Sealed : Shared.RootDestination
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KMP_Demo__shared.RootDestination.__Sealed? where __Sealed : Shared.RootDestination
public func koinGet(clazz: any Shared.KotlinKClass, qualifier: (any Shared.Koin_coreQualifier)?, parameters: (() -> Shared.Koin_coreParametersHolder)?) -> Any?
public var appStartupUILogicModule: Shared.Koin_coreModule {
  get
}
public var sharedModule: Shared.Koin_coreModule {
  get
}
public func getPlatform() -> any Shared.Platform
public var rootUILogicModule: Shared.Koin_coreModule {
  get
}
extension Shared.Skie.KMP_Demo__shared.RootEntry {
  @frozen public enum __Sealed : Swift.Hashable {
    case appStartup(Shared.RootEntry.AppStartup)
    case mainAppNavigation(Shared.RootEntry.MainAppNavigation)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.KMP_Demo__shared.RootEntry.__Sealed, b: Shared.Skie.KMP_Demo__shared.RootEntry.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KMP_Demo__shared.RootEntry.__Sealed where __Sealed : Shared.RootEntry
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KMP_Demo__shared.RootEntry.__Sealed? where __Sealed : Shared.RootEntry
public func makeNativeModule(nativeTestDependency: @escaping (Shared.Koin_coreScope) -> any Shared.NativeTestDependency) -> Shared.Koin_coreModule
extension Shared.Skie.Okio.BufferedSource {
  @frozen public enum __Sealed : Swift.Hashable {
    case buffer(Shared.OkioBuffer)
    case `else`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.Okio.BufferedSource.__Sealed, b: Shared.Skie.Okio.BufferedSource.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.Okio.BufferedSource.__Sealed where __Sealed : Shared.OkioBufferedSource
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.Okio.BufferedSource.__Sealed? where __Sealed : Shared.OkioBufferedSource
extension Shared.Skie.Okio.BufferedSink {
  @frozen public enum __Sealed : Swift.Hashable {
    case buffer(Shared.OkioBuffer)
    case `else`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.Okio.BufferedSink.__Sealed, b: Shared.Skie.Okio.BufferedSink.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.Okio.BufferedSink.__Sealed where __Sealed : Shared.OkioBufferedSink
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.Okio.BufferedSink.__Sealed? where __Sealed : Shared.OkioBufferedSink
@frozen public enum SortOrder : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownSort
  case asc
  case desc
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__SortOrder.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__SortOrder, result: inout Shared.SortOrder?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__SortOrder, result: inout Shared.SortOrder?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__SortOrder?) -> Shared.SortOrder
  public func _bridgeToObjectiveC() -> Shared.__SortOrder
  public typealias _ObjectiveCType = Shared.__SortOrder
  public typealias Companion = Shared.__SortOrder.Companion
  public static func == (a: Shared.SortOrder, b: Shared.SortOrder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.SortOrder]
  public static var allCases: [Shared.SortOrder] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.SortOrder {
  public func toKotlinEnum() -> Shared.__SortOrder
}
extension Shared.__SortOrder {
  public func toSwiftEnum() -> Shared.SortOrder
}
@frozen public enum RegisterDeviceType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownRegisterType
  case registerAndroidV5
  case registerIosV5
  case registerWebV1
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__RegisterDeviceType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__RegisterDeviceType, result: inout Shared.RegisterDeviceType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__RegisterDeviceType, result: inout Shared.RegisterDeviceType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__RegisterDeviceType?) -> Shared.RegisterDeviceType
  public func _bridgeToObjectiveC() -> Shared.__RegisterDeviceType
  public typealias _ObjectiveCType = Shared.__RegisterDeviceType
  public typealias Companion = Shared.__RegisterDeviceType.Companion
  public static func == (a: Shared.RegisterDeviceType, b: Shared.RegisterDeviceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.RegisterDeviceType]
  public static var allCases: [Shared.RegisterDeviceType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.RegisterDeviceType {
  public func toKotlinEnum() -> Shared.__RegisterDeviceType
}
extension Shared.__RegisterDeviceType {
  public func toSwiftEnum() -> Shared.RegisterDeviceType
}
extension Shared.AddOrUpdateUserResponseV2 {
  public typealias AddUserError = Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError
}
extension Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError {
  public func toKotlinEnum() -> Shared.AddOrUpdateUserResponseV2.__AddUserError
}
extension Shared.AddOrUpdateUserResponseV2.__AddUserError {
  public func toSwiftEnum() -> Shared.AddOrUpdateUserResponseV2.AddUserError
}
@frozen public enum __Bridge__AddOrUpdateUserResponseV2_AddUserError : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownAddUserError
  case duplicatedEmail
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.AddOrUpdateUserResponseV2.AddUserErrorCompanion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.AddOrUpdateUserResponseV2.__AddUserError, result: inout Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.AddOrUpdateUserResponseV2.__AddUserError, result: inout Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.AddOrUpdateUserResponseV2.__AddUserError?) -> Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError
  public func _bridgeToObjectiveC() -> Shared.AddOrUpdateUserResponseV2.__AddUserError
  public typealias _ObjectiveCType = Shared.AddOrUpdateUserResponseV2.__AddUserError
  public static func == (a: Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError, b: Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError]
  public static var allCases: [Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public enum DeviceLang : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case en
  case sk
  case cz
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__DeviceLang.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__DeviceLang, result: inout Shared.DeviceLang?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__DeviceLang, result: inout Shared.DeviceLang?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__DeviceLang?) -> Shared.DeviceLang
  public func _bridgeToObjectiveC() -> Shared.__DeviceLang
  public typealias _ObjectiveCType = Shared.__DeviceLang
  public typealias Companion = Shared.__DeviceLang.Companion
  public static func == (a: Shared.DeviceLang, b: Shared.DeviceLang) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.DeviceLang]
  public static var allCases: [Shared.DeviceLang] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.DeviceLang {
  public func toKotlinEnum() -> Shared.__DeviceLang
}
extension Shared.__DeviceLang {
  public func toSwiftEnum() -> Shared.DeviceLang
}
extension Shared.LeafletSuspendClient {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getLeaflets(request: Shared.GetLeafletsRequest) async throws -> Shared.GetLeafletsResponse
  #endif
}
extension Shared.CreateResponse {
  public typealias Error = Shared.__Bridge__CreateResponse_Error
}
extension Shared.__Bridge__CreateResponse_Error {
  public func toKotlinEnum() -> Shared.CreateResponse.__Error
}
extension Shared.CreateResponse.__Error {
  public func toSwiftEnum() -> Shared.CreateResponse.Error
}
@frozen public enum __Bridge__CreateResponse_Error : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unspecified
  case wrongPayload
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.CreateResponse.ErrorCompanion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.CreateResponse.__Error, result: inout Shared.__Bridge__CreateResponse_Error?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.CreateResponse.__Error, result: inout Shared.__Bridge__CreateResponse_Error?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.CreateResponse.__Error?) -> Shared.__Bridge__CreateResponse_Error
  public func _bridgeToObjectiveC() -> Shared.CreateResponse.__Error
  public typealias _ObjectiveCType = Shared.CreateResponse.__Error
  public static func == (a: Shared.__Bridge__CreateResponse_Error, b: Shared.__Bridge__CreateResponse_Error) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.__Bridge__CreateResponse_Error]
  public static var allCases: [Shared.__Bridge__CreateResponse_Error] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public enum RegisterError : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownRegisterError
  case uniqueIdAlreadyRegistered
  case accountSettingsNotFound
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__RegisterError.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__RegisterError, result: inout Shared.RegisterError?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__RegisterError, result: inout Shared.RegisterError?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__RegisterError?) -> Shared.RegisterError
  public func _bridgeToObjectiveC() -> Shared.__RegisterError
  public typealias _ObjectiveCType = Shared.__RegisterError
  public typealias Companion = Shared.__RegisterError.Companion
  public static func == (a: Shared.RegisterError, b: Shared.RegisterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.RegisterError]
  public static var allCases: [Shared.RegisterError] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.RegisterError {
  public func toKotlinEnum() -> Shared.__RegisterError
}
extension Shared.__RegisterError {
  public func toSwiftEnum() -> Shared.RegisterError
}
@frozen public enum PermissionError : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownPermissionError
  case unauthorized
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__PermissionError.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__PermissionError, result: inout Shared.PermissionError?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__PermissionError, result: inout Shared.PermissionError?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__PermissionError?) -> Shared.PermissionError
  public func _bridgeToObjectiveC() -> Shared.__PermissionError
  public typealias _ObjectiveCType = Shared.__PermissionError
  public typealias Companion = Shared.__PermissionError.Companion
  public static func == (a: Shared.PermissionError, b: Shared.PermissionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.PermissionError]
  public static var allCases: [Shared.PermissionError] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.PermissionError {
  public func toKotlinEnum() -> Shared.__PermissionError
}
extension Shared.__PermissionError {
  public func toSwiftEnum() -> Shared.PermissionError
}
extension Shared.DeviceResponse {
  public typealias Error = Shared.__Bridge__DeviceResponse_Error
}
extension Shared.__Bridge__DeviceResponse_Error {
  public func toKotlinEnum() -> Shared.DeviceResponse.__Error
}
extension Shared.DeviceResponse.__Error {
  public func toSwiftEnum() -> Shared.DeviceResponse.Error
}
@frozen public enum __Bridge__DeviceResponse_Error : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case notFound
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.DeviceResponse.ErrorCompanion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.DeviceResponse.__Error, result: inout Shared.__Bridge__DeviceResponse_Error?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.DeviceResponse.__Error, result: inout Shared.__Bridge__DeviceResponse_Error?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.DeviceResponse.__Error?) -> Shared.__Bridge__DeviceResponse_Error
  public func _bridgeToObjectiveC() -> Shared.DeviceResponse.__Error
  public typealias _ObjectiveCType = Shared.DeviceResponse.__Error
  public static func == (a: Shared.__Bridge__DeviceResponse_Error, b: Shared.__Bridge__DeviceResponse_Error) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.__Bridge__DeviceResponse_Error]
  public static var allCases: [Shared.__Bridge__DeviceResponse_Error] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public enum DeviceType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownDeviceType
  case androidV5
  case iosV5
  case webV1
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__DeviceType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__DeviceType, result: inout Shared.DeviceType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__DeviceType, result: inout Shared.DeviceType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__DeviceType?) -> Shared.DeviceType
  public func _bridgeToObjectiveC() -> Shared.__DeviceType
  public typealias _ObjectiveCType = Shared.__DeviceType
  public typealias Companion = Shared.__DeviceType.Companion
  public static func == (a: Shared.DeviceType, b: Shared.DeviceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.DeviceType]
  public static var allCases: [Shared.DeviceType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.DeviceType {
  public func toKotlinEnum() -> Shared.__DeviceType
}
extension Shared.__DeviceType {
  public func toSwiftEnum() -> Shared.DeviceType
}
extension Shared.LeafletRepository {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getLeaflets() async throws -> Shared.GetLeafletsResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getLeafletsWithToken(token: Swift.String) async throws -> Shared.GetLeafletsResponse
  #endif
}
@frozen public enum WeekDay : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownWeekDay
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  case sunday
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__WeekDay.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__WeekDay, result: inout Shared.WeekDay?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__WeekDay, result: inout Shared.WeekDay?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__WeekDay?) -> Shared.WeekDay
  public func _bridgeToObjectiveC() -> Shared.__WeekDay
  public typealias _ObjectiveCType = Shared.__WeekDay
  public typealias Companion = Shared.__WeekDay.Companion
  public static func == (a: Shared.WeekDay, b: Shared.WeekDay) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.WeekDay]
  public static var allCases: [Shared.WeekDay] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.WeekDay {
  public func toKotlinEnum() -> Shared.__WeekDay
}
extension Shared.__WeekDay {
  public func toSwiftEnum() -> Shared.WeekDay
}
@frozen public enum TokenError : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownTokenError
  case invalidToken
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__TokenError.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__TokenError, result: inout Shared.TokenError?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__TokenError, result: inout Shared.TokenError?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__TokenError?) -> Shared.TokenError
  public func _bridgeToObjectiveC() -> Shared.__TokenError
  public typealias _ObjectiveCType = Shared.__TokenError
  public typealias Companion = Shared.__TokenError.Companion
  public static func == (a: Shared.TokenError, b: Shared.TokenError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.TokenError]
  public static var allCases: [Shared.TokenError] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.TokenError {
  public func toKotlinEnum() -> Shared.__TokenError
}
extension Shared.__TokenError {
  public func toSwiftEnum() -> Shared.TokenError
}
@frozen public enum Language : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case cs
  case sk
  case en
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__Language.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__Language, result: inout Shared.Language?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__Language, result: inout Shared.Language?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__Language?) -> Shared.Language
  public func _bridgeToObjectiveC() -> Shared.__Language
  public typealias _ObjectiveCType = Shared.__Language
  public typealias Companion = Shared.__Language.Companion
  public static func == (a: Shared.Language, b: Shared.Language) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.Language]
  public static var allCases: [Shared.Language] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.Language {
  public func toKotlinEnum() -> Shared.__Language
}
extension Shared.__Language {
  public func toSwiftEnum() -> Shared.Language
}
extension Shared.RegisterDeviceRepository {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func registerDevice() async throws
  #endif
}
@frozen public enum DeviceEventType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknownDeviceEventType
  case logout
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__DeviceEventType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__DeviceEventType, result: inout Shared.DeviceEventType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__DeviceEventType, result: inout Shared.DeviceEventType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__DeviceEventType?) -> Shared.DeviceEventType
  public func _bridgeToObjectiveC() -> Shared.__DeviceEventType
  public typealias _ObjectiveCType = Shared.__DeviceEventType
  public typealias Companion = Shared.__DeviceEventType.Companion
  public static func == (a: Shared.DeviceEventType, b: Shared.DeviceEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.DeviceEventType]
  public static var allCases: [Shared.DeviceEventType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.DeviceEventType {
  public func toKotlinEnum() -> Shared.__DeviceEventType
}
extension Shared.__DeviceEventType {
  public func toSwiftEnum() -> Shared.DeviceEventType
}
@frozen public enum Currency : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case currencyUnknown
  case czk
  case eur
  case usd
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.__Currency.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__Currency, result: inout Shared.Currency?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__Currency, result: inout Shared.Currency?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__Currency?) -> Shared.Currency
  public func _bridgeToObjectiveC() -> Shared.__Currency
  public typealias _ObjectiveCType = Shared.__Currency
  public typealias Companion = Shared.__Currency.Companion
  public static func == (a: Shared.Currency, b: Shared.Currency) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.Currency]
  public static var allCases: [Shared.Currency] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.Currency {
  public func toKotlinEnum() -> Shared.__Currency
}
extension Shared.__Currency {
  public func toSwiftEnum() -> Shared.Currency
}
extension Shared.RefreshResponse {
  public typealias Error = Shared.__Bridge__RefreshResponse_Error
}
extension Shared.__Bridge__RefreshResponse_Error {
  public func toKotlinEnum() -> Shared.RefreshResponse.__Error
}
extension Shared.RefreshResponse.__Error {
  public func toSwiftEnum() -> Shared.RefreshResponse.Error
}
@frozen public enum __Bridge__RefreshResponse_Error : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unspecified
  case invalidToken
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: Shared.RefreshResponse.ErrorCompanion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.RefreshResponse.__Error, result: inout Shared.__Bridge__RefreshResponse_Error?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.RefreshResponse.__Error, result: inout Shared.__Bridge__RefreshResponse_Error?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.RefreshResponse.__Error?) -> Shared.__Bridge__RefreshResponse_Error
  public func _bridgeToObjectiveC() -> Shared.RefreshResponse.__Error
  public typealias _ObjectiveCType = Shared.RefreshResponse.__Error
  public static func == (a: Shared.__Bridge__RefreshResponse_Error, b: Shared.__Bridge__RefreshResponse_Error) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.__Bridge__RefreshResponse_Error]
  public static var allCases: [Shared.__Bridge__RefreshResponse_Error] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.Wire_grpc_clientGrpcCall {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func execute(request: Any) async throws -> Any
  #endif
}
public func LifecycleRegistry() -> any Shared.LifecycleRegistry
public func LifecycleRegistry(initialState: Shared.LifecycleState) -> any Shared.LifecycleRegistry
extension Shared.LifecycleOwner {
  public func doOnCreate(block: @escaping () -> Swift.Void)
  public func doOnDestroy(block: @escaping () -> Swift.Void)
  public func doOnPause(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
  public func doOnResume(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
  public func doOnStart(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
  public func doOnStop(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
}
extension Shared.LifecycleRegistry {
  public func create()
  public func destroy()
  public func pause()
  public func resume()
  public func start()
  public func stop()
}
@frozen public enum LifecycleState : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case destroyed
  case initialized
  case created
  case started
  case resumed
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__LifecycleState, result: inout Shared.LifecycleState?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__LifecycleState, result: inout Shared.LifecycleState?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__LifecycleState?) -> Shared.LifecycleState
  public func _bridgeToObjectiveC() -> Shared.__LifecycleState
  public typealias _ObjectiveCType = Shared.__LifecycleState
  public static func == (a: Shared.LifecycleState, b: Shared.LifecycleState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.LifecycleState]
  public static var allCases: [Shared.LifecycleState] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.LifecycleState {
  public func toKotlinEnum() -> Shared.__LifecycleState
}
extension Shared.__LifecycleState {
  public func toSwiftEnum() -> Shared.LifecycleState
}
extension Shared.Lifecycle {
  public func doOnCreate(block: @escaping () -> Swift.Void)
  public func doOnDestroy(block: @escaping () -> Swift.Void)
  public func doOnPause(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
  public func doOnResume(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
  public func doOnStart(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
  public func doOnStop(isOneTime: Swift.Bool, block: @escaping () -> Swift.Void)
  public func subscribe(onCreate: (() -> Swift.Void)?, onStart: (() -> Swift.Void)?, onResume: (() -> Swift.Void)?, onPause: (() -> Swift.Void)?, onStop: (() -> Swift.Void)?, onDestroy: (() -> Swift.Void)?) -> any Shared.LifecycleCallbacks
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = Shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: Shared.SkieSwiftStateFlow<Shared.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftOptionalMutableSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = Shared.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftOptionalFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftOptionalFlow<T>
  @objc deinit
}
#endif
public enum Skie {
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = Shared.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = Shared.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = Shared.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = Shared.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = Shared.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = Shared.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = Shared.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = Shared.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = Shared.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = Shared.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = Shared.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = Shared.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = Shared.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = Shared.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = Shared.Skie_SuspendResult
      public enum Canceled {
        public typealias __Kotlin = Shared.Skie_SuspendResult.Canceled
      }
      public enum Error {
        public typealias __Kotlin = Shared.Skie_SuspendResult.Error
      }
      public enum Success {
        public typealias __Kotlin = Shared.Skie_SuspendResult.Success
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = Shared.Skie.RuntimeKotlin
  public enum KotlinxCoroutinesCore {
    public enum Flow {
      public typealias __Kotlin = Shared.Kotlinx_coroutines_coreFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = Shared.Kotlinx_coroutines_coreMutableSharedFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = Shared.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = Shared.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = Shared.Kotlinx_coroutines_coreStateFlow
    }
    public enum Runnable {
      public typealias __Kotlin = Shared.Kotlinx_coroutines_coreRunnable
    }
    public enum SelectClause0 {
    }
    public enum SelectClause {
    }
    public enum SelectClause1 {
    }
    public enum SelectClause2 {
    }
    public enum SelectInstance {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = Shared.Skie.KotlinxCoroutinesCore
  public enum KMP_Demo__shared {
    public enum RootDestination {
    }
    public enum RootEntry {
    }
  }
  public typealias KMP_Demo__shared_ = Shared.Skie.KMP_Demo__shared
  public enum Decompose {
    public enum Child {
    }
  }
  public typealias com_arkivanov_decompose__decompose = Shared.Skie.Decompose
  public enum HomescreenUiLogic {
    public enum RootComponent {
      public enum Child {
      }
    }
  }
  public typealias KMP_Demo_features_homescreen__homescreen_ui_logic = Shared.Skie.HomescreenUiLogic
  public enum Okio {
    public enum BufferedSink {
    }
    public enum BufferedSource {
    }
  }
  public typealias com_squareup_okio__okio = Shared.Skie.Okio
  public enum KotlinxSerializationCore {
    public enum PolymorphicKind {
    }
    public enum SerialKind {
    }
    public enum PrimitiveKind {
    }
    public enum StructureKind {
    }
    public enum SerializersModule {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = Shared.Skie.KotlinxSerializationCore
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = Shared.SkieKotlinStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public var value: T {
    get
  }
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftStateFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftStateFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension Shared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: Shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = Shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public var value: T? {
    get
  }
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftOptionalStateFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = Shared.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = Shared.SkieKotlinSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftSharedFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = Shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: Shared.SkieSwiftStateFlow<Shared.KotlinInt> {
    get
  }
  final public var value: T? {
    get
    set
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftOptionalMutableStateFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = Shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftOptionalSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = Shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: Shared.SkieSwiftStateFlow<Shared.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftMutableSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = Shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = Shared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: Shared.SkieSwiftStateFlow<Shared.KotlinInt> {
    get
  }
  final public var value: T {
    get
    set
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  final public func makeAsyncIterator() -> Shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> Shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: Shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout Shared.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType?) -> Shared.SkieSwiftMutableStateFlow<T>
  @objc deinit
}
#endif
extension Shared.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(Shared.Skie_SuspendResult.Canceled)
    case error(Shared.Skie_SuspendResult.Error)
    case success(Shared.Skie_SuspendResult.Success)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: Shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : Shared.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : Shared.Skie_SuspendResult
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  public typealias Element = T
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  public func next() async -> Shared.SkieSwiftFlowIterator<T>.Element?
  #endif
}
#endif
extension Shared.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: Shared.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: Shared.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: Shared.SkieColdFlowIterator<E>) -> Shared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension Shared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> Shared.KotlinBoolean
  #endif
}
@frozen public enum Wire_runtimeFieldEncoding : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case varint
  case fixed64
  case lengthDelimited
  case fixed32
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: Shared.__Wire_runtimeFieldEncoding.Companion {
    get
  }
  public func rawProtoAdapter() -> Shared.Wire_runtimeProtoAdapter<Swift.AnyObject>
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__Wire_runtimeFieldEncoding, result: inout Shared.Wire_runtimeFieldEncoding?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__Wire_runtimeFieldEncoding, result: inout Shared.Wire_runtimeFieldEncoding?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__Wire_runtimeFieldEncoding?) -> Shared.Wire_runtimeFieldEncoding
  public func _bridgeToObjectiveC() -> Shared.__Wire_runtimeFieldEncoding
  public typealias _ObjectiveCType = Shared.__Wire_runtimeFieldEncoding
  public typealias Companion = Shared.__Wire_runtimeFieldEncoding.Companion
  public static func == (a: Shared.Wire_runtimeFieldEncoding, b: Shared.Wire_runtimeFieldEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.Wire_runtimeFieldEncoding]
  public static var allCases: [Shared.Wire_runtimeFieldEncoding] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.Wire_runtimeFieldEncoding {
  public func toKotlinEnum() -> Shared.__Wire_runtimeFieldEncoding
}
extension Shared.__Wire_runtimeFieldEncoding {
  public func toSwiftEnum() -> Shared.Wire_runtimeFieldEncoding
}
@frozen public enum Wire_runtimeSyntax : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case proto2
  case proto3
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: Shared.__Wire_runtimeSyntax.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__Wire_runtimeSyntax, result: inout Shared.Wire_runtimeSyntax?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__Wire_runtimeSyntax, result: inout Shared.Wire_runtimeSyntax?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__Wire_runtimeSyntax?) -> Shared.Wire_runtimeSyntax
  public func _bridgeToObjectiveC() -> Shared.__Wire_runtimeSyntax
  public typealias _ObjectiveCType = Shared.__Wire_runtimeSyntax
  public typealias Companion = Shared.__Wire_runtimeSyntax.Companion
  public static func == (a: Shared.Wire_runtimeSyntax, b: Shared.Wire_runtimeSyntax) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.Wire_runtimeSyntax]
  public static var allCases: [Shared.Wire_runtimeSyntax] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.Wire_runtimeSyntax {
  public func toKotlinEnum() -> Shared.__Wire_runtimeSyntax
}
extension Shared.__Wire_runtimeSyntax {
  public func toSwiftEnum() -> Shared.Wire_runtimeSyntax
}
extension Shared.Back_handlerBackEvent {
  public typealias SwipeEdge = Shared.__Bridge__Back_handlerBackEvent_SwipeEdge
}
extension Shared.__Bridge__Back_handlerBackEvent_SwipeEdge {
  public func toKotlinEnum() -> Shared.Back_handlerBackEvent.__SwipeEdge
}
extension Shared.Back_handlerBackEvent.__SwipeEdge {
  public func toSwiftEnum() -> Shared.Back_handlerBackEvent.SwipeEdge
}
@frozen public enum __Bridge__Back_handlerBackEvent_SwipeEdge : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case left
  case right
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.Back_handlerBackEvent.__SwipeEdge, result: inout Shared.__Bridge__Back_handlerBackEvent_SwipeEdge?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.Back_handlerBackEvent.__SwipeEdge, result: inout Shared.__Bridge__Back_handlerBackEvent_SwipeEdge?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.Back_handlerBackEvent.__SwipeEdge?) -> Shared.__Bridge__Back_handlerBackEvent_SwipeEdge
  public func _bridgeToObjectiveC() -> Shared.Back_handlerBackEvent.__SwipeEdge
  public typealias _ObjectiveCType = Shared.Back_handlerBackEvent.__SwipeEdge
  public static func == (a: Shared.__Bridge__Back_handlerBackEvent_SwipeEdge, b: Shared.__Bridge__Back_handlerBackEvent_SwipeEdge) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.__Bridge__Back_handlerBackEvent_SwipeEdge]
  public static var allCases: [Shared.__Bridge__Back_handlerBackEvent_SwipeEdge] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public enum KotlinKVariance : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case invariant
  case `in`
  case out
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__KotlinKVariance, result: inout Shared.KotlinKVariance?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__KotlinKVariance, result: inout Shared.KotlinKVariance?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__KotlinKVariance?) -> Shared.KotlinKVariance
  public func _bridgeToObjectiveC() -> Shared.__KotlinKVariance
  public typealias _ObjectiveCType = Shared.__KotlinKVariance
  public static func == (a: Shared.KotlinKVariance, b: Shared.KotlinKVariance) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.KotlinKVariance]
  public static var allCases: [Shared.KotlinKVariance] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.KotlinKVariance {
  public func toKotlinEnum() -> Shared.__KotlinKVariance
}
extension Shared.__KotlinKVariance {
  public func toSwiftEnum() -> Shared.KotlinKVariance
}
@frozen public enum KotlinLazyThreadSafetyMode : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case synchronized
  case publication
  case none
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__KotlinLazyThreadSafetyMode, result: inout Shared.KotlinLazyThreadSafetyMode?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__KotlinLazyThreadSafetyMode, result: inout Shared.KotlinLazyThreadSafetyMode?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__KotlinLazyThreadSafetyMode?) -> Shared.KotlinLazyThreadSafetyMode
  public func _bridgeToObjectiveC() -> Shared.__KotlinLazyThreadSafetyMode
  public typealias _ObjectiveCType = Shared.__KotlinLazyThreadSafetyMode
  public static func == (a: Shared.KotlinLazyThreadSafetyMode, b: Shared.KotlinLazyThreadSafetyMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.KotlinLazyThreadSafetyMode]
  public static var allCases: [Shared.KotlinLazyThreadSafetyMode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.KotlinLazyThreadSafetyMode {
  public func toKotlinEnum() -> Shared.__KotlinLazyThreadSafetyMode
}
extension Shared.__KotlinLazyThreadSafetyMode {
  public func toSwiftEnum() -> Shared.KotlinLazyThreadSafetyMode
}
extension Shared.Skie.KotlinxCoroutinesCore.SelectClause {
  @frozen public enum __Sealed {
    case selectClause0(any Shared.Kotlinx_coroutines_coreSelectClause0)
    case selectClause1(any Shared.Kotlinx_coroutines_coreSelectClause1)
    case selectClause2(any Shared.Kotlinx_coroutines_coreSelectClause2)
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause.__Sealed where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause.__Sealed? where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause
extension Shared.Skie.KotlinxCoroutinesCore.SelectInstance {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: Shared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed, b: Shared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed where __Sealed : Shared.Kotlinx_coroutines_coreSelectInstance
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed? where __Sealed : Shared.Kotlinx_coroutines_coreSelectInstance
extension Shared.Kotlinx_coroutines_coreChannelIterator {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> Shared.KotlinBoolean
  #endif
}
extension Shared.Kotlinx_coroutines_coreFlowCollector {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
  #endif
}
extension Shared.Skie.KotlinxCoroutinesCore.SelectClause2 {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: Shared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed, b: Shared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause2
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed? where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause2
extension Shared.Skie.KotlinxCoroutinesCore.SelectClause0 {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: Shared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed, b: Shared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause0
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed? where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause0
extension Shared.Kotlinx_coroutines_coreFlow {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any Shared.Kotlinx_coroutines_coreFlowCollector) async throws
  #endif
}
extension Shared.Kotlinx_coroutines_coreReceiveChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func receive() async throws -> Any?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func receiveCatching() async throws -> Any?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  @available(*, unavailable, message: "Deprecated in favor of 'receiveCatching'. Please note that the provided replacement does not rethrow channel's close cause as 'receiveOrNull' did, for the detailed replacement please refer to the 'receiveOrNull' documentation")
  public func receiveOrNull() async throws -> Any?
  #endif
}
extension Shared.Skie.KotlinxCoroutinesCore.SelectClause1 {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: Shared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed, b: Shared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause1
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed? where __Sealed : Shared.Kotlinx_coroutines_coreSelectClause1
extension Shared.Kotlinx_coroutines_coreSendChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func send(element: Any?) async throws
  #endif
}
extension Shared.Skie.HomescreenUiLogic.RootComponent.Child {
  @frozen public enum __Sealed : Swift.Hashable {
    case homescreenChild(Shared.RootComponentChild.HomescreenChild)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.HomescreenUiLogic.RootComponent.Child.__Sealed, b: Shared.Skie.HomescreenUiLogic.RootComponent.Child.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.HomescreenUiLogic.RootComponent.Child.__Sealed where __Sealed : Shared.RootComponentChild
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.HomescreenUiLogic.RootComponent.Child.__Sealed? where __Sealed : Shared.RootComponentChild
public var homescreenUILogicModule: Shared.Koin_coreModule {
  get
}
@available(*, deprecated, message: "Please use Child Slot API")
public func OverlayNavigation() -> any Shared.OverlayNavigation
extension ObjectiveC.NSObject {
  public func hashString() -> Swift.String
}
extension Shared.Skie.Decompose.Child {
  @frozen public enum __Sealed<C, T> : Swift.Hashable where C : AnyObject, T : AnyObject {
    case created(Shared.ChildCreated<C, T>)
    case destroyed(Shared.ChildDestroyed<C>)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.Decompose.Child.__Sealed<C, T>, b: Shared.Skie.Decompose.Child.__Sealed<C, T>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<C, T, __Sealed>(of sealed: __Sealed) -> Shared.Skie.Decompose.Child.__Sealed<C, T> where C : AnyObject, T : AnyObject, __Sealed : Shared.Child<C, T>
@_disfavoredOverload public func onEnum<C, T, __Sealed>(of sealed: __Sealed?) -> Shared.Skie.Decompose.Child.__Sealed<C, T>? where C : AnyObject, T : AnyObject, __Sealed : Shared.Child<C, T>
public func SlotNavigation() -> any Shared.SlotNavigation
extension Shared.PagesNavigator {
  public func clear(onComplete: @escaping (Shared.Pages<Swift.AnyObject>, Shared.Pages<Swift.AnyObject>) -> Swift.Void)
  public func navigate(transformer: @escaping (Shared.Pages<Swift.AnyObject>) -> Shared.Pages<Swift.AnyObject>)
  public func select(index: Swift.Int32, onComplete: @escaping (Shared.Pages<Swift.AnyObject>, Shared.Pages<Swift.AnyObject>) -> Swift.Void)
  public func selectFirst(onComplete: @escaping (Shared.Pages<Swift.AnyObject>, Shared.Pages<Swift.AnyObject>) -> Swift.Void)
  public func selectLast(onComplete: @escaping (Shared.Pages<Swift.AnyObject>, Shared.Pages<Swift.AnyObject>) -> Swift.Void)
  public func selectNext(circular: Swift.Bool, onComplete: @escaping (Shared.Pages<Swift.AnyObject>, Shared.Pages<Swift.AnyObject>) -> Swift.Void)
  public func selectPrev(circular: Swift.Bool, onComplete: @escaping (Shared.Pages<Swift.AnyObject>, Shared.Pages<Swift.AnyObject>) -> Swift.Void)
}
extension Shared.OverlayNavigator {
  @available(*, deprecated, message: "Please use Child Slot API")
  public func activate(configuration: Any, onComplete: @escaping () -> Swift.Void)
  @available(*, deprecated, message: "Please use Child Slot API")
  public func dismiss(onComplete: @escaping (Shared.KotlinBoolean) -> Swift.Void)
  @available(*, deprecated, message: "Please use Child Slot API")
  public func navigate(transformer: @escaping (Any?) -> Any?)
}
@frozen public enum ObserveLifecycleMode : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case createDestroy
  case startStop
  case resumePause
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__ObserveLifecycleMode, result: inout Shared.ObserveLifecycleMode?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__ObserveLifecycleMode, result: inout Shared.ObserveLifecycleMode?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__ObserveLifecycleMode?) -> Shared.ObserveLifecycleMode
  public func _bridgeToObjectiveC() -> Shared.__ObserveLifecycleMode
  public typealias _ObjectiveCType = Shared.__ObserveLifecycleMode
  public static func == (a: Shared.ObserveLifecycleMode, b: Shared.ObserveLifecycleMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.ObserveLifecycleMode]
  public static var allCases: [Shared.ObserveLifecycleMode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.ObserveLifecycleMode {
  public func toKotlinEnum() -> Shared.__ObserveLifecycleMode
}
extension Shared.__ObserveLifecycleMode {
  public func toSwiftEnum() -> Shared.ObserveLifecycleMode
}
@frozen public enum ChildNavStateStatus : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case destroyed
  case inactive
  case active
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__ChildNavStateStatus, result: inout Shared.ChildNavStateStatus?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__ChildNavStateStatus, result: inout Shared.ChildNavStateStatus?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__ChildNavStateStatus?) -> Shared.ChildNavStateStatus
  public func _bridgeToObjectiveC() -> Shared.__ChildNavStateStatus
  public typealias _ObjectiveCType = Shared.__ChildNavStateStatus
  public static func == (a: Shared.ChildNavStateStatus, b: Shared.ChildNavStateStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.ChildNavStateStatus]
  public static var allCases: [Shared.ChildNavStateStatus] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.ChildNavStateStatus {
  public func toKotlinEnum() -> Shared.__ChildNavStateStatus
}
extension Shared.__ChildNavStateStatus {
  public func toSwiftEnum() -> Shared.ChildNavStateStatus
}
public func PagesNavigation() -> any Shared.PagesNavigation
public func StackNavigation() -> any Shared.StackNavigation
public func MutableValue(initialValue: Any) -> Shared.MutableValue<Swift.AnyObject>
extension Shared.ComponentContext {
  public func componentCoroutineScope() -> any Shared.Kotlinx_coroutines_coreCoroutineScope
  public func childContext(key: Swift.String, lifecycle: (any Shared.Lifecycle)?) -> any Shared.ComponentContext
  public func children(source: any Shared.NavigationSource, key: Swift.String, initialState: @escaping () -> any Shared.NavState, saveState: @escaping (any Shared.NavState) -> (any Shared.ParcelableParcelableContainer)?, restoreState: @escaping (any Shared.ParcelableParcelableContainer) -> (any Shared.NavState)?, navTransformer: @escaping (any Shared.NavState, Any) -> any Shared.NavState, stateMapper: @escaping (any Shared.NavState, [Shared.Child<Swift.AnyObject, Swift.AnyObject>]) -> Any, onStateChanged: @escaping (any Shared.NavState, (any Shared.NavState)?) -> Swift.Void, onEventComplete: @escaping (Any, any Shared.NavState, any Shared.NavState) -> Swift.Void, backTransformer: @escaping (any Shared.NavState) -> (() -> any Shared.NavState)?, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Swift.AnyObject>
  @available(*, deprecated, message: "Parcelize compiler plugin will not work with KMP and K2 compiler. Please use similar API based on kotlinx-serialization.")
  public func children(source: any Shared.NavigationSource, key: Swift.String, initialState: @escaping () -> any Shared.NavState, navTransformer: @escaping (any Shared.NavState, Any) -> any Shared.NavState, stateMapper: @escaping (any Shared.NavState, [Shared.Child<any Shared.RuntimeParcelable, Swift.AnyObject>]) -> Any, onStateChanged: @escaping (any Shared.NavState, (any Shared.NavState)?) -> Swift.Void, onEventComplete: @escaping (Any, any Shared.NavState, any Shared.NavState) -> Swift.Void, backTransformer: @escaping (any Shared.NavState) -> (() -> any Shared.NavState)?, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Swift.AnyObject>
  public func children(source: any Shared.NavigationSource, stateSerializer: (any Shared.Kotlinx_serialization_coreKSerializer)?, initialState: @escaping () -> any Shared.NavState, key: Swift.String, navTransformer: @escaping (any Shared.NavState, Any) -> any Shared.NavState, stateMapper: @escaping (any Shared.NavState, [Shared.Child<Swift.AnyObject, Swift.AnyObject>]) -> Any, onStateChanged: @escaping (any Shared.NavState, (any Shared.NavState)?) -> Swift.Void, onEventComplete: @escaping (Any, any Shared.NavState, any Shared.NavState) -> Swift.Void, backTransformer: @escaping (any Shared.NavState) -> (() -> any Shared.NavState)?, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Swift.AnyObject>
  @available(*, deprecated, message: "Please use Child Slot API")
  public func childOverlay(source: any Shared.OverlayNavigationSource, saveConfiguration: @escaping (Any?) -> (any Shared.ParcelableParcelableContainer)?, restoreConfiguration: @escaping (any Shared.ParcelableParcelableContainer) -> Any?, key: Swift.String, initialConfiguration: @escaping () -> Any?, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildOverlay<Swift.AnyObject, Swift.AnyObject>>
  @available(*, deprecated, message: "Please use Child Slot API")
  public func childOverlay(source: any Shared.OverlayNavigationSource, key: Swift.String, initialConfiguration: @escaping () -> (any Shared.RuntimeParcelable)?, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildOverlay<any Shared.RuntimeParcelable, Swift.AnyObject>>
  @available(*, deprecated, message: "Please use Child Slot API")
  public func childOverlay(source: any Shared.OverlayNavigationSource, configurationClass: any Shared.KotlinKClass, key: Swift.String, initialConfiguration: @escaping () -> (any Shared.RuntimeParcelable)?, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildOverlay<any Shared.RuntimeParcelable, Swift.AnyObject>>
  public func childPages(source: any Shared.PagesNavigationSource, initialPages: @escaping () -> Shared.Pages<Swift.AnyObject>, savePages: @escaping (Shared.Pages<Swift.AnyObject>) -> (any Shared.ParcelableParcelableContainer)?, restorePages: @escaping (any Shared.ParcelableParcelableContainer) -> Shared.Pages<Swift.AnyObject>?, key: Swift.String, pageStatus: @escaping (Shared.KotlinInt, Shared.Pages<Swift.AnyObject>) -> Shared.ChildNavStateStatus, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildPages<Swift.AnyObject, Swift.AnyObject>>
  @available(*, deprecated, message: "Parcelize compiler plugin will not work with KMP and K2 compiler. Please use similar API based on kotlinx-serialization.")
  public func childPages(source: any Shared.PagesNavigationSource, initialPages: @escaping () -> Shared.Pages<any Shared.RuntimeParcelable>, key: Swift.String, pageStatus: @escaping (Shared.KotlinInt, Shared.Pages<any Shared.RuntimeParcelable>) -> Shared.ChildNavStateStatus, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildPages<any Shared.RuntimeParcelable, Swift.AnyObject>>
  @available(*, deprecated, message: "Parcelize compiler plugin will not work with KMP and K2 compiler. Please use similar API based on kotlinx-serialization.")
  public func childPages(source: any Shared.PagesNavigationSource, initialPages: @escaping () -> Shared.Pages<any Shared.RuntimeParcelable>, configurationClass: any Shared.KotlinKClass, key: Swift.String, pageStatus: @escaping (Shared.KotlinInt, Shared.Pages<any Shared.RuntimeParcelable>) -> Shared.ChildNavStateStatus, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildPages<any Shared.RuntimeParcelable, Swift.AnyObject>>
  public func childPages(source: any Shared.PagesNavigationSource, serializer: (any Shared.Kotlinx_serialization_coreKSerializer)?, initialPages: @escaping () -> Shared.Pages<Swift.AnyObject>, key: Swift.String, pageStatus: @escaping (Shared.KotlinInt, Shared.Pages<Swift.AnyObject>) -> Shared.ChildNavStateStatus, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildPages<Swift.AnyObject, Swift.AnyObject>>
  public func childSlot(source: any Shared.SlotNavigationSource, saveConfiguration: @escaping (Any?) -> (any Shared.ParcelableParcelableContainer)?, restoreConfiguration: @escaping (any Shared.ParcelableParcelableContainer) -> Any?, key: Swift.String, initialConfiguration: @escaping () -> Any?, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildSlot<Swift.AnyObject, Swift.AnyObject>>
  public func childSlot(source: any Shared.SlotNavigationSource, key: Swift.String, initialConfiguration: @escaping () -> (any Shared.RuntimeParcelable)?, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildSlot<any Shared.RuntimeParcelable, Swift.AnyObject>>
  @available(*, deprecated, message: "Parcelize compiler plugin will not work with KMP and K2 compiler. Please use similar API based on kotlinx-serialization.")
  public func childSlot(source: any Shared.SlotNavigationSource, configurationClass: any Shared.KotlinKClass, key: Swift.String, initialConfiguration: @escaping () -> (any Shared.RuntimeParcelable)?, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildSlot<any Shared.RuntimeParcelable, Swift.AnyObject>>
  public func childSlot(source: any Shared.SlotNavigationSource, serializer: (any Shared.Kotlinx_serialization_coreKSerializer)?, initialConfiguration: @escaping () -> Any?, key: Swift.String, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildSlot<Swift.AnyObject, Swift.AnyObject>>
  public func childStack(source: any Shared.StackNavigationSource, initialStack: @escaping () -> [Any], saveStack: @escaping ([Any]) -> (any Shared.ParcelableParcelableContainer)?, restoreStack: @escaping (any Shared.ParcelableParcelableContainer) -> [Any]?, key: Swift.String, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildStack<Swift.AnyObject, Swift.AnyObject>>
  public func childStack(source: any Shared.StackNavigationSource, initialStack: @escaping () -> [any Shared.RuntimeParcelable], key: Swift.String, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildStack<any Shared.RuntimeParcelable, Swift.AnyObject>>
  @available(*, deprecated, message: "Parcelize compiler plugin will not work with KMP and K2 compiler. Please use similar API based on kotlinx-serialization.")
  public func childStack(source: any Shared.StackNavigationSource, initialStack: @escaping () -> [any Shared.RuntimeParcelable], configurationClass: any Shared.KotlinKClass, key: Swift.String, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildStack<any Shared.RuntimeParcelable, Swift.AnyObject>>
  public func childStack(source: any Shared.StackNavigationSource, initialConfiguration: any Shared.RuntimeParcelable, key: Swift.String, persistent: Swift.Bool, handleBackButton: Swift.Bool, childFactory: @escaping (any Shared.RuntimeParcelable, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildStack<any Shared.RuntimeParcelable, Swift.AnyObject>>
  public func childStack(source: any Shared.StackNavigationSource, serializer: (any Shared.Kotlinx_serialization_coreKSerializer)?, initialStack: @escaping () -> [Any], key: Swift.String, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildStack<Swift.AnyObject, Swift.AnyObject>>
  public func childStack(source: any Shared.StackNavigationSource, serializer: (any Shared.Kotlinx_serialization_coreKSerializer)?, initialConfiguration: Any, key: Swift.String, handleBackButton: Swift.Bool, childFactory: @escaping (Any, any Shared.ComponentContext) -> Any) -> Shared.Value<Shared.ChildStack<Swift.AnyObject, Swift.AnyObject>>
}
extension Shared.SlotNavigator {
  public func activate(configuration: Any, onComplete: @escaping () -> Swift.Void)
  public func dismiss(onComplete: @escaping (Shared.KotlinBoolean) -> Swift.Void)
  public func navigate(transformer: @escaping (Any?) -> Any?)
}
extension Shared.StackNavigator {
  public func bringToFront(configuration: Any, onComplete: @escaping () -> Swift.Void)
  public func navigate(transformer: @escaping ([Any]) -> [Any])
  public func pop(onComplete: @escaping (Shared.KotlinBoolean) -> Swift.Void)
  public func popTo(index: Swift.Int32, onComplete: @escaping (Shared.KotlinBoolean) -> Swift.Void)
  public func popWhile(predicate: @escaping (Any) -> Shared.KotlinBoolean)
  public func popWhile(predicate: @escaping (Any) -> Shared.KotlinBoolean, onComplete: @escaping (Shared.KotlinBoolean) -> Swift.Void)
  public func push(configuration: Any, onComplete: @escaping () -> Swift.Void)
  public func pushNew(configuration: Any, onComplete: @escaping (Shared.KotlinBoolean) -> Swift.Void)
  public func replaceAll(configurations: Shared.KotlinArray<Swift.AnyObject>, onComplete: @escaping () -> Swift.Void)
  public func replaceCurrent(configuration: Any, onComplete: @escaping () -> Swift.Void)
}
public var onDecomposeError: (Shared.KotlinException) -> Swift.Void {
  get
  set(value)
}
extension Shared.Skie.KotlinxSerializationCore.StructureKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case cLASS(Shared.Kotlinx_serialization_coreStructureKind.CLASS)
    case lIST(Shared.Kotlinx_serialization_coreStructureKind.LIST)
    case mAP(Shared.Kotlinx_serialization_coreStructureKind.MAP)
    case oBJECT(Shared.Kotlinx_serialization_coreStructureKind.OBJECT)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: Shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : Shared.Kotlinx_serialization_coreStructureKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed? where __Sealed : Shared.Kotlinx_serialization_coreStructureKind
extension Shared.Skie.KotlinxSerializationCore.SerialKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case polymorphicKind(Shared.Kotlinx_serialization_corePolymorphicKind)
    case primitiveKind(Shared.Kotlinx_serialization_corePrimitiveKind)
    case cONTEXTUAL(Shared.Kotlinx_serialization_coreSerialKind.CONTEXTUAL)
    case eNUM(Shared.Kotlinx_serialization_coreSerialKind.ENUM)
    case structureKind(Shared.Kotlinx_serialization_coreStructureKind)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: Shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : Shared.Kotlinx_serialization_coreSerialKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed? where __Sealed : Shared.Kotlinx_serialization_coreSerialKind
extension Shared.Skie.KotlinxSerializationCore.PolymorphicKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case oPEN(Shared.Kotlinx_serialization_corePolymorphicKind.OPEN)
    case sEALED(Shared.Kotlinx_serialization_corePolymorphicKind.SEALED)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : Shared.Kotlinx_serialization_corePolymorphicKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? where __Sealed : Shared.Kotlinx_serialization_corePolymorphicKind
extension Shared.Skie.KotlinxSerializationCore.SerializersModule {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: Shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: Shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : Shared.Kotlinx_serialization_coreSerializersModule
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed? where __Sealed : Shared.Kotlinx_serialization_coreSerializersModule
extension Shared.Skie.KotlinxSerializationCore.PrimitiveKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case bOOLEAN(Shared.Kotlinx_serialization_corePrimitiveKind.BOOLEAN)
    case bYTE(Shared.Kotlinx_serialization_corePrimitiveKind.BYTE)
    case cHAR(Shared.Kotlinx_serialization_corePrimitiveKind.CHAR)
    case dOUBLE(Shared.Kotlinx_serialization_corePrimitiveKind.DOUBLE)
    case fLOAT(Shared.Kotlinx_serialization_corePrimitiveKind.FLOAT)
    case iNT(Shared.Kotlinx_serialization_corePrimitiveKind.INT)
    case lONG(Shared.Kotlinx_serialization_corePrimitiveKind.LONG)
    case sHORT(Shared.Kotlinx_serialization_corePrimitiveKind.SHORT)
    case sTRING(Shared.Kotlinx_serialization_corePrimitiveKind.STRING)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: Shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> Shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : Shared.Kotlinx_serialization_corePrimitiveKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> Shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed? where __Sealed : Shared.Kotlinx_serialization_corePrimitiveKind
@frozen public enum Koin_coreLevel : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case debug
  case info
  case warning
  case error
  case none
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__Koin_coreLevel, result: inout Shared.Koin_coreLevel?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__Koin_coreLevel, result: inout Shared.Koin_coreLevel?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__Koin_coreLevel?) -> Shared.Koin_coreLevel
  public func _bridgeToObjectiveC() -> Shared.__Koin_coreLevel
  public typealias _ObjectiveCType = Shared.__Koin_coreLevel
  public static func == (a: Shared.Koin_coreLevel, b: Shared.Koin_coreLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.Koin_coreLevel]
  public static var allCases: [Shared.Koin_coreLevel] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.Koin_coreLevel {
  public func toKotlinEnum() -> Shared.__Koin_coreLevel
}
extension Shared.__Koin_coreLevel {
  public func toSwiftEnum() -> Shared.Koin_coreLevel
}
@frozen public enum Koin_coreKind : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case singleton
  case factory
  case scoped
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: Shared.__Koin_coreKind, result: inout Shared.Koin_coreKind?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Shared.__Koin_coreKind, result: inout Shared.Koin_coreKind?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Shared.__Koin_coreKind?) -> Shared.Koin_coreKind
  public func _bridgeToObjectiveC() -> Shared.__Koin_coreKind
  public typealias _ObjectiveCType = Shared.__Koin_coreKind
  public static func == (a: Shared.Koin_coreKind, b: Shared.Koin_coreKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Shared.Koin_coreKind]
  public static var allCases: [Shared.Koin_coreKind] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Shared.Koin_coreKind {
  public func toKotlinEnum() -> Shared.__Koin_coreKind
}
extension Shared.__Koin_coreKind {
  public func toSwiftEnum() -> Shared.Koin_coreKind
}
extension Shared.SortOrder : Swift.Sendable {}
extension Shared.RegisterDeviceType : Swift.Sendable {}
extension Shared.__Bridge__AddOrUpdateUserResponseV2_AddUserError : Swift.Sendable {}
extension Shared.DeviceLang : Swift.Sendable {}
extension Shared.__Bridge__CreateResponse_Error : Swift.Sendable {}
extension Shared.RegisterError : Swift.Sendable {}
extension Shared.PermissionError : Swift.Sendable {}
extension Shared.__Bridge__DeviceResponse_Error : Swift.Sendable {}
extension Shared.DeviceType : Swift.Sendable {}
extension Shared.WeekDay : Swift.Sendable {}
extension Shared.TokenError : Swift.Sendable {}
extension Shared.Language : Swift.Sendable {}
extension Shared.DeviceEventType : Swift.Sendable {}
extension Shared.Currency : Swift.Sendable {}
extension Shared.__Bridge__RefreshResponse_Error : Swift.Sendable {}
extension Shared.LifecycleState : Swift.Sendable {}
extension Shared.Wire_runtimeFieldEncoding : Swift.Sendable {}
extension Shared.Wire_runtimeSyntax : Swift.Sendable {}
extension Shared.__Bridge__Back_handlerBackEvent_SwipeEdge : Swift.Sendable {}
extension Shared.KotlinKVariance : Swift.Sendable {}
extension Shared.KotlinLazyThreadSafetyMode : Swift.Sendable {}
extension Shared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed : Swift.Sendable {}
extension Shared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed : Swift.Sendable {}
extension Shared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed : Swift.Sendable {}
extension Shared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed : Swift.Sendable {}
extension Shared.ObserveLifecycleMode : Swift.Sendable {}
extension Shared.ChildNavStateStatus : Swift.Sendable {}
extension Shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
extension Shared.Koin_coreLevel : Swift.Sendable {}
extension Shared.Koin_coreKind : Swift.Sendable {}

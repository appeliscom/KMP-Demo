// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity_service/devices.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Identity_V1_DeviceLang: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case en // = 1
  case sk // = 2
  case cz // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .en
    case 2: self = .sk
    case 3: self = .cz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .en: return 1
    case .sk: return 2
    case .cz: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Identity_V1_DeviceLang: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Identity_V1_DeviceLang] = [
    .unknown,
    .en,
    .sk,
    .cz,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Identity_V1_DeviceType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownDeviceType // = 0
  case androidV5 // = 1
  case iosV5 // = 2
  case webV1 // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownDeviceType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownDeviceType
    case 1: self = .androidV5
    case 2: self = .iosV5
    case 3: self = .webV1
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownDeviceType: return 0
    case .androidV5: return 1
    case .iosV5: return 2
    case .webV1: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Identity_V1_DeviceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Identity_V1_DeviceType] = [
    .unknownDeviceType,
    .androidV5,
    .iosV5,
    .webV1,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Identity_V1_LogoutUsersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userIds: [Int64] = []

  /// Optional. Will be checked to ""
  public var reason: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_GetDeviceByTemporaryIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var temporaryID: String = String()

  public var projectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_DevicesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Dictionary<Int64,Appelis_Identity_V1_MobileDevice> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_GetUsersDevicesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Dictionary<Int64,Appelis_Identity_V1_MobileDevicesArray> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_GetUsersDevicesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var users: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_GetDevicesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idMobileDevice: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_GetDeviceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idMobileDevice: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_DeviceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Identity_V1_DeviceResponse.OneOf_Payload? = nil

  public var error: Appelis_Identity_V1_DeviceResponse.Error {
    get {
      if case .error(let v)? = payload {return v}
      return .unknown
    }
    set {payload = .error(newValue)}
  }

  public var data: Appelis_Identity_V1_MobileDevice {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Identity_V1_MobileDevice()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case error(Appelis_Identity_V1_DeviceResponse.Error)
    case data(Appelis_Identity_V1_MobileDevice)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Identity_V1_DeviceResponse.OneOf_Payload, rhs: Appelis_Identity_V1_DeviceResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum Error: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case notFound // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .notFound
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .notFound: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Appelis_Identity_V1_DeviceResponse.Error: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Identity_V1_DeviceResponse.Error] = [
    .unknown,
    .notFound,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Identity_V1_UpdateDeviceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idMobileDevice: Int64 = 0

  public var data: Appelis_Identity_V1_UpdateDeviceData {
    get {return _data ?? Appelis_Identity_V1_UpdateDeviceData()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  /// Optional. Will be checked to ""
  public var reason: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Appelis_Identity_V1_UpdateDeviceData? = nil
}

public struct Appelis_Identity_V1_UpdateDeviceData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idMobileUser: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _idMobileUser ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_idMobileUser = newValue}
  }
  /// Returns true if `idMobileUser` has been explicitly set.
  public var hasIDMobileUser: Bool {return self._idMobileUser != nil}
  /// Clears the value of `idMobileUser`. Subsequent reads from it will return its default value.
  public mutating func clearIDMobileUser() {self._idMobileUser = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _idMobileUser: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
}

public struct Appelis_Identity_V1_MobileDevicesArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Appelis_Identity_V1_MobileDevice] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Identity_V1_MobileDevice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of device.
  public var idMobileDevice: Int64 = 0

  /// Data have own message without id, to distinct what is primary for device model.
  public var data: Appelis_Identity_V1_DeviceData {
    get {return _data ?? Appelis_Identity_V1_DeviceData()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Appelis_Identity_V1_DeviceData? = nil
}

public struct Appelis_Identity_V1_DeviceData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idCustomer: Int32 = 0

  public var deviceTemporaryID: String = String()

  public var timeCreate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeCreate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeCreate = newValue}
  }
  /// Returns true if `timeCreate` has been explicitly set.
  public var hasTimeCreate: Bool {return self._timeCreate != nil}
  /// Clears the value of `timeCreate`. Subsequent reads from it will return its default value.
  public mutating func clearTimeCreate() {self._timeCreate = nil}

  public var lang: Appelis_Identity_V1_DeviceLang = .unknown

  /// Info about which platform registers device.
  public var deviceType: Appelis_Identity_V1_DeviceType = .unknownDeviceType

  public var idMobileUser: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _idMobileUser ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_idMobileUser = newValue}
  }
  /// Returns true if `idMobileUser` has been explicitly set.
  public var hasIDMobileUser: Bool {return self._idMobileUser != nil}
  /// Clears the value of `idMobileUser`. Subsequent reads from it will return its default value.
  public mutating func clearIDMobileUser() {self._idMobileUser = nil}

  public var notificationToken: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _notificationToken ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_notificationToken = newValue}
  }
  /// Returns true if `notificationToken` has been explicitly set.
  public var hasNotificationToken: Bool {return self._notificationToken != nil}
  /// Clears the value of `notificationToken`. Subsequent reads from it will return its default value.
  public mutating func clearNotificationToken() {self._notificationToken = nil}

  /// There are other fields that are not used...
  public var notificationTokenLastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _notificationTokenLastUpdate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_notificationTokenLastUpdate = newValue}
  }
  /// Returns true if `notificationTokenLastUpdate` has been explicitly set.
  public var hasNotificationTokenLastUpdate: Bool {return self._notificationTokenLastUpdate != nil}
  /// Clears the value of `notificationTokenLastUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearNotificationTokenLastUpdate() {self._notificationTokenLastUpdate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeCreate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _idMobileUser: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _notificationToken: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _notificationTokenLastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Identity_V1_DeviceLang: @unchecked Sendable {}
extension Appelis_Identity_V1_DeviceType: @unchecked Sendable {}
extension Appelis_Identity_V1_LogoutUsersRequest: @unchecked Sendable {}
extension Appelis_Identity_V1_GetDeviceByTemporaryIdRequest: @unchecked Sendable {}
extension Appelis_Identity_V1_DevicesResponse: @unchecked Sendable {}
extension Appelis_Identity_V1_GetUsersDevicesResponse: @unchecked Sendable {}
extension Appelis_Identity_V1_GetUsersDevicesRequest: @unchecked Sendable {}
extension Appelis_Identity_V1_GetDevicesRequest: @unchecked Sendable {}
extension Appelis_Identity_V1_GetDeviceRequest: @unchecked Sendable {}
extension Appelis_Identity_V1_DeviceResponse: @unchecked Sendable {}
extension Appelis_Identity_V1_DeviceResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Identity_V1_DeviceResponse.Error: @unchecked Sendable {}
extension Appelis_Identity_V1_UpdateDeviceRequest: @unchecked Sendable {}
extension Appelis_Identity_V1_UpdateDeviceData: @unchecked Sendable {}
extension Appelis_Identity_V1_MobileDevicesArray: @unchecked Sendable {}
extension Appelis_Identity_V1_MobileDevice: @unchecked Sendable {}
extension Appelis_Identity_V1_DeviceData: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.identity.v1"

extension Appelis_Identity_V1_DeviceLang: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "EN"),
    2: .same(proto: "SK"),
    3: .same(proto: "CZ"),
  ]
}

extension Appelis_Identity_V1_DeviceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_DEVICE_TYPE"),
    1: .same(proto: "ANDROID_V5"),
    2: .same(proto: "IOS_V5"),
    3: .same(proto: "WEB_V1"),
  ]
}

extension Appelis_Identity_V1_LogoutUsersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogoutUsersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userIds"),
    3: .same(proto: "reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.userIds) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.userIds, fieldNumber: 1)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_LogoutUsersRequest, rhs: Appelis_Identity_V1_LogoutUsersRequest) -> Bool {
    if lhs.userIds != rhs.userIds {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_GetDeviceByTemporaryIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDeviceByTemporaryIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "temporaryId"),
    2: .same(proto: "projectId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.temporaryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.temporaryID.isEmpty {
      try visitor.visitSingularStringField(value: self.temporaryID, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_GetDeviceByTemporaryIdRequest, rhs: Appelis_Identity_V1_GetDeviceByTemporaryIdRequest) -> Bool {
    if lhs.temporaryID != rhs.temporaryID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_DevicesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DevicesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Appelis_Identity_V1_MobileDevice>.self, value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Appelis_Identity_V1_MobileDevice>.self, value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_DevicesResponse, rhs: Appelis_Identity_V1_DevicesResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_GetUsersDevicesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUsersDevicesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Appelis_Identity_V1_MobileDevicesArray>.self, value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Appelis_Identity_V1_MobileDevicesArray>.self, value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_GetUsersDevicesResponse, rhs: Appelis_Identity_V1_GetUsersDevicesResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_GetUsersDevicesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUsersDevicesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "users"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.users) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.users.isEmpty {
      try visitor.visitPackedInt64Field(value: self.users, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_GetUsersDevicesRequest, rhs: Appelis_Identity_V1_GetUsersDevicesRequest) -> Bool {
    if lhs.users != rhs.users {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_GetDevicesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDevicesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idMobileDevice"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.idMobileDevice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.idMobileDevice.isEmpty {
      try visitor.visitPackedInt64Field(value: self.idMobileDevice, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_GetDevicesRequest, rhs: Appelis_Identity_V1_GetDevicesRequest) -> Bool {
    if lhs.idMobileDevice != rhs.idMobileDevice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_GetDeviceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDeviceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idMobileDevice"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.idMobileDevice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.idMobileDevice != 0 {
      try visitor.visitSingularInt64Field(value: self.idMobileDevice, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_GetDeviceRequest, rhs: Appelis_Identity_V1_GetDeviceRequest) -> Bool {
    if lhs.idMobileDevice != rhs.idMobileDevice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_DeviceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_V1_DeviceResponse.Error?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .error(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_V1_MobileDevice?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .error?: try {
      guard case .error(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_DeviceResponse, rhs: Appelis_Identity_V1_DeviceResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_DeviceResponse.Error: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "NOT_FOUND"),
  ]
}

extension Appelis_Identity_V1_UpdateDeviceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateDeviceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idMobileDevice"),
    2: .same(proto: "data"),
    3: .same(proto: "reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.idMobileDevice) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.idMobileDevice != 0 {
      try visitor.visitSingularInt64Field(value: self.idMobileDevice, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_UpdateDeviceRequest, rhs: Appelis_Identity_V1_UpdateDeviceRequest) -> Bool {
    if lhs.idMobileDevice != rhs.idMobileDevice {return false}
    if lhs._data != rhs._data {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_UpdateDeviceData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateDeviceData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "idMobileUser"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 10: try { try decoder.decodeSingularMessageField(value: &self._idMobileUser) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._idMobileUser {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_UpdateDeviceData, rhs: Appelis_Identity_V1_UpdateDeviceData) -> Bool {
    if lhs._idMobileUser != rhs._idMobileUser {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_MobileDevicesArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MobileDevicesArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_MobileDevicesArray, rhs: Appelis_Identity_V1_MobileDevicesArray) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_MobileDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MobileDevice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idMobileDevice"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.idMobileDevice) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.idMobileDevice != 0 {
      try visitor.visitSingularInt64Field(value: self.idMobileDevice, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_MobileDevice, rhs: Appelis_Identity_V1_MobileDevice) -> Bool {
    if lhs.idMobileDevice != rhs.idMobileDevice {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_V1_DeviceData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idCustomer"),
    2: .same(proto: "deviceTemporaryId"),
    3: .same(proto: "timeCreate"),
    4: .same(proto: "lang"),
    5: .same(proto: "deviceType"),
    10: .same(proto: "idMobileUser"),
    11: .same(proto: "notificationToken"),
    12: .same(proto: "notificationTokenLastUpdate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.idCustomer) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deviceTemporaryID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timeCreate) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.lang) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.deviceType) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._idMobileUser) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._notificationToken) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._notificationTokenLastUpdate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.idCustomer != 0 {
      try visitor.visitSingularInt32Field(value: self.idCustomer, fieldNumber: 1)
    }
    if !self.deviceTemporaryID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceTemporaryID, fieldNumber: 2)
    }
    try { if let v = self._timeCreate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.lang != .unknown {
      try visitor.visitSingularEnumField(value: self.lang, fieldNumber: 4)
    }
    if self.deviceType != .unknownDeviceType {
      try visitor.visitSingularEnumField(value: self.deviceType, fieldNumber: 5)
    }
    try { if let v = self._idMobileUser {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._notificationToken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._notificationTokenLastUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_V1_DeviceData, rhs: Appelis_Identity_V1_DeviceData) -> Bool {
    if lhs.idCustomer != rhs.idCustomer {return false}
    if lhs.deviceTemporaryID != rhs.deviceTemporaryID {return false}
    if lhs._timeCreate != rhs._timeCreate {return false}
    if lhs.lang != rhs.lang {return false}
    if lhs.deviceType != rhs.deviceType {return false}
    if lhs._idMobileUser != rhs._idMobileUser {return false}
    if lhs._notificationToken != rhs._notificationToken {return false}
    if lhs._notificationTokenLastUpdate != rhs._notificationTokenLastUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

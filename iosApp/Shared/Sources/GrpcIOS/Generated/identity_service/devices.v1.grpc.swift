//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: identity_service/devices.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Private api without tokens and auth logic...
///
/// Usage: instantiate `Appelis_Identity_V1_DeviceAdminClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Identity_V1_DeviceAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol? { get }

  func updateDevice(
    _ request: Appelis_Identity_V1_UpdateDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_UpdateDeviceRequest, Appelis_Identity_V1_DeviceResponse>

  func getDevice(
    _ request: Appelis_Identity_V1_GetDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_GetDeviceRequest, Appelis_Identity_V1_DeviceResponse>

  func getDevices(
    _ request: Appelis_Identity_V1_GetDevicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_GetDevicesRequest, Appelis_Identity_V1_DevicesResponse>

  func getUsersDevices(
    _ request: Appelis_Identity_V1_GetUsersDevicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_GetUsersDevicesRequest, Appelis_Identity_V1_GetUsersDevicesResponse>

  func getProjectDevices(
    _ request: Appelis_Identity_V1_ProjectRequest,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_Identity_V1_DevicesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_V1_ProjectRequest, Appelis_Identity_V1_DevicesResponse>

  func getDeviceByTemporaryId(
    _ request: Appelis_Identity_V1_GetDeviceByTemporaryIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_GetDeviceByTemporaryIdRequest, Appelis_Identity_V1_DeviceResponse>

  func logoutUsers(
    _ request: Appelis_Identity_V1_LogoutUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_LogoutUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Appelis_Identity_V1_DeviceAdminClientProtocol {
  public var serviceName: String {
    return "appelis.identity.v1.DeviceAdmin"
  }

  /// Rpc will be used to logout or login users.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDevice(
    _ request: Appelis_Identity_V1_UpdateDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_UpdateDeviceRequest, Appelis_Identity_V1_DeviceResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.updateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? []
    )
  }

  /// Rpc will be listing device data for server usage
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDevice(
    _ request: Appelis_Identity_V1_GetDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_GetDeviceRequest, Appelis_Identity_V1_DeviceResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceInterceptors() ?? []
    )
  }

  /// Rpc will be listing device data for server usage
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDevices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDevices(
    _ request: Appelis_Identity_V1_GetDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_GetDevicesRequest, Appelis_Identity_V1_DevicesResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDevicesInterceptors() ?? []
    )
  }

  /// Rpc for getting all devices for requested users.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsersDevices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUsersDevices(
    _ request: Appelis_Identity_V1_GetUsersDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_GetUsersDevicesRequest, Appelis_Identity_V1_GetUsersDevicesResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getUsersDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersDevicesInterceptors() ?? []
    )
  }

  /// Rpc will be streaming all devices for project
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProjectDevices.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getProjectDevices(
    _ request: Appelis_Identity_V1_ProjectRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_Identity_V1_DevicesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_V1_ProjectRequest, Appelis_Identity_V1_DevicesResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getProjectDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProjectDevicesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Rpc gets devices for project by temporary id. Used by getting device for token generation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDeviceByTemporaryId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDeviceByTemporaryId(
    _ request: Appelis_Identity_V1_GetDeviceByTemporaryIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_GetDeviceByTemporaryIdRequest, Appelis_Identity_V1_DeviceResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDeviceByTemporaryId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceByTemporaryIdInterceptors() ?? []
    )
  }

  /// Logout users from all their devices
  ///
  /// - Parameters:
  ///   - request: Request to send to LogoutUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logoutUsers(
    _ request: Appelis_Identity_V1_LogoutUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_LogoutUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.logoutUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutUsersInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Identity_V1_DeviceAdminClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Identity_V1_DeviceAdminNIOClient")
public final class Appelis_Identity_V1_DeviceAdminClient: Appelis_Identity_V1_DeviceAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.identity.v1.DeviceAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Identity_V1_DeviceAdminNIOClient: Appelis_Identity_V1_DeviceAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.identity.v1.DeviceAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Private api without tokens and auth logic...
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Identity_V1_DeviceAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol? { get }

  func makeUpdateDeviceCall(
    _ request: Appelis_Identity_V1_UpdateDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_UpdateDeviceRequest, Appelis_Identity_V1_DeviceResponse>

  func makeGetDeviceCall(
    _ request: Appelis_Identity_V1_GetDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDeviceRequest, Appelis_Identity_V1_DeviceResponse>

  func makeGetDevicesCall(
    _ request: Appelis_Identity_V1_GetDevicesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDevicesRequest, Appelis_Identity_V1_DevicesResponse>

  func makeGetUsersDevicesCall(
    _ request: Appelis_Identity_V1_GetUsersDevicesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetUsersDevicesRequest, Appelis_Identity_V1_GetUsersDevicesResponse>

  func makeGetProjectDevicesCall(
    _ request: Appelis_Identity_V1_ProjectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_V1_ProjectRequest, Appelis_Identity_V1_DevicesResponse>

  func makeGetDeviceByTemporaryIDCall(
    _ request: Appelis_Identity_V1_GetDeviceByTemporaryIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDeviceByTemporaryIdRequest, Appelis_Identity_V1_DeviceResponse>

  func makeLogoutUsersCall(
    _ request: Appelis_Identity_V1_LogoutUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_LogoutUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Identity_V1_DeviceAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeUpdateDeviceCall(
    _ request: Appelis_Identity_V1_UpdateDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_UpdateDeviceRequest, Appelis_Identity_V1_DeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.updateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? []
    )
  }

  public func makeGetDeviceCall(
    _ request: Appelis_Identity_V1_GetDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDeviceRequest, Appelis_Identity_V1_DeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceInterceptors() ?? []
    )
  }

  public func makeGetDevicesCall(
    _ request: Appelis_Identity_V1_GetDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDevicesRequest, Appelis_Identity_V1_DevicesResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDevicesInterceptors() ?? []
    )
  }

  public func makeGetUsersDevicesCall(
    _ request: Appelis_Identity_V1_GetUsersDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetUsersDevicesRequest, Appelis_Identity_V1_GetUsersDevicesResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getUsersDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersDevicesInterceptors() ?? []
    )
  }

  public func makeGetProjectDevicesCall(
    _ request: Appelis_Identity_V1_ProjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_V1_ProjectRequest, Appelis_Identity_V1_DevicesResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getProjectDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProjectDevicesInterceptors() ?? []
    )
  }

  public func makeGetDeviceByTemporaryIDCall(
    _ request: Appelis_Identity_V1_GetDeviceByTemporaryIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDeviceByTemporaryIdRequest, Appelis_Identity_V1_DeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDeviceByTemporaryId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceByTemporaryIdInterceptors() ?? []
    )
  }

  public func makeLogoutUsersCall(
    _ request: Appelis_Identity_V1_LogoutUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_LogoutUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.logoutUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutUsersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceAdminAsyncClientProtocol {
  public func updateDevice(
    _ request: Appelis_Identity_V1_UpdateDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_DeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.updateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? []
    )
  }

  public func getDevice(
    _ request: Appelis_Identity_V1_GetDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_DeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceInterceptors() ?? []
    )
  }

  public func getDevices(
    _ request: Appelis_Identity_V1_GetDevicesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_DevicesResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDevicesInterceptors() ?? []
    )
  }

  public func getUsersDevices(
    _ request: Appelis_Identity_V1_GetUsersDevicesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_GetUsersDevicesResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getUsersDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersDevicesInterceptors() ?? []
    )
  }

  public func getProjectDevices(
    _ request: Appelis_Identity_V1_ProjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_Identity_V1_DevicesResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getProjectDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProjectDevicesInterceptors() ?? []
    )
  }

  public func getDeviceByTemporaryId(
    _ request: Appelis_Identity_V1_GetDeviceByTemporaryIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_DeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDeviceByTemporaryId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceByTemporaryIdInterceptors() ?? []
    )
  }

  public func logoutUsers(
    _ request: Appelis_Identity_V1_LogoutUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.logoutUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutUsersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Identity_V1_DeviceAdminAsyncClient: Appelis_Identity_V1_DeviceAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Identity_V1_DeviceAdminClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateDevice'.
  func makeUpdateDeviceInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_UpdateDeviceRequest, Appelis_Identity_V1_DeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'getDevice'.
  func makeGetDeviceInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_GetDeviceRequest, Appelis_Identity_V1_DeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'getDevices'.
  func makeGetDevicesInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_GetDevicesRequest, Appelis_Identity_V1_DevicesResponse>]

  /// - Returns: Interceptors to use when invoking 'getUsersDevices'.
  func makeGetUsersDevicesInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_GetUsersDevicesRequest, Appelis_Identity_V1_GetUsersDevicesResponse>]

  /// - Returns: Interceptors to use when invoking 'getProjectDevices'.
  func makeGetProjectDevicesInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_ProjectRequest, Appelis_Identity_V1_DevicesResponse>]

  /// - Returns: Interceptors to use when invoking 'getDeviceByTemporaryId'.
  func makeGetDeviceByTemporaryIdInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_GetDeviceByTemporaryIdRequest, Appelis_Identity_V1_DeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'logoutUsers'.
  func makeLogoutUsersInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_LogoutUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Appelis_Identity_V1_DeviceAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DeviceAdmin",
    fullName: "appelis.identity.v1.DeviceAdmin",
    methods: [
      Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.updateDevice,
      Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevice,
      Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDevices,
      Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getUsersDevices,
      Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getProjectDevices,
      Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.getDeviceByTemporaryId,
      Appelis_Identity_V1_DeviceAdminClientMetadata.Methods.logoutUsers,
    ]
  )

  public enum Methods {
    public static let updateDevice = GRPCMethodDescriptor(
      name: "UpdateDevice",
      path: "/appelis.identity.v1.DeviceAdmin/UpdateDevice",
      type: GRPCCallType.unary
    )

    public static let getDevice = GRPCMethodDescriptor(
      name: "GetDevice",
      path: "/appelis.identity.v1.DeviceAdmin/GetDevice",
      type: GRPCCallType.unary
    )

    public static let getDevices = GRPCMethodDescriptor(
      name: "GetDevices",
      path: "/appelis.identity.v1.DeviceAdmin/GetDevices",
      type: GRPCCallType.unary
    )

    public static let getUsersDevices = GRPCMethodDescriptor(
      name: "GetUsersDevices",
      path: "/appelis.identity.v1.DeviceAdmin/GetUsersDevices",
      type: GRPCCallType.unary
    )

    public static let getProjectDevices = GRPCMethodDescriptor(
      name: "GetProjectDevices",
      path: "/appelis.identity.v1.DeviceAdmin/GetProjectDevices",
      type: GRPCCallType.serverStreaming
    )

    public static let getDeviceByTemporaryId = GRPCMethodDescriptor(
      name: "GetDeviceByTemporaryId",
      path: "/appelis.identity.v1.DeviceAdmin/GetDeviceByTemporaryId",
      type: GRPCCallType.unary
    )

    public static let logoutUsers = GRPCMethodDescriptor(
      name: "LogoutUsers",
      path: "/appelis.identity.v1.DeviceAdmin/LogoutUsers",
      type: GRPCCallType.unary
    )
  }
}


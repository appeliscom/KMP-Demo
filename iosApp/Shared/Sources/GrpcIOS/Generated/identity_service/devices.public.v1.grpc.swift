//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: identity_service/devices.public.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_Identity_V1_DeviceServiceClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Identity_V1_DeviceServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol? { get }

  func updateTokenDevice(
    _ request: Appelis_Identity_V1_UpdateTokenDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_UpdateTokenDeviceRequest, Appelis_Identity_V1_UpdateTokenDeviceResponse>

  func getTokenDevice(
    _ request: Appelis_Identity_V1_GetTokenDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_GetTokenDeviceRequest, Appelis_Identity_V1_GetTokenDeviceResponse>

  func logoutUser(
    _ request: Appelis_Identity_V1_LogoutUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_LogoutUserRequest, Appelis_Identity_V1_LogoutUserResponse>
}

extension Appelis_Identity_V1_DeviceServiceClientProtocol {
  public var serviceName: String {
    return "appelis.identity.v1.DeviceService"
  }

  /// RPC updates data on device claimed by token. Updated are only lang and notification token.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateTokenDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateTokenDevice(
    _ request: Appelis_Identity_V1_UpdateTokenDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_UpdateTokenDeviceRequest, Appelis_Identity_V1_UpdateTokenDeviceResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.updateTokenDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTokenDeviceInterceptors() ?? []
    )
  }

  /// Unary call to GetTokenDevice
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenDevice(
    _ request: Appelis_Identity_V1_GetTokenDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_GetTokenDeviceRequest, Appelis_Identity_V1_GetTokenDeviceResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.getTokenDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenDeviceInterceptors() ?? []
    )
  }

  /// Rpc sets idMobileUser on device to null. Device is picked from token claims.
  ///
  /// - Parameters:
  ///   - request: Request to send to LogoutUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logoutUser(
    _ request: Appelis_Identity_V1_LogoutUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_LogoutUserRequest, Appelis_Identity_V1_LogoutUserResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.logoutUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutUserInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Identity_V1_DeviceServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Identity_V1_DeviceServiceNIOClient")
public final class Appelis_Identity_V1_DeviceServiceClient: Appelis_Identity_V1_DeviceServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.identity.v1.DeviceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Identity_V1_DeviceServiceNIOClient: Appelis_Identity_V1_DeviceServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.identity.v1.DeviceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Identity_V1_DeviceServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol? { get }

  func makeUpdateTokenDeviceCall(
    _ request: Appelis_Identity_V1_UpdateTokenDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_UpdateTokenDeviceRequest, Appelis_Identity_V1_UpdateTokenDeviceResponse>

  func makeGetTokenDeviceCall(
    _ request: Appelis_Identity_V1_GetTokenDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetTokenDeviceRequest, Appelis_Identity_V1_GetTokenDeviceResponse>

  func makeLogoutUserCall(
    _ request: Appelis_Identity_V1_LogoutUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_LogoutUserRequest, Appelis_Identity_V1_LogoutUserResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Identity_V1_DeviceServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeUpdateTokenDeviceCall(
    _ request: Appelis_Identity_V1_UpdateTokenDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_UpdateTokenDeviceRequest, Appelis_Identity_V1_UpdateTokenDeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.updateTokenDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTokenDeviceInterceptors() ?? []
    )
  }

  public func makeGetTokenDeviceCall(
    _ request: Appelis_Identity_V1_GetTokenDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetTokenDeviceRequest, Appelis_Identity_V1_GetTokenDeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.getTokenDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenDeviceInterceptors() ?? []
    )
  }

  public func makeLogoutUserCall(
    _ request: Appelis_Identity_V1_LogoutUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_LogoutUserRequest, Appelis_Identity_V1_LogoutUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.logoutUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceServiceAsyncClientProtocol {
  public func updateTokenDevice(
    _ request: Appelis_Identity_V1_UpdateTokenDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_UpdateTokenDeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.updateTokenDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTokenDeviceInterceptors() ?? []
    )
  }

  public func getTokenDevice(
    _ request: Appelis_Identity_V1_GetTokenDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_GetTokenDeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.getTokenDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenDeviceInterceptors() ?? []
    )
  }

  public func logoutUser(
    _ request: Appelis_Identity_V1_LogoutUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_LogoutUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.logoutUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Identity_V1_DeviceServiceAsyncClient: Appelis_Identity_V1_DeviceServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Identity_V1_DeviceServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateTokenDevice'.
  func makeUpdateTokenDeviceInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_UpdateTokenDeviceRequest, Appelis_Identity_V1_UpdateTokenDeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'getTokenDevice'.
  func makeGetTokenDeviceInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_GetTokenDeviceRequest, Appelis_Identity_V1_GetTokenDeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'logoutUser'.
  func makeLogoutUserInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_LogoutUserRequest, Appelis_Identity_V1_LogoutUserResponse>]
}

public enum Appelis_Identity_V1_DeviceServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DeviceService",
    fullName: "appelis.identity.v1.DeviceService",
    methods: [
      Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.updateTokenDevice,
      Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.getTokenDevice,
      Appelis_Identity_V1_DeviceServiceClientMetadata.Methods.logoutUser,
    ]
  )

  public enum Methods {
    public static let updateTokenDevice = GRPCMethodDescriptor(
      name: "UpdateTokenDevice",
      path: "/appelis.identity.v1.DeviceService/UpdateTokenDevice",
      type: GRPCCallType.unary
    )

    public static let getTokenDevice = GRPCMethodDescriptor(
      name: "GetTokenDevice",
      path: "/appelis.identity.v1.DeviceService/GetTokenDevice",
      type: GRPCCallType.unary
    )

    public static let logoutUser = GRPCMethodDescriptor(
      name: "LogoutUser",
      path: "/appelis.identity.v1.DeviceService/LogoutUser",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Appelis_Identity_V1_DeviceRegistrationClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Identity_V1_DeviceRegistrationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol? { get }

  func registerDevice(
    _ request: Appelis_Identity_V1_RegisterDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_RegisterDeviceRequest, Appelis_Identity_V1_RegisterDeviceResponse>
}

extension Appelis_Identity_V1_DeviceRegistrationClientProtocol {
  public var serviceName: String {
    return "appelis.identity.v1.DeviceRegistration"
  }

  /// TODO resolve public mutation rpc that is not throttled and can potentially create unlimited count of devices...
  /// Registers new device to the system. Unique id is some kind of generated identifier for device.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerDevice(
    _ request: Appelis_Identity_V1_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_RegisterDeviceRequest, Appelis_Identity_V1_RegisterDeviceResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceRegistrationClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Identity_V1_DeviceRegistrationClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Identity_V1_DeviceRegistrationNIOClient")
public final class Appelis_Identity_V1_DeviceRegistrationClient: Appelis_Identity_V1_DeviceRegistrationClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.identity.v1.DeviceRegistration service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Identity_V1_DeviceRegistrationNIOClient: Appelis_Identity_V1_DeviceRegistrationClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.identity.v1.DeviceRegistration service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Identity_V1_DeviceRegistrationAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol? { get }

  func makeRegisterDeviceCall(
    _ request: Appelis_Identity_V1_RegisterDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_RegisterDeviceRequest, Appelis_Identity_V1_RegisterDeviceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceRegistrationAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Identity_V1_DeviceRegistrationClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeRegisterDeviceCall(
    _ request: Appelis_Identity_V1_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_RegisterDeviceRequest, Appelis_Identity_V1_RegisterDeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceRegistrationClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceRegistrationAsyncClientProtocol {
  public func registerDevice(
    _ request: Appelis_Identity_V1_RegisterDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_RegisterDeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceRegistrationClientMetadata.Methods.registerDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Identity_V1_DeviceRegistrationAsyncClient: Appelis_Identity_V1_DeviceRegistrationAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Identity_V1_DeviceRegistrationClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerDevice'.
  func makeRegisterDeviceInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_RegisterDeviceRequest, Appelis_Identity_V1_RegisterDeviceResponse>]
}

public enum Appelis_Identity_V1_DeviceRegistrationClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DeviceRegistration",
    fullName: "appelis.identity.v1.DeviceRegistration",
    methods: [
      Appelis_Identity_V1_DeviceRegistrationClientMetadata.Methods.registerDevice,
    ]
  )

  public enum Methods {
    public static let registerDevice = GRPCMethodDescriptor(
      name: "RegisterDevice",
      path: "/appelis.identity.v1.DeviceRegistration/RegisterDevice",
      type: GRPCCallType.unary
    )
  }
}


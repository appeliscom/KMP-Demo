//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: identity_service/deviceEvents.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_Identity_V1_DeviceEventsClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Identity_V1_DeviceEventsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol? { get }

  func getDeviceEvents(
    _ request: Appelis_Identity_V1_GetDeviceEventsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_V1_GetDeviceEventsRequest, Appelis_Identity_V1_GetDeviceEventsResponse>
}

extension Appelis_Identity_V1_DeviceEventsClientProtocol {
  public var serviceName: String {
    return "appelis.identity.v1.DeviceEvents"
  }

  /// Unary call to GetDeviceEvents
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDeviceEvents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDeviceEvents(
    _ request: Appelis_Identity_V1_GetDeviceEventsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_V1_GetDeviceEventsRequest, Appelis_Identity_V1_GetDeviceEventsResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_V1_DeviceEventsClientMetadata.Methods.getDeviceEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceEventsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Identity_V1_DeviceEventsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Identity_V1_DeviceEventsNIOClient")
public final class Appelis_Identity_V1_DeviceEventsClient: Appelis_Identity_V1_DeviceEventsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.identity.v1.DeviceEvents service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Identity_V1_DeviceEventsNIOClient: Appelis_Identity_V1_DeviceEventsClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.identity.v1.DeviceEvents service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Identity_V1_DeviceEventsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol? { get }

  func makeGetDeviceEventsCall(
    _ request: Appelis_Identity_V1_GetDeviceEventsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDeviceEventsRequest, Appelis_Identity_V1_GetDeviceEventsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceEventsAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Identity_V1_DeviceEventsClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetDeviceEventsCall(
    _ request: Appelis_Identity_V1_GetDeviceEventsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_V1_GetDeviceEventsRequest, Appelis_Identity_V1_GetDeviceEventsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceEventsClientMetadata.Methods.getDeviceEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_V1_DeviceEventsAsyncClientProtocol {
  public func getDeviceEvents(
    _ request: Appelis_Identity_V1_GetDeviceEventsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_V1_GetDeviceEventsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_V1_DeviceEventsClientMetadata.Methods.getDeviceEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeviceEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Identity_V1_DeviceEventsAsyncClient: Appelis_Identity_V1_DeviceEventsAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Identity_V1_DeviceEventsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getDeviceEvents'.
  func makeGetDeviceEventsInterceptors() -> [ClientInterceptor<Appelis_Identity_V1_GetDeviceEventsRequest, Appelis_Identity_V1_GetDeviceEventsResponse>]
}

public enum Appelis_Identity_V1_DeviceEventsClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DeviceEvents",
    fullName: "appelis.identity.v1.DeviceEvents",
    methods: [
      Appelis_Identity_V1_DeviceEventsClientMetadata.Methods.getDeviceEvents,
    ]
  )

  public enum Methods {
    public static let getDeviceEvents = GRPCMethodDescriptor(
      name: "GetDeviceEvents",
      path: "/appelis.identity.v1.DeviceEvents/GetDeviceEvents",
      type: GRPCCallType.unary
    )
  }
}


// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity_service/webUsersService.v2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_Identity_WebUser_V2_AddOrUpdateUserRequestV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User to be updated or added.
  public var user: Appelis_Identity_WebUser_V1_WebUser {
    get {return _user ?? Appelis_Identity_WebUser_V1_WebUser()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {self._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _user: Appelis_Identity_WebUser_V1_WebUser? = nil
}

public struct Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.OneOf_Payload? = nil

  public var user: Appelis_Identity_WebUser_V1_WebUser {
    get {
      if case .user(let v)? = payload {return v}
      return Appelis_Identity_WebUser_V1_WebUser()
    }
    set {payload = .user(newValue)}
  }

  public var error: Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.AddUserError {
    get {
      if case .error(let v)? = payload {return v}
      return .unknownAddUserError
    }
    set {payload = .error(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case user(Appelis_Identity_WebUser_V1_WebUser)
    case error(Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.AddUserError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.OneOf_Payload, rhs: Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.user, .user): return {
        guard case .user(let l) = lhs, case .user(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum AddUserError: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknownAddUserError // = 0
    case duplicatedEmail // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknownAddUserError
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownAddUserError
      case 1: self = .duplicatedEmail
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownAddUserError: return 0
      case .duplicatedEmail: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.AddUserError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.AddUserError] = [
    .unknownAddUserError,
    .duplicatedEmail,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Identity_WebUser_V2_AddOrUpdateUserRequestV2: @unchecked Sendable {}
extension Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2: @unchecked Sendable {}
extension Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.AddUserError: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.identity.webUser.v2"

extension Appelis_Identity_WebUser_V2_AddOrUpdateUserRequestV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddOrUpdateUserRequestV2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_WebUser_V2_AddOrUpdateUserRequestV2, rhs: Appelis_Identity_WebUser_V2_AddOrUpdateUserRequestV2) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddOrUpdateUserResponseV2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_WebUser_V1_WebUser?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .user(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .user(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.AddUserError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .error(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .user?: try {
      guard case .user(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2, rhs: Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Identity_WebUser_V2_AddOrUpdateUserResponseV2.AddUserError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_ADD_USER_ERROR"),
    1: .same(proto: "DUPLICATED_EMAIL"),
  ]
}

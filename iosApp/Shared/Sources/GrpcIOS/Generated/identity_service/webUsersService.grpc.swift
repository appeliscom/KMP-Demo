//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: identity_service/webUsersService.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_Identity_WebUser_V1_WebUsersServiceClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Identity_WebUser_V1_WebUsersServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol? { get }

  func getTokenUser(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Identity_WebUser_V1_GetTokenUserResponse>
}

extension Appelis_Identity_WebUser_V1_WebUsersServiceClientProtocol {
  public var serviceName: String {
    return "appelis.identity.webUser.v1.WebUsersService"
  }

  /// Unary call to GetTokenUser
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenUser(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Identity_WebUser_V1_GetTokenUserResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersServiceClientMetadata.Methods.getTokenUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Identity_WebUser_V1_WebUsersServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Identity_WebUser_V1_WebUsersServiceNIOClient")
public final class Appelis_Identity_WebUser_V1_WebUsersServiceClient: Appelis_Identity_WebUser_V1_WebUsersServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.identity.webUser.v1.WebUsersService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Identity_WebUser_V1_WebUsersServiceNIOClient: Appelis_Identity_WebUser_V1_WebUsersServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.identity.webUser.v1.WebUsersService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Identity_WebUser_V1_WebUsersServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol? { get }

  func makeGetTokenUserCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Identity_WebUser_V1_GetTokenUserResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_WebUser_V1_WebUsersServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Identity_WebUser_V1_WebUsersServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetTokenUserCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Identity_WebUser_V1_GetTokenUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersServiceClientMetadata.Methods.getTokenUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_WebUser_V1_WebUsersServiceAsyncClientProtocol {
  public func getTokenUser(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_WebUser_V1_GetTokenUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersServiceClientMetadata.Methods.getTokenUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Identity_WebUser_V1_WebUsersServiceAsyncClient: Appelis_Identity_WebUser_V1_WebUsersServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Identity_WebUser_V1_WebUsersServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getTokenUser'.
  func makeGetTokenUserInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_Identity_WebUser_V1_GetTokenUserResponse>]
}

public enum Appelis_Identity_WebUser_V1_WebUsersServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WebUsersService",
    fullName: "appelis.identity.webUser.v1.WebUsersService",
    methods: [
      Appelis_Identity_WebUser_V1_WebUsersServiceClientMetadata.Methods.getTokenUser,
    ]
  )

  public enum Methods {
    public static let getTokenUser = GRPCMethodDescriptor(
      name: "GetTokenUser",
      path: "/appelis.identity.webUser.v1.WebUsersService/GetTokenUser",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol? { get }

  func getUsers(
    _ request: Appelis_Identity_WebUser_V1_GetUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_GetUsersRequest, Appelis_Identity_WebUser_V1_GetUsersResponse>

  func getUserForLoginToken(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest, Appelis_Identity_WebUser_V1_UserResponse>

  func getUserForLogin(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginRequest, Appelis_Identity_WebUser_V1_UserResponse>

  func deleteUsers(
    _ request: Appelis_Identity_WebUser_V1_DeleteUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_DeleteUserRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func addOrUpdateUser(
    _ request: Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest, Appelis_Identity_WebUser_V1_UserResponse>
}

extension Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientProtocol {
  public var serviceName: String {
    return "appelis.identity.webUser.v1.WebUsersPrivateService"
  }

  /// Unary call to GetUsers
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUsers(
    _ request: Appelis_Identity_WebUser_V1_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_GetUsersRequest, Appelis_Identity_WebUser_V1_GetUsersResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  /// Gets WebUser for loginToken used in jobs on background services.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserForLoginToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUserForLoginToken(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest, Appelis_Identity_WebUser_V1_UserResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLoginToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserForLoginTokenInterceptors() ?? []
    )
  }

  /// Gets WebUser for email/login field.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserForLogin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUserForLogin(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginRequest, Appelis_Identity_WebUser_V1_UserResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserForLoginInterceptors() ?? []
    )
  }

  /// Deletes more users from database.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteUsers(
    _ request: Appelis_Identity_WebUser_V1_DeleteUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_DeleteUserRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.deleteUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersInterceptors() ?? []
    )
  }

  /// Add or update user in database. If is will be 0 new user will be added.
  /// Rpc will respect unique login field across all users.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddOrUpdateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addOrUpdateUser(
    _ request: Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest, Appelis_Identity_WebUser_V1_UserResponse> {
    return self.makeUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.addOrUpdateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddOrUpdateUserInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Identity_WebUser_V1_WebUsersPrivateServiceNIOClient")
public final class Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClient: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.identity.webUser.v1.WebUsersPrivateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Identity_WebUser_V1_WebUsersPrivateServiceNIOClient: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.identity.webUser.v1.WebUsersPrivateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Identity_WebUser_V1_WebUsersPrivateServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol? { get }

  func makeGetUsersCall(
    _ request: Appelis_Identity_WebUser_V1_GetUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_GetUsersRequest, Appelis_Identity_WebUser_V1_GetUsersResponse>

  func makeGetUserForLoginTokenCall(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest, Appelis_Identity_WebUser_V1_UserResponse>

  func makeGetUserForLoginCall(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginRequest, Appelis_Identity_WebUser_V1_UserResponse>

  func makeDeleteUsersCall(
    _ request: Appelis_Identity_WebUser_V1_DeleteUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_DeleteUserRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeAddOrUpdateUserCall(
    _ request: Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest, Appelis_Identity_WebUser_V1_UserResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_WebUser_V1_WebUsersPrivateServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetUsersCall(
    _ request: Appelis_Identity_WebUser_V1_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_GetUsersRequest, Appelis_Identity_WebUser_V1_GetUsersResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  public func makeGetUserForLoginTokenCall(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest, Appelis_Identity_WebUser_V1_UserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLoginToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserForLoginTokenInterceptors() ?? []
    )
  }

  public func makeGetUserForLoginCall(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_GetUserForLoginRequest, Appelis_Identity_WebUser_V1_UserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserForLoginInterceptors() ?? []
    )
  }

  public func makeDeleteUsersCall(
    _ request: Appelis_Identity_WebUser_V1_DeleteUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_DeleteUserRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.deleteUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersInterceptors() ?? []
    )
  }

  public func makeAddOrUpdateUserCall(
    _ request: Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest, Appelis_Identity_WebUser_V1_UserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.addOrUpdateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddOrUpdateUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Identity_WebUser_V1_WebUsersPrivateServiceAsyncClientProtocol {
  public func getUsers(
    _ request: Appelis_Identity_WebUser_V1_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_WebUser_V1_GetUsersResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  public func getUserForLoginToken(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_WebUser_V1_UserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLoginToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserForLoginTokenInterceptors() ?? []
    )
  }

  public func getUserForLogin(
    _ request: Appelis_Identity_WebUser_V1_GetUserForLoginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_WebUser_V1_UserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserForLoginInterceptors() ?? []
    )
  }

  public func deleteUsers(
    _ request: Appelis_Identity_WebUser_V1_DeleteUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.deleteUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersInterceptors() ?? []
    )
  }

  public func addOrUpdateUser(
    _ request: Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Identity_WebUser_V1_UserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.addOrUpdateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddOrUpdateUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Identity_WebUser_V1_WebUsersPrivateServiceAsyncClient: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getUsers'.
  func makeGetUsersInterceptors() -> [ClientInterceptor<Appelis_Identity_WebUser_V1_GetUsersRequest, Appelis_Identity_WebUser_V1_GetUsersResponse>]

  /// - Returns: Interceptors to use when invoking 'getUserForLoginToken'.
  func makeGetUserForLoginTokenInterceptors() -> [ClientInterceptor<Appelis_Identity_WebUser_V1_GetUserForLoginTokenRequest, Appelis_Identity_WebUser_V1_UserResponse>]

  /// - Returns: Interceptors to use when invoking 'getUserForLogin'.
  func makeGetUserForLoginInterceptors() -> [ClientInterceptor<Appelis_Identity_WebUser_V1_GetUserForLoginRequest, Appelis_Identity_WebUser_V1_UserResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteUsers'.
  func makeDeleteUsersInterceptors() -> [ClientInterceptor<Appelis_Identity_WebUser_V1_DeleteUserRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'addOrUpdateUser'.
  func makeAddOrUpdateUserInterceptors() -> [ClientInterceptor<Appelis_Identity_WebUser_V1_AddOrUpdateUserRequest, Appelis_Identity_WebUser_V1_UserResponse>]
}

public enum Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WebUsersPrivateService",
    fullName: "appelis.identity.webUser.v1.WebUsersPrivateService",
    methods: [
      Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUsers,
      Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLoginToken,
      Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.getUserForLogin,
      Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.deleteUsers,
      Appelis_Identity_WebUser_V1_WebUsersPrivateServiceClientMetadata.Methods.addOrUpdateUser,
    ]
  )

  public enum Methods {
    public static let getUsers = GRPCMethodDescriptor(
      name: "GetUsers",
      path: "/appelis.identity.webUser.v1.WebUsersPrivateService/GetUsers",
      type: GRPCCallType.unary
    )

    public static let getUserForLoginToken = GRPCMethodDescriptor(
      name: "GetUserForLoginToken",
      path: "/appelis.identity.webUser.v1.WebUsersPrivateService/GetUserForLoginToken",
      type: GRPCCallType.unary
    )

    public static let getUserForLogin = GRPCMethodDescriptor(
      name: "GetUserForLogin",
      path: "/appelis.identity.webUser.v1.WebUsersPrivateService/GetUserForLogin",
      type: GRPCCallType.unary
    )

    public static let deleteUsers = GRPCMethodDescriptor(
      name: "DeleteUsers",
      path: "/appelis.identity.webUser.v1.WebUsersPrivateService/DeleteUsers",
      type: GRPCCallType.unary
    )

    public static let addOrUpdateUser = GRPCMethodDescriptor(
      name: "AddOrUpdateUser",
      path: "/appelis.identity.webUser.v1.WebUsersPrivateService/AddOrUpdateUser",
      type: GRPCCallType.unary
    )
  }
}


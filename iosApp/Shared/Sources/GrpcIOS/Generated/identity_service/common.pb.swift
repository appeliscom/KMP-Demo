// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity_service/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Identity_Common_V1_TokenError: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownTokenError // = 0
  case invalidToken // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownTokenError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownTokenError
    case 1: self = .invalidToken
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownTokenError: return 0
    case .invalidToken: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Identity_Common_V1_TokenError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Identity_Common_V1_TokenError] = [
    .unknownTokenError,
    .invalidToken,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Identity_Common_V1_PermissionError: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownPermissionError // = 0
  case unauthorized // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownPermissionError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownPermissionError
    case 1: self = .unauthorized
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownPermissionError: return 0
    case .unauthorized: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Identity_Common_V1_PermissionError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Identity_Common_V1_PermissionError] = [
    .unknownPermissionError,
    .unauthorized,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Identity_Common_V1_Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Identity_Common_V1_TokenError: @unchecked Sendable {}
extension Appelis_Identity_Common_V1_PermissionError: @unchecked Sendable {}
extension Appelis_Identity_Common_V1_Token: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.identity.common.v1"

extension Appelis_Identity_Common_V1_TokenError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_TOKEN_ERROR"),
    1: .same(proto: "INVALID_TOKEN"),
  ]
}

extension Appelis_Identity_Common_V1_PermissionError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_PERMISSION_ERROR"),
    1: .same(proto: "UNAUTHORIZED"),
  ]
}

extension Appelis_Identity_Common_V1_Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Token"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Identity_Common_V1_Token, rhs: Appelis_Identity_Common_V1_Token) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

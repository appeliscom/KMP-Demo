// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: article_service/article.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Articles_V1_PriceType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case standard // = 1
  case action // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .standard
    case 2: self = .action
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .standard: return 1
    case .action: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Articles_V1_PriceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Articles_V1_PriceType] = [
    .unspecified,
    .standard,
    .action,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Articles_V1_MediaDataType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case video // = 1
  case picture // = 2
  case youtubeVideo // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .video
    case 2: self = .picture
    case 3: self = .youtubeVideo
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .video: return 1
    case .picture: return 2
    case .youtubeVideo: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Articles_V1_MediaDataType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Articles_V1_MediaDataType] = [
    .unspecified,
    .video,
    .picture,
    .youtubeVideo,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Articles_V1_AttributeValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idAttributeValue: Int64 = 0

  public var idAttribute: Int64 = 0

  public var value: String = String()

  public var color: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _color ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {self._color = nil}

  public var icon: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _icon ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  public var hasIcon: Bool {return self._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  public mutating func clearIcon() {self._icon = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _color: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _icon: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Appelis_Articles_V1_Price {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var priceType: Appelis_Articles_V1_PriceType = .unspecified

  /// Price for one piece of Article
  public var unitTax: Double = 0

  public var unit: Double = 0

  /// Makro unit
  public var munitTax: Double = 0

  public var munit: Double = 0

  /// Price of pack
  public var packTax: Double = 0

  public var pack: Double = 0

  /// validity of price
  public var validityFrom: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validityFrom ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validityFrom = newValue}
  }
  /// Returns true if `validityFrom` has been explicitly set.
  public var hasValidityFrom: Bool {return self._validityFrom != nil}
  /// Clears the value of `validityFrom`. Subsequent reads from it will return its default value.
  public mutating func clearValidityFrom() {self._validityFrom = nil}

  public var validityTo: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validityTo ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validityTo = newValue}
  }
  /// Returns true if `validityTo` has been explicitly set.
  public var hasValidityTo: Bool {return self._validityTo != nil}
  /// Clears the value of `validityTo`. Subsequent reads from it will return its default value.
  public mutating func clearValidityTo() {self._validityTo = nil}

  public var idBusiness: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _validityFrom: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validityTo: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Appelis_Articles_V1_Media {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orderIndex: UInt32 = 0

  public var type: Appelis_Articles_V1_MediaDataType = .unspecified

  public var url: String = String()

  public var height: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _height ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  public var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  public mutating func clearHeight() {self._height = nil}

  public var width: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _width ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  public var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  public mutating func clearWidth() {self._width = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _height: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _width: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Articles_V1_PriceType: @unchecked Sendable {}
extension Appelis_Articles_V1_MediaDataType: @unchecked Sendable {}
extension Appelis_Articles_V1_AttributeValue: @unchecked Sendable {}
extension Appelis_Articles_V1_Price: @unchecked Sendable {}
extension Appelis_Articles_V1_Media: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.articles.v1"

extension Appelis_Articles_V1_PriceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRICE_TYPE_UNSPECIFIED"),
    1: .same(proto: "STANDARD"),
    2: .same(proto: "ACTION"),
  ]
}

extension Appelis_Articles_V1_MediaDataType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MEDIA_DATA_TYPE_UNSPECIFIED"),
    1: .same(proto: "VIDEO"),
    2: .same(proto: "PICTURE"),
    3: .same(proto: "YOUTUBE_VIDEO"),
  ]
}

extension Appelis_Articles_V1_AttributeValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AttributeValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idAttributeValue"),
    2: .same(proto: "idAttribute"),
    3: .same(proto: "value"),
    4: .same(proto: "color"),
    5: .same(proto: "icon"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.idAttributeValue) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.idAttribute) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._icon) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.idAttributeValue != 0 {
      try visitor.visitSingularInt64Field(value: self.idAttributeValue, fieldNumber: 1)
    }
    if self.idAttribute != 0 {
      try visitor.visitSingularInt64Field(value: self.idAttribute, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try { if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._icon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Articles_V1_AttributeValue, rhs: Appelis_Articles_V1_AttributeValue) -> Bool {
    if lhs.idAttributeValue != rhs.idAttributeValue {return false}
    if lhs.idAttribute != rhs.idAttribute {return false}
    if lhs.value != rhs.value {return false}
    if lhs._color != rhs._color {return false}
    if lhs._icon != rhs._icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Articles_V1_Price: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Price"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "priceType"),
    2: .same(proto: "unitTax"),
    3: .same(proto: "unit"),
    4: .same(proto: "munitTax"),
    5: .same(proto: "munit"),
    6: .same(proto: "packTax"),
    7: .same(proto: "pack"),
    8: .same(proto: "validityFrom"),
    9: .same(proto: "validityTo"),
    10: .same(proto: "idBusiness"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.priceType) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.unitTax) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.unit) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.munitTax) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.munit) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.packTax) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.pack) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._validityFrom) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._validityTo) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.idBusiness) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.priceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.priceType, fieldNumber: 1)
    }
    if self.unitTax != 0 {
      try visitor.visitSingularDoubleField(value: self.unitTax, fieldNumber: 2)
    }
    if self.unit != 0 {
      try visitor.visitSingularDoubleField(value: self.unit, fieldNumber: 3)
    }
    if self.munitTax != 0 {
      try visitor.visitSingularDoubleField(value: self.munitTax, fieldNumber: 4)
    }
    if self.munit != 0 {
      try visitor.visitSingularDoubleField(value: self.munit, fieldNumber: 5)
    }
    if self.packTax != 0 {
      try visitor.visitSingularDoubleField(value: self.packTax, fieldNumber: 6)
    }
    if self.pack != 0 {
      try visitor.visitSingularDoubleField(value: self.pack, fieldNumber: 7)
    }
    try { if let v = self._validityFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._validityTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.idBusiness.isEmpty {
      try visitor.visitSingularStringField(value: self.idBusiness, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Articles_V1_Price, rhs: Appelis_Articles_V1_Price) -> Bool {
    if lhs.priceType != rhs.priceType {return false}
    if lhs.unitTax != rhs.unitTax {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.munitTax != rhs.munitTax {return false}
    if lhs.munit != rhs.munit {return false}
    if lhs.packTax != rhs.packTax {return false}
    if lhs.pack != rhs.pack {return false}
    if lhs._validityFrom != rhs._validityFrom {return false}
    if lhs._validityTo != rhs._validityTo {return false}
    if lhs.idBusiness != rhs.idBusiness {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Articles_V1_Media: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Media"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderIndex"),
    2: .same(proto: "type"),
    3: .same(proto: "url"),
    4: .same(proto: "height"),
    5: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.orderIndex) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._height) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._width) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.orderIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.orderIndex, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    try { if let v = self._height {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._width {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Articles_V1_Media, rhs: Appelis_Articles_V1_Media) -> Bool {
    if lhs.orderIndex != rhs.orderIndex {return false}
    if lhs.type != rhs.type {return false}
    if lhs.url != rhs.url {return false}
    if lhs._height != rhs._height {return false}
    if lhs._width != rhs._width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

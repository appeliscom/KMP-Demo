//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: business_service/business.client.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service used by client devices.
///
/// Usage: instantiate `Appelis_Business_V1_BusinessCatalogClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Business_V1_BusinessCatalogClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol? { get }

  func getBusinessByID(
    _ request: Appelis_Business_V1_GetClientBusinessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Business_V1_GetClientBusinessRequest, Appelis_Business_V1_GetClientBusinessResponse>

  func getBusinesses(
    _ request: Appelis_Business_V1_GetClientBusinessesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Business_V1_GetClientBusinessesRequest, Appelis_Business_V1_GetClientBusinessesResponse>

  func getBusinessesWithLocation(
    _ request: Appelis_Business_V1_GetBusinessesWithLocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Business_V1_GetBusinessesWithLocationRequest, Appelis_Business_V1_GetBusinessesWithLocationResponse>
}

extension Appelis_Business_V1_BusinessCatalogClientProtocol {
  public var serviceName: String {
    return "appelis.business.v1.BusinessCatalog"
  }

  /// Gets one business by ID. Used by clients for detail view.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBusinessByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBusinessByID(
    _ request: Appelis_Business_V1_GetClientBusinessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Business_V1_GetClientBusinessRequest, Appelis_Business_V1_GetClientBusinessResponse> {
    return self.makeUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessByIDInterceptors() ?? []
    )
  }

  /// Gets range of businesses according to filter, paging options. Used for clients list preview.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBusinesses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBusinesses(
    _ request: Appelis_Business_V1_GetClientBusinessesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Business_V1_GetClientBusinessesRequest, Appelis_Business_V1_GetClientBusinessesResponse> {
    return self.makeUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinesses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessesInterceptors() ?? []
    )
  }

  ///Gets range of businesses sorted by location, nearest. Used for clients list location sorted preview.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBusinessesWithLocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBusinessesWithLocation(
    _ request: Appelis_Business_V1_GetBusinessesWithLocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Business_V1_GetBusinessesWithLocationRequest, Appelis_Business_V1_GetBusinessesWithLocationResponse> {
    return self.makeUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessesWithLocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessesWithLocationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Business_V1_BusinessCatalogClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Business_V1_BusinessCatalogNIOClient")
public final class Appelis_Business_V1_BusinessCatalogClient: Appelis_Business_V1_BusinessCatalogClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.business.v1.BusinessCatalog service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Business_V1_BusinessCatalogNIOClient: Appelis_Business_V1_BusinessCatalogClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.business.v1.BusinessCatalog service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service used by client devices.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Business_V1_BusinessCatalogAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol? { get }

  func makeGetBusinessByIDCall(
    _ request: Appelis_Business_V1_GetClientBusinessRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Business_V1_GetClientBusinessRequest, Appelis_Business_V1_GetClientBusinessResponse>

  func makeGetBusinessesCall(
    _ request: Appelis_Business_V1_GetClientBusinessesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Business_V1_GetClientBusinessesRequest, Appelis_Business_V1_GetClientBusinessesResponse>

  func makeGetBusinessesWithLocationCall(
    _ request: Appelis_Business_V1_GetBusinessesWithLocationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Business_V1_GetBusinessesWithLocationRequest, Appelis_Business_V1_GetBusinessesWithLocationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Business_V1_BusinessCatalogAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Business_V1_BusinessCatalogClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetBusinessByIDCall(
    _ request: Appelis_Business_V1_GetClientBusinessRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Business_V1_GetClientBusinessRequest, Appelis_Business_V1_GetClientBusinessResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessByIDInterceptors() ?? []
    )
  }

  public func makeGetBusinessesCall(
    _ request: Appelis_Business_V1_GetClientBusinessesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Business_V1_GetClientBusinessesRequest, Appelis_Business_V1_GetClientBusinessesResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinesses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessesInterceptors() ?? []
    )
  }

  public func makeGetBusinessesWithLocationCall(
    _ request: Appelis_Business_V1_GetBusinessesWithLocationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Business_V1_GetBusinessesWithLocationRequest, Appelis_Business_V1_GetBusinessesWithLocationResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessesWithLocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessesWithLocationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Business_V1_BusinessCatalogAsyncClientProtocol {
  public func getBusinessByID(
    _ request: Appelis_Business_V1_GetClientBusinessRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Business_V1_GetClientBusinessResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessByIDInterceptors() ?? []
    )
  }

  public func getBusinesses(
    _ request: Appelis_Business_V1_GetClientBusinessesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Business_V1_GetClientBusinessesResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinesses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessesInterceptors() ?? []
    )
  }

  public func getBusinessesWithLocation(
    _ request: Appelis_Business_V1_GetBusinessesWithLocationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Business_V1_GetBusinessesWithLocationResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessesWithLocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBusinessesWithLocationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Business_V1_BusinessCatalogAsyncClient: Appelis_Business_V1_BusinessCatalogAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Business_V1_BusinessCatalogClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getBusinessByID'.
  func makeGetBusinessByIDInterceptors() -> [ClientInterceptor<Appelis_Business_V1_GetClientBusinessRequest, Appelis_Business_V1_GetClientBusinessResponse>]

  /// - Returns: Interceptors to use when invoking 'getBusinesses'.
  func makeGetBusinessesInterceptors() -> [ClientInterceptor<Appelis_Business_V1_GetClientBusinessesRequest, Appelis_Business_V1_GetClientBusinessesResponse>]

  /// - Returns: Interceptors to use when invoking 'getBusinessesWithLocation'.
  func makeGetBusinessesWithLocationInterceptors() -> [ClientInterceptor<Appelis_Business_V1_GetBusinessesWithLocationRequest, Appelis_Business_V1_GetBusinessesWithLocationResponse>]
}

public enum Appelis_Business_V1_BusinessCatalogClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BusinessCatalog",
    fullName: "appelis.business.v1.BusinessCatalog",
    methods: [
      Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessByID,
      Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinesses,
      Appelis_Business_V1_BusinessCatalogClientMetadata.Methods.getBusinessesWithLocation,
    ]
  )

  public enum Methods {
    public static let getBusinessByID = GRPCMethodDescriptor(
      name: "GetBusinessByID",
      path: "/appelis.business.v1.BusinessCatalog/GetBusinessByID",
      type: GRPCCallType.unary
    )

    public static let getBusinesses = GRPCMethodDescriptor(
      name: "GetBusinesses",
      path: "/appelis.business.v1.BusinessCatalog/GetBusinesses",
      type: GRPCCallType.unary
    )

    public static let getBusinessesWithLocation = GRPCMethodDescriptor(
      name: "GetBusinessesWithLocation",
      path: "/appelis.business.v1.BusinessCatalog/GetBusinessesWithLocation",
      type: GRPCCallType.unary
    )
  }
}


//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: clickandcollect_metro_services/metroUserApprovals.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Should be used by ordinary cardholders to create request for executive.
///
/// Usage: instantiate `Appelis_Clickandcollect_Metro_V1_UserApprovalsClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Clickandcollect_Metro_V1_UserApprovalsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol? { get }

  func getCompanyRequestApprovals(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse>

  func changeUserApproval(
    _ request: Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse>

  func createApprovalForUser(
    _ request: Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest, Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserResponse>

  func getMyRequestApproval(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse>

  func createUserApproval(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse>
}

extension Appelis_Clickandcollect_Metro_V1_UserApprovalsClientProtocol {
  public var serviceName: String {
    return "appelis.clickandcollect.metro.v1.UserApprovals"
  }

  /// Used by executive to get all approvals of users.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCompanyRequestApprovals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCompanyRequestApprovals(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getCompanyRequestApprovals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCompanyRequestApprovalsInterceptors() ?? []
    )
  }

  /// Used by executive to change status for one or more approvals.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeUserApproval.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func changeUserApproval(
    _ request: Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.changeUserApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeUserApprovalInterceptors() ?? []
    )
  }

  /// Used by executive to create approval for user
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateApprovalForUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createApprovalForUser(
    _ request: Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest, Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createApprovalForUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateApprovalForUserInterceptors() ?? []
    )
  }

  /// NON EXECUTIVE RPCS
  /// Get already created approval for user logged in token. If there is no records returns null.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMyRequestApproval.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMyRequestApproval(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getMyRequestApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyRequestApprovalInterceptors() ?? []
    )
  }

  /// Create request for approval for user logged in token. If there is already created request returns data of request.
  /// If registration have auto-approve then user will be auto approved (and notification will be send ???).
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateUserApproval.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createUserApproval(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createUserApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserApprovalInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Clickandcollect_Metro_V1_UserApprovalsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Clickandcollect_Metro_V1_UserApprovalsNIOClient")
public final class Appelis_Clickandcollect_Metro_V1_UserApprovalsClient: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.clickandcollect.metro.v1.UserApprovals service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Clickandcollect_Metro_V1_UserApprovalsNIOClient: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.clickandcollect.metro.v1.UserApprovals service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Should be used by ordinary cardholders to create request for executive.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Clickandcollect_Metro_V1_UserApprovalsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol? { get }

  func makeGetCompanyRequestApprovalsCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse>

  func makeChangeUserApprovalCall(
    _ request: Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse>

  func makeCreateApprovalForUserCall(
    _ request: Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest, Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserResponse>

  func makeGetMyRequestApprovalCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse>

  func makeCreateUserApprovalCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Clickandcollect_Metro_V1_UserApprovalsAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetCompanyRequestApprovalsCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getCompanyRequestApprovals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCompanyRequestApprovalsInterceptors() ?? []
    )
  }

  public func makeChangeUserApprovalCall(
    _ request: Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.changeUserApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeUserApprovalInterceptors() ?? []
    )
  }

  public func makeCreateApprovalForUserCall(
    _ request: Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest, Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createApprovalForUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateApprovalForUserInterceptors() ?? []
    )
  }

  public func makeGetMyRequestApprovalCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getMyRequestApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyRequestApprovalInterceptors() ?? []
    )
  }

  public func makeCreateUserApprovalCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createUserApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserApprovalInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Clickandcollect_Metro_V1_UserApprovalsAsyncClientProtocol {
  public func getCompanyRequestApprovals(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_ApprovalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getCompanyRequestApprovals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCompanyRequestApprovalsInterceptors() ?? []
    )
  }

  public func changeUserApproval(
    _ request: Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_ApprovalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.changeUserApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeUserApprovalInterceptors() ?? []
    )
  }

  public func createApprovalForUser(
    _ request: Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createApprovalForUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateApprovalForUserInterceptors() ?? []
    )
  }

  public func getMyRequestApproval(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_ApprovalResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getMyRequestApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyRequestApprovalInterceptors() ?? []
    )
  }

  public func createUserApproval(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_ApprovalResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createUserApproval.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserApprovalInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Clickandcollect_Metro_V1_UserApprovalsAsyncClient: Appelis_Clickandcollect_Metro_V1_UserApprovalsAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Clickandcollect_Metro_V1_UserApprovalsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getCompanyRequestApprovals'.
  func makeGetCompanyRequestApprovalsInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse>]

  /// - Returns: Interceptors to use when invoking 'changeUserApproval'.
  func makeChangeUserApprovalInterceptors() -> [ClientInterceptor<Appelis_Clickandcollect_Metro_V1_ChangeUserApprovalRequest, Appelis_Clickandcollect_Metro_V1_ApprovalsResponse>]

  /// - Returns: Interceptors to use when invoking 'createApprovalForUser'.
  func makeCreateApprovalForUserInterceptors() -> [ClientInterceptor<Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserRequest, Appelis_Clickandcollect_Metro_V1_CreateApprovalForUserResponse>]

  /// - Returns: Interceptors to use when invoking 'getMyRequestApproval'.
  func makeGetMyRequestApprovalInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse>]

  /// - Returns: Interceptors to use when invoking 'createUserApproval'.
  func makeCreateUserApprovalInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_ApprovalResponse>]
}

public enum Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserApprovals",
    fullName: "appelis.clickandcollect.metro.v1.UserApprovals",
    methods: [
      Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getCompanyRequestApprovals,
      Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.changeUserApproval,
      Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createApprovalForUser,
      Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.getMyRequestApproval,
      Appelis_Clickandcollect_Metro_V1_UserApprovalsClientMetadata.Methods.createUserApproval,
    ]
  )

  public enum Methods {
    public static let getCompanyRequestApprovals = GRPCMethodDescriptor(
      name: "GetCompanyRequestApprovals",
      path: "/appelis.clickandcollect.metro.v1.UserApprovals/GetCompanyRequestApprovals",
      type: GRPCCallType.unary
    )

    public static let changeUserApproval = GRPCMethodDescriptor(
      name: "ChangeUserApproval",
      path: "/appelis.clickandcollect.metro.v1.UserApprovals/ChangeUserApproval",
      type: GRPCCallType.unary
    )

    public static let createApprovalForUser = GRPCMethodDescriptor(
      name: "CreateApprovalForUser",
      path: "/appelis.clickandcollect.metro.v1.UserApprovals/CreateApprovalForUser",
      type: GRPCCallType.unary
    )

    public static let getMyRequestApproval = GRPCMethodDescriptor(
      name: "GetMyRequestApproval",
      path: "/appelis.clickandcollect.metro.v1.UserApprovals/GetMyRequestApproval",
      type: GRPCCallType.unary
    )

    public static let createUserApproval = GRPCMethodDescriptor(
      name: "CreateUserApproval",
      path: "/appelis.clickandcollect.metro.v1.UserApprovals/CreateUserApproval",
      type: GRPCCallType.unary
    )
  }
}


// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: clickandcollect_metro_services/metroRegistrationService.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_Clickandcollect_Metro_V1_CompanyVerifyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var validationToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.OneOf_Payload? = nil

  public var error: Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.VerifyError {
    get {
      if case .error(let v)? = payload {return v}
      return .verifyUnknown
    }
    set {payload = .error(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case error(Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.VerifyError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public enum VerifyError: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case verifyUnknown // = 0
    case notValid // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .verifyUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .verifyUnknown
      case 1: self = .notValid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .verifyUnknown: return 0
      case .notValid: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.VerifyError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.VerifyError] = [
    .verifyUnknown,
    .notValid,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var companyID: Int64 = 0

  public var invoiceEmail: String = String()

  public var applicantID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case permErr(Appelis_Identity_Common_V1_PermissionError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_ManagingUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idUser: String = String()

  public var name: String = String()

  public var surname: String = String()

  public var email: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var data: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case data(Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct DataMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var managingUsers: [Appelis_Clickandcollect_Metro_V1_ManagingUser] = []

    /// Per Status count of registrations, int32 is enum CompanyRegistration.RegistrationStatus
    public var statusCounts: Dictionary<Int32,Int64> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  /// When there is no registration for selected id.
  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  /// data for registration.
  public var data: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    /// When there is no registration for selected id.
    case permErr(Appelis_Identity_Common_V1_PermissionError)
    /// data for registration.
    case data(Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_GetRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var registrationID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_PagedRegistrationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Must be web token of logged user.
  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var paging: Appelis_Clickandcollect_Metro_V1_PagingParameters {
    get {return _paging ?? Appelis_Clickandcollect_Metro_V1_PagingParameters()}
    set {_paging = newValue}
  }
  /// Returns true if `paging` has been explicitly set.
  public var hasPaging: Bool {return self._paging != nil}
  /// Clears the value of `paging`. Subsequent reads from it will return its default value.
  public mutating func clearPaging() {self._paging = nil}

  public var filter: Appelis_Clickandcollect_Metro_V1_RegistrationFilter {
    get {return _filter ?? Appelis_Clickandcollect_Metro_V1_RegistrationFilter()}
    set {_filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  public var hasFilter: Bool {return self._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  public mutating func clearFilter() {self._filter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _paging: Appelis_Clickandcollect_Metro_V1_PagingParameters? = nil
  fileprivate var _filter: Appelis_Clickandcollect_Metro_V1_RegistrationFilter? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_PagingParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// How many items do u want to be in single page
  public var first: Int64 = 0

  /// Optional after/before. Because first page doesn't need after.
  public var cursor: Appelis_Clickandcollect_Metro_V1_PagingParameters.OneOf_Cursor? = nil

  public var after: String {
    get {
      if case .after(let v)? = cursor {return v}
      return String()
    }
    set {cursor = .after(newValue)}
  }

  public var before: String {
    get {
      if case .before(let v)? = cursor {return v}
      return String()
    }
    set {cursor = .before(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Optional after/before. Because first page doesn't need after.
  public enum OneOf_Cursor: Equatable {
    case after(String)
    case before(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_PagingParameters.OneOf_Cursor, rhs: Appelis_Clickandcollect_Metro_V1_PagingParameters.OneOf_Cursor) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.after, .after): return {
        guard case .after(let l) = lhs, case .after(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.before, .before): return {
        guard case .before(let l) = lhs, case .before(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_RegistrationFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional registration status to be filtered. If unknown filter will not be applied.
  public var status: [Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus] = []

  /// If not set, filter will not be applied.
  public var dateFrom: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _dateFrom ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_dateFrom = newValue}
  }
  /// Returns true if `dateFrom` has been explicitly set.
  public var hasDateFrom: Bool {return self._dateFrom != nil}
  /// Clears the value of `dateFrom`. Subsequent reads from it will return its default value.
  public mutating func clearDateFrom() {self._dateFrom = nil}

  /// If not set, filter will not be applied.
  public var dateTo: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _dateTo ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_dateTo = newValue}
  }
  /// Returns true if `dateTo` has been explicitly set.
  public var hasDateTo: Bool {return self._dateTo != nil}
  /// Clears the value of `dateTo`. Subsequent reads from it will return its default value.
  public mutating func clearDateTo() {self._dateTo = nil}

  /// If empty, filter will not be applied.
  public var storeNo: [String] = []

  /// if empty, filter will not be applied.
  public var managingUserID: [String] = []

  /// if default value will be sent, filter will not be applied.
  /// If keyword will be applied, then keyword will be used for prefix search on custNo field.
  public var keyword: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dateFrom: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _dateTo: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var data: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case data(Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct RegistrationNode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var registration: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration {
      get {return _registration ?? Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration()}
      set {_registration = newValue}
    }
    /// Returns true if `registration` has been explicitly set.
    public var hasRegistration: Bool {return self._registration != nil}
    /// Clears the value of `registration`. Subsequent reads from it will return its default value.
    public mutating func clearRegistration() {self._registration = nil}

    public var cursor: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _registration: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration? = nil
  }

  public struct RegistrationPage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var page: [Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationNode] = []

    public var totalCount: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If there is no payload set everything was successful.
  public var payload: Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  /// When there is no registration for selected id.
  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// If there is no payload set everything was successful.
  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    /// When there is no registration for selected id.
    case permErr(Appelis_Identity_Common_V1_PermissionError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_ChangeRegistrationStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Must be web token of logged user.
  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  /// Status to update.
  public var status: Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus = .unknown

  /// Registration id to update.
  public var registrationID: Int64 = 0

  /// Note for administrators
  public var adminNote: String = String()

  /// Note for users. Should store reason why registration was blocked.
  public var statusNote: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_UpdateRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var autoApprove: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var createErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .createErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .createErr(newValue)}
  }

  public var data: Appelis_Clickandcollect_Metro_V1_CompanyRegistration {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Clickandcollect_Metro_V1_CompanyRegistration()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case createErr(Appelis_Identity_Common_V1_PermissionError)
    case data(Appelis_Clickandcollect_Metro_V1_CompanyRegistration)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createErr, .createErr): return {
        guard case .createErr(let l) = lhs, case .createErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_CreateRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var invoiceEmail: String = String()

  public var autoApprove: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var data: Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case data(Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If there is no registration yet, returns null for data.
  public var registration: Appelis_Clickandcollect_Metro_V1_CompanyRegistration {
    get {return _registration ?? Appelis_Clickandcollect_Metro_V1_CompanyRegistration()}
    set {_registration = newValue}
  }
  /// Returns true if `registration` has been explicitly set.
  public var hasRegistration: Bool {return self._registration != nil}
  /// Clears the value of `registration`. Subsequent reads from it will return its default value.
  public mutating func clearRegistration() {self._registration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _registration: Appelis_Clickandcollect_Metro_V1_CompanyRegistration? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_CompanyMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var custNo: String = String()

  public var storeNo: String = String()

  public var type: Appelis_UserService_Companies_V1_Company.CompanyType = .typeUnknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_CompanyRegistration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var registrationID: Int64 {
    get {return _storage._registrationID}
    set {_uniqueStorage()._registrationID = newValue}
  }

  public var companyID: Int64 {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  public var companyMetadata: Appelis_Clickandcollect_Metro_V1_CompanyMetadata {
    get {return _storage._companyMetadata ?? Appelis_Clickandcollect_Metro_V1_CompanyMetadata()}
    set {_uniqueStorage()._companyMetadata = newValue}
  }
  /// Returns true if `companyMetadata` has been explicitly set.
  public var hasCompanyMetadata: Bool {return _storage._companyMetadata != nil}
  /// Clears the value of `companyMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearCompanyMetadata() {_uniqueStorage()._companyMetadata = nil}

  public var status: Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  /// email where invoices will be send.
  public var invoiceEmail: String {
    get {return _storage._invoiceEmail}
    set {_uniqueStorage()._invoiceEmail = newValue}
  }

  /// auto approve feature switch.
  public var autoApprove: Bool {
    get {return _storage._autoApprove}
    set {_uniqueStorage()._autoApprove = newValue}
  }

  /// User who created registration record. Can be null if there is not applicant
  public var applicant: Appelis_UserService_Users_V1_MobileUser {
    get {return _storage._applicant ?? Appelis_UserService_Users_V1_MobileUser()}
    set {_uniqueStorage()._applicant = newValue}
  }
  /// Returns true if `applicant` has been explicitly set.
  public var hasApplicant: Bool {return _storage._applicant != nil}
  /// Clears the value of `applicant`. Subsequent reads from it will return its default value.
  public mutating func clearApplicant() {_uniqueStorage()._applicant = nil}

  /// time of update of registration record (status update)
  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  /// Note for users. Should store reason why registration was blocked.
  public var statusNote: String {
    get {return _storage._statusNote}
    set {_uniqueStorage()._statusNote = newValue}
  }

  /// Managing webUser, if there was no updates to registration then field will be set to default value.
  public var managingUserID: String {
    get {return _storage._managingUserID}
    set {_uniqueStorage()._managingUserID = newValue}
  }

  /// if managingUserId is not default value, loads managing user for this record...
  public var managingUser: Appelis_Clickandcollect_Metro_V1_ManagingUser {
    get {return _storage._managingUser ?? Appelis_Clickandcollect_Metro_V1_ManagingUser()}
    set {_uniqueStorage()._managingUser = newValue}
  }
  /// Returns true if `managingUser` has been explicitly set.
  public var hasManagingUser: Bool {return _storage._managingUser != nil}
  /// Clears the value of `managingUser`. Subsequent reads from it will return its default value.
  public mutating func clearManagingUser() {_uniqueStorage()._managingUser = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum RegistrationStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case pending // = 1
    case blocked // = 2
    case approved // = 3
    case interested // = 4
    case companyVerification // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .pending
      case 2: self = .blocked
      case 3: self = .approved
      case 4: self = .interested
      case 5: self = .companyVerification
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .pending: return 1
      case .blocked: return 2
      case .approved: return 3
      case .interested: return 4
      case .companyVerification: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus] = [
    .unknown,
    .pending,
    .blocked,
    .approved,
    .interested,
    .companyVerification,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var record: Appelis_Clickandcollect_Metro_V1_CompanyRegistration {
    get {return _record ?? Appelis_Clickandcollect_Metro_V1_CompanyRegistration()}
    set {_record = newValue}
  }
  /// Returns true if `record` has been explicitly set.
  public var hasRecord: Bool {return self._record != nil}
  /// Clears the value of `record`. Subsequent reads from it will return its default value.
  public mutating func clearRecord() {self._record = nil}

  /// Note for administrators
  public var adminNote: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _record: Appelis_Clickandcollect_Metro_V1_CompanyRegistration? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var registration: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration {
    get {return _registration ?? Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration()}
    set {_registration = newValue}
  }
  /// Returns true if `registration` has been explicitly set.
  public var hasRegistration: Bool {return self._registration != nil}
  /// Clears the value of `registration`. Subsequent reads from it will return its default value.
  public mutating func clearRegistration() {self._registration = nil}

  public var users: [Appelis_Clickandcollect_Metro_V1_UsersData] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _registration: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_UserInterestMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var interestID: Int64 = 0

  public var mobileUserID: Int64 = 0

  public var companyID: Int64 = 0

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var approvalID: Int64 {
    get {return _storage._approvalID}
    set {_uniqueStorage()._approvalID = newValue}
  }

  public var mobileUserID: Int64 {
    get {return _storage._mobileUserID}
    set {_uniqueStorage()._mobileUserID = newValue}
  }

  public var companyID: Int64 {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var status: Appelis_Clickandcollect_Metro_V1_ApprovalStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Its optional mobile user that changed status of user approval
  public var managedBy: Appelis_UserService_Users_V1_MobileUser {
    get {return _storage._managedBy ?? Appelis_UserService_Users_V1_MobileUser()}
    set {_uniqueStorage()._managedBy = newValue}
  }
  /// Returns true if `managedBy` has been explicitly set.
  public var hasManagedBy: Bool {return _storage._managedBy != nil}
  /// Clears the value of `managedBy`. Subsequent reads from it will return its default value.
  public mutating func clearManagedBy() {_uniqueStorage()._managedBy = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Appelis_Clickandcollect_Metro_V1_UsersData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var user: Appelis_UserService_Users_V1_MobileUser {
    get {return _storage._user ?? Appelis_UserService_Users_V1_MobileUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var interest: Appelis_Clickandcollect_Metro_V1_UserInterestMetadata {
    get {return _storage._interest ?? Appelis_Clickandcollect_Metro_V1_UserInterestMetadata()}
    set {_uniqueStorage()._interest = newValue}
  }
  /// Returns true if `interest` has been explicitly set.
  public var hasInterest: Bool {return _storage._interest != nil}
  /// Clears the value of `interest`. Subsequent reads from it will return its default value.
  public mutating func clearInterest() {_uniqueStorage()._interest = nil}

  public var approval: Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata {
    get {return _storage._approval ?? Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata()}
    set {_uniqueStorage()._approval = newValue}
  }
  /// Returns true if `approval` has been explicitly set.
  public var hasApproval: Bool {return _storage._approval != nil}
  /// Clears the value of `approval`. Subsequent reads from it will return its default value.
  public mutating func clearApproval() {_uniqueStorage()._approval = nil}

  public var isLogged: Bool {
    get {return _storage._isLogged}
    set {_uniqueStorage()._isLogged = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var data: Bool {
    get {
      if case .data(let v)? = payload {return v}
      return false
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case data(Bool)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  /// When there is no registration for selected id.
  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    /// When there is no registration for selected id.
    case permErr(Appelis_Identity_Common_V1_PermissionError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse.OneOf_Payload, rhs: Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Clickandcollect_Metro_V1_ResetRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var registrationID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyRequest: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.VerifyError: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationRequest: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_ManagingUser: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetRegistrationRequest: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsRequest: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_PagingParameters: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_PagingParameters.OneOf_Cursor: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_RegistrationFilter: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationNode: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_ChangeRegistrationStatusRequest: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_UpdateRegistrationRequest: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CreateRegistrationRequest: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CompanyMetadata: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CompanyRegistration: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_UserInterestMetadata: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_UsersData: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Clickandcollect_Metro_V1_ResetRegistrationRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.clickandcollect.metro.v1"

extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyVerifyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "validationToken"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.validationToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.validationToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CompanyVerifyRequest, rhs: Appelis_Clickandcollect_Metro_V1_CompanyVerifyRequest) -> Bool {
    if lhs.validationToken != rhs.validationToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyVerifyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.VerifyError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .error(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .error(let v)? = self.payload {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse, rhs: Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CompanyVerifyResponse.VerifyError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VERIFY_UNKNOWN"),
    1: .same(proto: "NOT_VALID"),
  ]
}

extension Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAdminRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "companyId"),
    3: .same(proto: "invoiceEmail"),
    4: .same(proto: "applicantId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.companyID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.invoiceEmail) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.applicantID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.companyID != 0 {
      try visitor.visitSingularInt64Field(value: self.companyID, fieldNumber: 2)
    }
    if !self.invoiceEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.invoiceEmail, fieldNumber: 3)
    }
    if self.applicantID != 0 {
      try visitor.visitSingularInt64Field(value: self.applicantID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationRequest, rhs: Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs.invoiceEmail != rhs.invoiceEmail {return false}
    if lhs.applicantID != rhs.applicantID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAdminRegistrationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "permErr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse, rhs: Appelis_Clickandcollect_Metro_V1_CreateAdminRegistrationResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_ManagingUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ManagingUser"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idUser"),
    2: .same(proto: "name"),
    3: .same(proto: "surname"),
    4: .same(proto: "email"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.idUser) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.surname) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.idUser.isEmpty {
      try visitor.visitSingularStringField(value: self.idUser, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.surname.isEmpty {
      try visitor.visitSingularStringField(value: self.surname, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_ManagingUser, rhs: Appelis_Clickandcollect_Metro_V1_ManagingUser) -> Bool {
    if lhs.idUser != rhs.idUser {return false}
    if lhs.name != rhs.name {return false}
    if lhs.surname != rhs.surname {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFilterOptionsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse, rhs: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "managingUsers"),
    2: .same(proto: "statusCounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.managingUsers) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt64>.self, value: &self.statusCounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.managingUsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.managingUsers, fieldNumber: 1)
    }
    if !self.statusCounts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt64>.self, value: self.statusCounts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage, rhs: Appelis_Clickandcollect_Metro_V1_GetFilterOptionsResponse.DataMessage) -> Bool {
    if lhs.managingUsers != rhs.managingUsers {return false}
    if lhs.statusCounts != rhs.statusCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRegistrationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "permErr"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      case 3: try {
        var v: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse, rhs: Appelis_Clickandcollect_Metro_V1_GetRegistrationResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_GetRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "registrationId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.registrationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.registrationID != 0 {
      try visitor.visitSingularInt64Field(value: self.registrationID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetRegistrationRequest, rhs: Appelis_Clickandcollect_Metro_V1_GetRegistrationRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.registrationID != rhs.registrationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PagedRegistrationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "paging"),
    3: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._paging) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._paging {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._filter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsRequest, rhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._paging != rhs._paging {return false}
    if lhs._filter != rhs._filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_PagingParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PagingParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "first"),
    2: .same(proto: "after"),
    3: .same(proto: "before"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.first) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.cursor != nil {try decoder.handleConflictingOneOf()}
          self.cursor = .after(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.cursor != nil {try decoder.handleConflictingOneOf()}
          self.cursor = .before(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.first != 0 {
      try visitor.visitSingularInt64Field(value: self.first, fieldNumber: 1)
    }
    switch self.cursor {
    case .after?: try {
      guard case .after(let v)? = self.cursor else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .before?: try {
      guard case .before(let v)? = self.cursor else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_PagingParameters, rhs: Appelis_Clickandcollect_Metro_V1_PagingParameters) -> Bool {
    if lhs.first != rhs.first {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_RegistrationFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegistrationFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "dateFrom"),
    3: .same(proto: "dateTo"),
    4: .same(proto: "storeNo"),
    5: .same(proto: "managingUserId"),
    6: .same(proto: "keyword"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dateFrom) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._dateTo) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.storeNo) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.managingUserID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.keyword) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.status.isEmpty {
      try visitor.visitPackedEnumField(value: self.status, fieldNumber: 1)
    }
    try { if let v = self._dateFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._dateTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.storeNo.isEmpty {
      try visitor.visitRepeatedStringField(value: self.storeNo, fieldNumber: 4)
    }
    if !self.managingUserID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.managingUserID, fieldNumber: 5)
    }
    if !self.keyword.isEmpty {
      try visitor.visitSingularStringField(value: self.keyword, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_RegistrationFilter, rhs: Appelis_Clickandcollect_Metro_V1_RegistrationFilter) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs._dateFrom != rhs._dateFrom {return false}
    if lhs._dateTo != rhs._dateTo {return false}
    if lhs.storeNo != rhs.storeNo {return false}
    if lhs.managingUserID != rhs.managingUserID {return false}
    if lhs.keyword != rhs.keyword {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PagedRegistrationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse, rhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.protoMessageName + ".RegistrationNode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
    2: .same(proto: "cursor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registration) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._registration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationNode, rhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationNode) -> Bool {
    if lhs._registration != rhs._registration {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.protoMessageName + ".RegistrationPage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .same(proto: "totalCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.page) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.page.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.page, fieldNumber: 1)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage, rhs: Appelis_Clickandcollect_Metro_V1_PagedRegistrationsResponse.RegistrationPage) -> Bool {
    if lhs.page != rhs.page {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeRegistrationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "permErr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse, rhs: Appelis_Clickandcollect_Metro_V1_ChangeRegistrationResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_ChangeRegistrationStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeRegistrationStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "status"),
    3: .same(proto: "registrationId"),
    4: .same(proto: "adminNote"),
    5: .same(proto: "statusNote"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.registrationID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.adminNote) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.statusNote) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.registrationID != 0 {
      try visitor.visitSingularInt64Field(value: self.registrationID, fieldNumber: 3)
    }
    if !self.adminNote.isEmpty {
      try visitor.visitSingularStringField(value: self.adminNote, fieldNumber: 4)
    }
    if !self.statusNote.isEmpty {
      try visitor.visitSingularStringField(value: self.statusNote, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_ChangeRegistrationStatusRequest, rhs: Appelis_Clickandcollect_Metro_V1_ChangeRegistrationStatusRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.status != rhs.status {return false}
    if lhs.registrationID != rhs.registrationID {return false}
    if lhs.adminNote != rhs.adminNote {return false}
    if lhs.statusNote != rhs.statusNote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_UpdateRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    3: .same(proto: "autoApprove"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.autoApprove) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.autoApprove != false {
      try visitor.visitSingularBoolField(value: self.autoApprove, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_UpdateRegistrationRequest, rhs: Appelis_Clickandcollect_Metro_V1_UpdateRegistrationRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.autoApprove != rhs.autoApprove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateRegistrationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "createErr"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .createErr(v)
        }
      }()
      case 3: try {
        var v: Appelis_Clickandcollect_Metro_V1_CompanyRegistration?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .createErr?: try {
      guard case .createErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse, rhs: Appelis_Clickandcollect_Metro_V1_CreateRegistrationResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CreateRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "invoiceEmail"),
    3: .same(proto: "autoApprove"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.invoiceEmail) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.autoApprove) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.invoiceEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.invoiceEmail, fieldNumber: 2)
    }
    if self.autoApprove != false {
      try visitor.visitSingularBoolField(value: self.autoApprove, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CreateRegistrationRequest, rhs: Appelis_Clickandcollect_Metro_V1_CreateRegistrationRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.invoiceEmail != rhs.invoiceEmail {return false}
    if lhs.autoApprove != rhs.autoApprove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompanyRegistrationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse, rhs: Appelis_Clickandcollect_Metro_V1_GetCompanyRegistrationResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptionalCompanyRegistration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._registration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration, rhs: Appelis_Clickandcollect_Metro_V1_OptionalCompanyRegistration) -> Bool {
    if lhs._registration != rhs._registration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CompanyMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "custNo"),
    2: .same(proto: "storeNo"),
    3: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.custNo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.storeNo) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.custNo.isEmpty {
      try visitor.visitSingularStringField(value: self.custNo, fieldNumber: 1)
    }
    if !self.storeNo.isEmpty {
      try visitor.visitSingularStringField(value: self.storeNo, fieldNumber: 2)
    }
    if self.type != .typeUnknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CompanyMetadata, rhs: Appelis_Clickandcollect_Metro_V1_CompanyMetadata) -> Bool {
    if lhs.custNo != rhs.custNo {return false}
    if lhs.storeNo != rhs.storeNo {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CompanyRegistration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyRegistration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registrationId"),
    2: .same(proto: "companyId"),
    3: .same(proto: "companyMetadata"),
    4: .same(proto: "status"),
    5: .same(proto: "createdAt"),
    6: .same(proto: "invoiceEmail"),
    7: .same(proto: "autoApprove"),
    8: .same(proto: "applicant"),
    9: .same(proto: "updatedAt"),
    10: .same(proto: "statusNote"),
    11: .same(proto: "managingUserId"),
    12: .same(proto: "managingUser"),
  ]

  fileprivate class _StorageClass {
    var _registrationID: Int64 = 0
    var _companyID: Int64 = 0
    var _companyMetadata: Appelis_Clickandcollect_Metro_V1_CompanyMetadata? = nil
    var _status: Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus = .unknown
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _invoiceEmail: String = String()
    var _autoApprove: Bool = false
    var _applicant: Appelis_UserService_Users_V1_MobileUser? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _statusNote: String = String()
    var _managingUserID: String = String()
    var _managingUser: Appelis_Clickandcollect_Metro_V1_ManagingUser? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _registrationID = source._registrationID
      _companyID = source._companyID
      _companyMetadata = source._companyMetadata
      _status = source._status
      _createdAt = source._createdAt
      _invoiceEmail = source._invoiceEmail
      _autoApprove = source._autoApprove
      _applicant = source._applicant
      _updatedAt = source._updatedAt
      _statusNote = source._statusNote
      _managingUserID = source._managingUserID
      _managingUser = source._managingUser
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._registrationID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._companyID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._companyMetadata) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._invoiceEmail) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._autoApprove) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._applicant) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._statusNote) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._managingUserID) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._managingUser) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._registrationID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._registrationID, fieldNumber: 1)
      }
      if _storage._companyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._companyID, fieldNumber: 2)
      }
      try { if let v = _storage._companyMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 4)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._invoiceEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._invoiceEmail, fieldNumber: 6)
      }
      if _storage._autoApprove != false {
        try visitor.visitSingularBoolField(value: _storage._autoApprove, fieldNumber: 7)
      }
      try { if let v = _storage._applicant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._statusNote.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusNote, fieldNumber: 10)
      }
      if !_storage._managingUserID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._managingUserID, fieldNumber: 11)
      }
      try { if let v = _storage._managingUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CompanyRegistration, rhs: Appelis_Clickandcollect_Metro_V1_CompanyRegistration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._registrationID != rhs_storage._registrationID {return false}
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._companyMetadata != rhs_storage._companyMetadata {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._invoiceEmail != rhs_storage._invoiceEmail {return false}
        if _storage._autoApprove != rhs_storage._autoApprove {return false}
        if _storage._applicant != rhs_storage._applicant {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._statusNote != rhs_storage._statusNote {return false}
        if _storage._managingUserID != rhs_storage._managingUserID {return false}
        if _storage._managingUser != rhs_storage._managingUser {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CompanyRegistration.RegistrationStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "PENDING"),
    2: .same(proto: "BLOCKED"),
    3: .same(proto: "APPROVED"),
    4: .same(proto: "INTERESTED"),
    5: .same(proto: "COMPANY_VERIFICATION"),
  ]
}

extension Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminCompanyRegistration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "record"),
    2: .same(proto: "adminNote"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._record) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.adminNote) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._record {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.adminNote.isEmpty {
      try visitor.visitSingularStringField(value: self.adminNote, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration, rhs: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistration) -> Bool {
    if lhs._record != rhs._record {return false}
    if lhs.adminNote != rhs.adminNote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminCompanyRegistrationDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
    2: .same(proto: "users"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registration) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.users) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._registration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.users.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.users, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail, rhs: Appelis_Clickandcollect_Metro_V1_AdminCompanyRegistrationDetail) -> Bool {
    if lhs._registration != rhs._registration {return false}
    if lhs.users != rhs.users {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_UserInterestMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserInterestMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "interestId"),
    2: .same(proto: "mobileUserId"),
    3: .same(proto: "companyId"),
    4: .same(proto: "createdAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.interestID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.mobileUserID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.companyID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.interestID != 0 {
      try visitor.visitSingularInt64Field(value: self.interestID, fieldNumber: 1)
    }
    if self.mobileUserID != 0 {
      try visitor.visitSingularInt64Field(value: self.mobileUserID, fieldNumber: 2)
    }
    if self.companyID != 0 {
      try visitor.visitSingularInt64Field(value: self.companyID, fieldNumber: 3)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_UserInterestMetadata, rhs: Appelis_Clickandcollect_Metro_V1_UserInterestMetadata) -> Bool {
    if lhs.interestID != rhs.interestID {return false}
    if lhs.mobileUserID != rhs.mobileUserID {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserApprovalMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "approvalId"),
    2: .same(proto: "mobileUserId"),
    3: .same(proto: "companyId"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "status"),
    6: .same(proto: "managedBy"),
  ]

  fileprivate class _StorageClass {
    var _approvalID: Int64 = 0
    var _mobileUserID: Int64 = 0
    var _companyID: Int64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _status: Appelis_Clickandcollect_Metro_V1_ApprovalStatus = .unknown
    var _managedBy: Appelis_UserService_Users_V1_MobileUser? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _approvalID = source._approvalID
      _mobileUserID = source._mobileUserID
      _companyID = source._companyID
      _createdAt = source._createdAt
      _status = source._status
      _managedBy = source._managedBy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._approvalID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._mobileUserID) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._companyID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._managedBy) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._approvalID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._approvalID, fieldNumber: 1)
      }
      if _storage._mobileUserID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mobileUserID, fieldNumber: 2)
      }
      if _storage._companyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._companyID, fieldNumber: 3)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 5)
      }
      try { if let v = _storage._managedBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata, rhs: Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._approvalID != rhs_storage._approvalID {return false}
        if _storage._mobileUserID != rhs_storage._mobileUserID {return false}
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._managedBy != rhs_storage._managedBy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_UsersData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UsersData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "interest"),
    3: .same(proto: "approval"),
    4: .same(proto: "isLogged"),
  ]

  fileprivate class _StorageClass {
    var _user: Appelis_UserService_Users_V1_MobileUser? = nil
    var _interest: Appelis_Clickandcollect_Metro_V1_UserInterestMetadata? = nil
    var _approval: Appelis_Clickandcollect_Metro_V1_UserApprovalMetadata? = nil
    var _isLogged: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _interest = source._interest
      _approval = source._approval
      _isLogged = source._isLogged
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._interest) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._approval) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isLogged) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._interest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._approval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._isLogged != false {
        try visitor.visitSingularBoolField(value: _storage._isLogged, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_UsersData, rhs: Appelis_Clickandcollect_Metro_V1_UsersData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._user != rhs_storage._user {return false}
        if _storage._interest != rhs_storage._interest {return false}
        if _storage._approval != rhs_storage._approval {return false}
        if _storage._isLogged != rhs_storage._isLogged {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CanManageRegistrationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse, rhs: Appelis_Clickandcollect_Metro_V1_CanManageRegistrationResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResetRegistrationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "permErr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse, rhs: Appelis_Clickandcollect_Metro_V1_ResetRegistrationResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Clickandcollect_Metro_V1_ResetRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResetRegistrationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "registrationId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.registrationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.registrationID != 0 {
      try visitor.visitSingularInt64Field(value: self.registrationID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Clickandcollect_Metro_V1_ResetRegistrationRequest, rhs: Appelis_Clickandcollect_Metro_V1_ResetRegistrationRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.registrationID != rhs.registrationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

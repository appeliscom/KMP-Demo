//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: clickandcollect_metro_services/metroInterestService.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service for creating interest requests for clickandcollect module from ordinary cardholders.
///
/// Usage: instantiate `Appelis_Clickandcollect_Metro_V1_InterestClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Clickandcollect_Metro_V1_InterestClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol? { get }

  func getUserInterests(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse>

  func getMyInterest(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestResponse>

  func createUserInterest(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse>
}

extension Appelis_Clickandcollect_Metro_V1_InterestClientProtocol {
  public var serviceName: String {
    return "appelis.clickandcollect.metro.v1.Interest"
  }

  /// Can be called only by EXECUTIVE. Returns all interest requests by other users. All requests are per company of caller.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserInterests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUserInterests(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getUserInterests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterestsInterceptors() ?? []
    )
  }

  /// Can be called by anyone. If there is record returns data, otherwise returns null.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMyInterest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMyInterest(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getMyInterest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyInterestInterceptors() ?? []
    )
  }

  /// Try to create interest request for calling user for his company. If there is already created request returns data.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateUserInterest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createUserInterest(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse> {
    return self.makeUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.createUserInterest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserInterestInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Clickandcollect_Metro_V1_InterestClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Clickandcollect_Metro_V1_InterestNIOClient")
public final class Appelis_Clickandcollect_Metro_V1_InterestClient: Appelis_Clickandcollect_Metro_V1_InterestClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.clickandcollect.metro.v1.Interest service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Clickandcollect_Metro_V1_InterestNIOClient: Appelis_Clickandcollect_Metro_V1_InterestClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.clickandcollect.metro.v1.Interest service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service for creating interest requests for clickandcollect module from ordinary cardholders.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Clickandcollect_Metro_V1_InterestAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol? { get }

  func makeGetUserInterestsCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse>

  func makeGetMyInterestCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestResponse>

  func makeCreateUserInterestCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Clickandcollect_Metro_V1_InterestAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetUserInterestsCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getUserInterests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterestsInterceptors() ?? []
    )
  }

  public func makeGetMyInterestCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getMyInterest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyInterestInterceptors() ?? []
    )
  }

  public func makeCreateUserInterestCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.createUserInterest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserInterestInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Clickandcollect_Metro_V1_InterestAsyncClientProtocol {
  public func getUserInterests(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_UserInterestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getUserInterests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterestsInterceptors() ?? []
    )
  }

  public func getMyInterest(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_UserInterestResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getMyInterest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyInterestInterceptors() ?? []
    )
  }

  public func createUserInterest(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Clickandcollect_Metro_V1_UserInterestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.createUserInterest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserInterestInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Clickandcollect_Metro_V1_InterestAsyncClient: Appelis_Clickandcollect_Metro_V1_InterestAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Clickandcollect_Metro_V1_InterestClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getUserInterests'.
  func makeGetUserInterestsInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse>]

  /// - Returns: Interceptors to use when invoking 'getMyInterest'.
  func makeGetMyInterestInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestResponse>]

  /// - Returns: Interceptors to use when invoking 'createUserInterest'.
  func makeCreateUserInterestInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_Clickandcollect_Metro_V1_UserInterestsResponse>]
}

public enum Appelis_Clickandcollect_Metro_V1_InterestClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Interest",
    fullName: "appelis.clickandcollect.metro.v1.Interest",
    methods: [
      Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getUserInterests,
      Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.getMyInterest,
      Appelis_Clickandcollect_Metro_V1_InterestClientMetadata.Methods.createUserInterest,
    ]
  )

  public enum Methods {
    public static let getUserInterests = GRPCMethodDescriptor(
      name: "GetUserInterests",
      path: "/appelis.clickandcollect.metro.v1.Interest/GetUserInterests",
      type: GRPCCallType.unary
    )

    public static let getMyInterest = GRPCMethodDescriptor(
      name: "GetMyInterest",
      path: "/appelis.clickandcollect.metro.v1.Interest/GetMyInterest",
      type: GRPCCallType.unary
    )

    public static let createUserInterest = GRPCMethodDescriptor(
      name: "CreateUserInterest",
      path: "/appelis.clickandcollect.metro.v1.Interest/CreateUserInterest",
      type: GRPCCallType.unary
    )
  }
}


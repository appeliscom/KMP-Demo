//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: metro_telemetry/telemetry.public.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Metro_Telemetry_V1_Public_MetroTelemetryPublicClient`, then call methods of this protocol to make API calls.
public protocol Metro_Telemetry_V1_Public_MetroTelemetryPublicClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol? { get }

  func recordAppOpenEvent(
    _ request: Metro_Telemetry_V1_Public_RecordAppOpenEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Telemetry_V1_Public_RecordAppOpenEventRequest, Metro_Telemetry_V1_Public_RecordAppOpenEventResponse>
}

extension Metro_Telemetry_V1_Public_MetroTelemetryPublicClientProtocol {
  public var serviceName: String {
    return "metro.telemetry.v1.public.MetroTelemetryPublic"
  }

  /// Unary call to RecordAppOpenEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordAppOpenEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordAppOpenEvent(
    _ request: Metro_Telemetry_V1_Public_RecordAppOpenEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Telemetry_V1_Public_RecordAppOpenEventRequest, Metro_Telemetry_V1_Public_RecordAppOpenEventResponse> {
    return self.makeUnaryCall(
      path: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientMetadata.Methods.recordAppOpenEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordAppOpenEventInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Telemetry_V1_Public_MetroTelemetryPublicClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Telemetry_V1_Public_MetroTelemetryPublicNIOClient")
public final class Metro_Telemetry_V1_Public_MetroTelemetryPublicClient: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.telemetry.v1.public.MetroTelemetryPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Telemetry_V1_Public_MetroTelemetryPublicNIOClient: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.telemetry.v1.public.MetroTelemetryPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Telemetry_V1_Public_MetroTelemetryPublicAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol? { get }

  func makeRecordAppOpenEventCall(
    _ request: Metro_Telemetry_V1_Public_RecordAppOpenEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Telemetry_V1_Public_RecordAppOpenEventRequest, Metro_Telemetry_V1_Public_RecordAppOpenEventResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Telemetry_V1_Public_MetroTelemetryPublicAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Telemetry_V1_Public_MetroTelemetryPublicClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeRecordAppOpenEventCall(
    _ request: Metro_Telemetry_V1_Public_RecordAppOpenEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Telemetry_V1_Public_RecordAppOpenEventRequest, Metro_Telemetry_V1_Public_RecordAppOpenEventResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientMetadata.Methods.recordAppOpenEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordAppOpenEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Telemetry_V1_Public_MetroTelemetryPublicAsyncClientProtocol {
  public func recordAppOpenEvent(
    _ request: Metro_Telemetry_V1_Public_RecordAppOpenEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Telemetry_V1_Public_RecordAppOpenEventResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientMetadata.Methods.recordAppOpenEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordAppOpenEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Telemetry_V1_Public_MetroTelemetryPublicAsyncClient: Metro_Telemetry_V1_Public_MetroTelemetryPublicAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Telemetry_V1_Public_MetroTelemetryPublicClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'recordAppOpenEvent'.
  func makeRecordAppOpenEventInterceptors() -> [ClientInterceptor<Metro_Telemetry_V1_Public_RecordAppOpenEventRequest, Metro_Telemetry_V1_Public_RecordAppOpenEventResponse>]
}

public enum Metro_Telemetry_V1_Public_MetroTelemetryPublicClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MetroTelemetryPublic",
    fullName: "metro.telemetry.v1.public.MetroTelemetryPublic",
    methods: [
      Metro_Telemetry_V1_Public_MetroTelemetryPublicClientMetadata.Methods.recordAppOpenEvent,
    ]
  )

  public enum Methods {
    public static let recordAppOpenEvent = GRPCMethodDescriptor(
      name: "RecordAppOpenEvent",
      path: "/metro.telemetry.v1.public.MetroTelemetryPublic/RecordAppOpenEvent",
      type: GRPCCallType.unary
    )
  }
}


//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: translation_service/translationService.import.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Used to import/export csv file with all Translations for migrations.
///
/// Usage: instantiate `Appelis_Translations_V1_ImportExportClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Translations_V1_ImportExportClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol? { get }

  func `import`(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Appelis_Translations_V1_ImportRequest, Appelis_Translations_V1_ImportResponse>

  func export(
    _ request: Appelis_Translations_V1_ExportRequest,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_Translations_V1_ExportResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Translations_V1_ExportRequest, Appelis_Translations_V1_ExportResponse>
}

extension Appelis_Translations_V1_ImportExportClientProtocol {
  public var serviceName: String {
    return "appelis.translations.v1.ImportExport"
  }

  /// Client streaming call to Import
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func `import`(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Appelis_Translations_V1_ImportRequest, Appelis_Translations_V1_ImportResponse> {
    return self.makeClientStreamingCall(
      path: Appelis_Translations_V1_ImportExportClientMetadata.Methods.`import`.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportInterceptors() ?? []
    )
  }

  /// Server streaming call to Export
  ///
  /// - Parameters:
  ///   - request: Request to send to Export.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func export(
    _ request: Appelis_Translations_V1_ExportRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_Translations_V1_ExportResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Translations_V1_ExportRequest, Appelis_Translations_V1_ExportResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_Translations_V1_ImportExportClientMetadata.Methods.export.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Appelis_Translations_V1_ImportExportClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Translations_V1_ImportExportNIOClient")
public final class Appelis_Translations_V1_ImportExportClient: Appelis_Translations_V1_ImportExportClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.translations.v1.ImportExport service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Translations_V1_ImportExportNIOClient: Appelis_Translations_V1_ImportExportClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.translations.v1.ImportExport service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Used to import/export csv file with all Translations for migrations.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Translations_V1_ImportExportAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol? { get }

  func makeImportCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Appelis_Translations_V1_ImportRequest, Appelis_Translations_V1_ImportResponse>

  func makeExportCall(
    _ request: Appelis_Translations_V1_ExportRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_Translations_V1_ExportRequest, Appelis_Translations_V1_ExportResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Translations_V1_ImportExportAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Translations_V1_ImportExportClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeImportCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Appelis_Translations_V1_ImportRequest, Appelis_Translations_V1_ImportResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Appelis_Translations_V1_ImportExportClientMetadata.Methods.`import`.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportInterceptors() ?? []
    )
  }

  public func makeExportCall(
    _ request: Appelis_Translations_V1_ExportRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_Translations_V1_ExportRequest, Appelis_Translations_V1_ExportResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_Translations_V1_ImportExportClientMetadata.Methods.export.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Translations_V1_ImportExportAsyncClientProtocol {
  public func `import`<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Translations_V1_ImportResponse where RequestStream: Sequence, RequestStream.Element == Appelis_Translations_V1_ImportRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Appelis_Translations_V1_ImportExportClientMetadata.Methods.`import`.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportInterceptors() ?? []
    )
  }

  public func `import`<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Translations_V1_ImportResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Appelis_Translations_V1_ImportRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Appelis_Translations_V1_ImportExportClientMetadata.Methods.`import`.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportInterceptors() ?? []
    )
  }

  public func export(
    _ request: Appelis_Translations_V1_ExportRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_Translations_V1_ExportResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_Translations_V1_ImportExportClientMetadata.Methods.export.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Translations_V1_ImportExportAsyncClient: Appelis_Translations_V1_ImportExportAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Translations_V1_ImportExportClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking '`import`'.
  func makeImportInterceptors() -> [ClientInterceptor<Appelis_Translations_V1_ImportRequest, Appelis_Translations_V1_ImportResponse>]

  /// - Returns: Interceptors to use when invoking 'export'.
  func makeExportInterceptors() -> [ClientInterceptor<Appelis_Translations_V1_ExportRequest, Appelis_Translations_V1_ExportResponse>]
}

public enum Appelis_Translations_V1_ImportExportClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ImportExport",
    fullName: "appelis.translations.v1.ImportExport",
    methods: [
      Appelis_Translations_V1_ImportExportClientMetadata.Methods.`import`,
      Appelis_Translations_V1_ImportExportClientMetadata.Methods.export,
    ]
  )

  public enum Methods {
    public static let `import` = GRPCMethodDescriptor(
      name: "Import",
      path: "/appelis.translations.v1.ImportExport/Import",
      type: GRPCCallType.clientStreaming
    )

    public static let export = GRPCMethodDescriptor(
      name: "Export",
      path: "/appelis.translations.v1.ImportExport/Export",
      type: GRPCCallType.serverStreaming
    )
  }
}


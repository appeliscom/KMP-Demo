//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: metro_assortment/assortment.cip.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service for handling cip prices from administration.
///
/// Usage: instantiate `Metro_Assortment_V1_CipAdminClient`, then call methods of this protocol to make API calls.
public protocol Metro_Assortment_V1_CipAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol? { get }

  func getAllCipPrices(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?,
    handler: @escaping (Metro_Assortment_V1_CipPricesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_Common_V1_Token, Metro_Assortment_V1_CipPricesResponse>

  func createCipPrices(
    _ request: Metro_Assortment_V1_CreateCipPricesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Assortment_V1_CreateCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse>

  func deleteCipPrices(
    _ request: Metro_Assortment_V1_DeleteCipPricesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Assortment_V1_DeleteCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse>
}

extension Metro_Assortment_V1_CipAdminClientProtocol {
  public var serviceName: String {
    return "metro.assortment.v1.CipAdmin"
  }

  /// Rpc will stream all of projects cip prices.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllCipPrices.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getAllCipPrices(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil,
    handler: @escaping (Metro_Assortment_V1_CipPricesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_Common_V1_Token, Metro_Assortment_V1_CipPricesResponse> {
    return self.makeServerStreamingCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.getAllCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllCipPricesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Rpc will create prices, unique fields are IdCompany and IdArticle, if there will be more items for
  /// same combination of these fields, then they will be replaced by last value.
  /// Because of Upsert logic, rpc can't return ids of prices...
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCipPrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCipPrices(
    _ request: Metro_Assortment_V1_CreateCipPricesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Assortment_V1_CreateCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse> {
    return self.makeUnaryCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.createCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCipPricesInterceptors() ?? []
    )
  }

  /// Rpc will delete prices defined by their ids.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCipPrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCipPrices(
    _ request: Metro_Assortment_V1_DeleteCipPricesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Assortment_V1_DeleteCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse> {
    return self.makeUnaryCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.deleteCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCipPricesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Assortment_V1_CipAdminClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Assortment_V1_CipAdminNIOClient")
public final class Metro_Assortment_V1_CipAdminClient: Metro_Assortment_V1_CipAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.assortment.v1.CipAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Assortment_V1_CipAdminNIOClient: Metro_Assortment_V1_CipAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.assortment.v1.CipAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service for handling cip prices from administration.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Assortment_V1_CipAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol? { get }

  func makeGetAllCipPricesCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_Common_V1_Token, Metro_Assortment_V1_CipPricesResponse>

  func makeCreateCipPricesCall(
    _ request: Metro_Assortment_V1_CreateCipPricesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Assortment_V1_CreateCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse>

  func makeDeleteCipPricesCall(
    _ request: Metro_Assortment_V1_DeleteCipPricesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Assortment_V1_DeleteCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Assortment_V1_CipAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Assortment_V1_CipAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetAllCipPricesCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_Common_V1_Token, Metro_Assortment_V1_CipPricesResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.getAllCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllCipPricesInterceptors() ?? []
    )
  }

  public func makeCreateCipPricesCall(
    _ request: Metro_Assortment_V1_CreateCipPricesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Assortment_V1_CreateCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.createCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCipPricesInterceptors() ?? []
    )
  }

  public func makeDeleteCipPricesCall(
    _ request: Metro_Assortment_V1_DeleteCipPricesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Assortment_V1_DeleteCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.deleteCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCipPricesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Assortment_V1_CipAdminAsyncClientProtocol {
  public func getAllCipPrices(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Metro_Assortment_V1_CipPricesResponse> {
    return self.performAsyncServerStreamingCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.getAllCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllCipPricesInterceptors() ?? []
    )
  }

  public func createCipPrices(
    _ request: Metro_Assortment_V1_CreateCipPricesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Assortment_V1_ChangeCipPricesResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.createCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCipPricesInterceptors() ?? []
    )
  }

  public func deleteCipPrices(
    _ request: Metro_Assortment_V1_DeleteCipPricesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Assortment_V1_ChangeCipPricesResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Assortment_V1_CipAdminClientMetadata.Methods.deleteCipPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCipPricesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Assortment_V1_CipAdminAsyncClient: Metro_Assortment_V1_CipAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Assortment_V1_CipAdminClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getAllCipPrices'.
  func makeGetAllCipPricesInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Metro_Assortment_V1_CipPricesResponse>]

  /// - Returns: Interceptors to use when invoking 'createCipPrices'.
  func makeCreateCipPricesInterceptors() -> [ClientInterceptor<Metro_Assortment_V1_CreateCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteCipPrices'.
  func makeDeleteCipPricesInterceptors() -> [ClientInterceptor<Metro_Assortment_V1_DeleteCipPricesRequest, Metro_Assortment_V1_ChangeCipPricesResponse>]
}

public enum Metro_Assortment_V1_CipAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CipAdmin",
    fullName: "metro.assortment.v1.CipAdmin",
    methods: [
      Metro_Assortment_V1_CipAdminClientMetadata.Methods.getAllCipPrices,
      Metro_Assortment_V1_CipAdminClientMetadata.Methods.createCipPrices,
      Metro_Assortment_V1_CipAdminClientMetadata.Methods.deleteCipPrices,
    ]
  )

  public enum Methods {
    public static let getAllCipPrices = GRPCMethodDescriptor(
      name: "GetAllCipPrices",
      path: "/metro.assortment.v1.CipAdmin/GetAllCipPrices",
      type: GRPCCallType.serverStreaming
    )

    public static let createCipPrices = GRPCMethodDescriptor(
      name: "CreateCipPrices",
      path: "/metro.assortment.v1.CipAdmin/CreateCipPrices",
      type: GRPCCallType.unary
    )

    public static let deleteCipPrices = GRPCMethodDescriptor(
      name: "DeleteCipPrices",
      path: "/metro.assortment.v1.CipAdmin/DeleteCipPrices",
      type: GRPCCallType.unary
    )
  }
}


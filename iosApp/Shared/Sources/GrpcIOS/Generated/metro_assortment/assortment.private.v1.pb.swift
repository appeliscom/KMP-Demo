// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: metro_assortment/assortment.private.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Metro_Assortment_V1_CreateType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownCreateType // = 0
  case manual // = 1
  case automatic // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownCreateType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCreateType
    case 1: self = .manual
    case 2: self = .automatic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownCreateType: return 0
    case .manual: return 1
    case .automatic: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Assortment_V1_CreateType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Assortment_V1_CreateType] = [
    .unknownCreateType,
    .manual,
    .automatic,
  ]
}

#endif  // swift(>=4.2)

public enum Metro_Assortment_V1_StockStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownStockStatus // = 0
  case available // = 1
  case temporarilyUnavailable // = 2
  case longtermUnavailable // = 3
  case order // = 4
  case clearanceSale // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownStockStatus
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownStockStatus
    case 1: self = .available
    case 2: self = .temporarilyUnavailable
    case 3: self = .longtermUnavailable
    case 4: self = .order
    case 5: self = .clearanceSale
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownStockStatus: return 0
    case .available: return 1
    case .temporarilyUnavailable: return 2
    case .longtermUnavailable: return 3
    case .order: return 4
    case .clearanceSale: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Assortment_V1_StockStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Assortment_V1_StockStatus] = [
    .unknownStockStatus,
    .available,
    .temporarilyUnavailable,
    .longtermUnavailable,
    .order,
    .clearanceSale,
  ]
}

#endif  // swift(>=4.2)

public enum Metro_Assortment_V1_PriceType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownPriceType // = 0
  case action // = 1
  case standard // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownPriceType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownPriceType
    case 1: self = .action
    case 2: self = .standard
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownPriceType: return 0
    case .action: return 1
    case .standard: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Assortment_V1_PriceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Assortment_V1_PriceType] = [
    .unknownPriceType,
    .action,
    .standard,
  ]
}

#endif  // swift(>=4.2)

public struct Metro_Assortment_V1_GetArticlesByIdsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ids: [String] = []

  public var projectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Metro_Assortment_V1_GetArticlesByIdsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var articles: [Metro_Assortment_V1_Article] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Metro_Assortment_V1_Article {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var shortDescription: String {
    get {return _storage._shortDescription}
    set {_uniqueStorage()._shortDescription = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var tax: UInt32 {
    get {return _storage._tax}
    set {_uniqueStorage()._tax = newValue}
  }

  public var weightIndicator: Bool {
    get {return _storage._weightIndicator}
    set {_uniqueStorage()._weightIndicator = newValue}
  }

  public var staticPriority: Double {
    get {return _storage._staticPriority}
    set {_uniqueStorage()._staticPriority = newValue}
  }

  public var searchKeywords: String {
    get {return _storage._searchKeywords}
    set {_uniqueStorage()._searchKeywords = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var mutationArt: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._mutationArt ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._mutationArt = newValue}
  }
  /// Returns true if `mutationArt` has been explicitly set.
  public var hasMutationArt: Bool {return _storage._mutationArt != nil}
  /// Clears the value of `mutationArt`. Subsequent reads from it will return its default value.
  public mutating func clearMutationArt() {_uniqueStorage()._mutationArt = nil}

  public var depositArt: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._depositArt ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._depositArt = newValue}
  }
  /// Returns true if `depositArt` has been explicitly set.
  public var hasDepositArt: Bool {return _storage._depositArt != nil}
  /// Clears the value of `depositArt`. Subsequent reads from it will return its default value.
  public mutating func clearDepositArt() {_uniqueStorage()._depositArt = nil}

  public var eans: [String] {
    get {return _storage._eans}
    set {_uniqueStorage()._eans = newValue}
  }

  public var pictures: [Appelis_Picture] {
    get {return _storage._pictures}
    set {_uniqueStorage()._pictures = newValue}
  }

  public var attributeValuesIds: [Int64] {
    get {return _storage._attributeValuesIds}
    set {_uniqueStorage()._attributeValuesIds = newValue}
  }

  public var categories: [Metro_Assortment_V1_CategoryMapping] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  public var availabilities: [Metro_Assortment_V1_Availability] {
    get {return _storage._availabilities}
    set {_uniqueStorage()._availabilities = newValue}
  }

  public var prices: [Metro_Assortment_V1_Price] {
    get {return _storage._prices}
    set {_uniqueStorage()._prices = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Metro_Assortment_V1_CategoryMapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var type: Metro_Assortment_V1_CreateType = .unknownCreateType

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Metro_Assortment_V1_Availability {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var businessID: String = String()

  public var quantity: Double = 0

  public var status: Metro_Assortment_V1_StockStatus = .unknownStockStatus

  public var lastChange: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastChange ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastChange = newValue}
  }
  /// Returns true if `lastChange` has been explicitly set.
  public var hasLastChange: Bool {return self._lastChange != nil}
  /// Clears the value of `lastChange`. Subsequent reads from it will return its default value.
  public mutating func clearLastChange() {self._lastChange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastChange: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Metro_Assortment_V1_Price {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var priceType: Metro_Assortment_V1_PriceType = .unknownPriceType

  public var businessID: String = String()

  public var unit: Double = 0

  public var unitTax: Double = 0

  public var mUnit: Double = 0

  public var mUnitTax: Double = 0

  public var pack: Double = 0

  public var packTax: Double = 0

  public var validFrom: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validFrom ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validFrom = newValue}
  }
  /// Returns true if `validFrom` has been explicitly set.
  public var hasValidFrom: Bool {return self._validFrom != nil}
  /// Clears the value of `validFrom`. Subsequent reads from it will return its default value.
  public mutating func clearValidFrom() {self._validFrom = nil}

  public var validTo: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validTo ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validTo = newValue}
  }
  /// Returns true if `validTo` has been explicitly set.
  public var hasValidTo: Bool {return self._validTo != nil}
  /// Clears the value of `validTo`. Subsequent reads from it will return its default value.
  public mutating func clearValidTo() {self._validTo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _validFrom: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validTo: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Metro_Assortment_V1_CreateType: @unchecked Sendable {}
extension Metro_Assortment_V1_StockStatus: @unchecked Sendable {}
extension Metro_Assortment_V1_PriceType: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticlesByIdsRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticlesByIdsResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_Article: @unchecked Sendable {}
extension Metro_Assortment_V1_CategoryMapping: @unchecked Sendable {}
extension Metro_Assortment_V1_Availability: @unchecked Sendable {}
extension Metro_Assortment_V1_Price: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metro.assortment.v1"

extension Metro_Assortment_V1_CreateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CREATE_TYPE"),
    1: .same(proto: "MANUAL"),
    2: .same(proto: "AUTOMATIC"),
  ]
}

extension Metro_Assortment_V1_StockStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_STOCK_STATUS"),
    1: .same(proto: "AVAILABLE"),
    2: .same(proto: "TEMPORARILY_UNAVAILABLE"),
    3: .same(proto: "LONGTERM_UNAVAILABLE"),
    4: .same(proto: "ORDER"),
    5: .same(proto: "CLEARANCE_SALE"),
  ]
}

extension Metro_Assortment_V1_PriceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_PRICE_TYPE"),
    1: .same(proto: "ACTION"),
    2: .same(proto: "STANDARD"),
  ]
}

extension Metro_Assortment_V1_GetArticlesByIdsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetArticlesByIdsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
    2: .same(proto: "projectId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticlesByIdsRequest, rhs: Metro_Assortment_V1_GetArticlesByIdsRequest) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetArticlesByIdsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetArticlesByIdsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "articles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.articles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.articles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.articles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticlesByIdsResponse, rhs: Metro_Assortment_V1_GetArticlesByIdsResponse) -> Bool {
    if lhs.articles != rhs.articles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_Article: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Article"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "shortDescription"),
    4: .same(proto: "description"),
    5: .same(proto: "tax"),
    6: .same(proto: "weightIndicator"),
    7: .same(proto: "staticPriority"),
    8: .same(proto: "searchKeywords"),
    9: .same(proto: "createdAt"),
    10: .same(proto: "mutationArt"),
    11: .same(proto: "depositArt"),
    12: .same(proto: "eans"),
    14: .same(proto: "pictures"),
    15: .same(proto: "attributeValuesIds"),
    16: .same(proto: "categories"),
    17: .same(proto: "availabilities"),
    18: .same(proto: "prices"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _name: String = String()
    var _shortDescription: String = String()
    var _description_p: String = String()
    var _tax: UInt32 = 0
    var _weightIndicator: Bool = false
    var _staticPriority: Double = 0
    var _searchKeywords: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _mutationArt: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _depositArt: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _eans: [String] = []
    var _pictures: [Appelis_Picture] = []
    var _attributeValuesIds: [Int64] = []
    var _categories: [Metro_Assortment_V1_CategoryMapping] = []
    var _availabilities: [Metro_Assortment_V1_Availability] = []
    var _prices: [Metro_Assortment_V1_Price] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _shortDescription = source._shortDescription
      _description_p = source._description_p
      _tax = source._tax
      _weightIndicator = source._weightIndicator
      _staticPriority = source._staticPriority
      _searchKeywords = source._searchKeywords
      _createdAt = source._createdAt
      _mutationArt = source._mutationArt
      _depositArt = source._depositArt
      _eans = source._eans
      _pictures = source._pictures
      _attributeValuesIds = source._attributeValuesIds
      _categories = source._categories
      _availabilities = source._availabilities
      _prices = source._prices
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._shortDescription) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._tax) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._weightIndicator) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._staticPriority) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._searchKeywords) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._mutationArt) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._depositArt) }()
        case 12: try { try decoder.decodeRepeatedStringField(value: &_storage._eans) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._pictures) }()
        case 15: try { try decoder.decodeRepeatedInt64Field(value: &_storage._attributeValuesIds) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._categories) }()
        case 17: try { try decoder.decodeRepeatedMessageField(value: &_storage._availabilities) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._prices) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._shortDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortDescription, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if _storage._tax != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._tax, fieldNumber: 5)
      }
      if _storage._weightIndicator != false {
        try visitor.visitSingularBoolField(value: _storage._weightIndicator, fieldNumber: 6)
      }
      if _storage._staticPriority != 0 {
        try visitor.visitSingularDoubleField(value: _storage._staticPriority, fieldNumber: 7)
      }
      if !_storage._searchKeywords.isEmpty {
        try visitor.visitSingularStringField(value: _storage._searchKeywords, fieldNumber: 8)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._mutationArt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._depositArt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if !_storage._eans.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._eans, fieldNumber: 12)
      }
      if !_storage._pictures.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pictures, fieldNumber: 14)
      }
      if !_storage._attributeValuesIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._attributeValuesIds, fieldNumber: 15)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 16)
      }
      if !_storage._availabilities.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._availabilities, fieldNumber: 17)
      }
      if !_storage._prices.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._prices, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_Article, rhs: Metro_Assortment_V1_Article) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._shortDescription != rhs_storage._shortDescription {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._tax != rhs_storage._tax {return false}
        if _storage._weightIndicator != rhs_storage._weightIndicator {return false}
        if _storage._staticPriority != rhs_storage._staticPriority {return false}
        if _storage._searchKeywords != rhs_storage._searchKeywords {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._mutationArt != rhs_storage._mutationArt {return false}
        if _storage._depositArt != rhs_storage._depositArt {return false}
        if _storage._eans != rhs_storage._eans {return false}
        if _storage._pictures != rhs_storage._pictures {return false}
        if _storage._attributeValuesIds != rhs_storage._attributeValuesIds {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._availabilities != rhs_storage._availabilities {return false}
        if _storage._prices != rhs_storage._prices {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_CategoryMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryMapping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.type != .unknownCreateType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_CategoryMapping, rhs: Metro_Assortment_V1_CategoryMapping) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_Availability: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Availability"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "businessId"),
    2: .same(proto: "quantity"),
    3: .same(proto: "status"),
    4: .same(proto: "lastChange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.businessID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.quantity) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._lastChange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.businessID.isEmpty {
      try visitor.visitSingularStringField(value: self.businessID, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularDoubleField(value: self.quantity, fieldNumber: 2)
    }
    if self.status != .unknownStockStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try { if let v = self._lastChange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_Availability, rhs: Metro_Assortment_V1_Availability) -> Bool {
    if lhs.businessID != rhs.businessID {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.status != rhs.status {return false}
    if lhs._lastChange != rhs._lastChange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_Price: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Price"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "priceType"),
    2: .same(proto: "businessId"),
    3: .same(proto: "unit"),
    4: .same(proto: "unitTax"),
    5: .same(proto: "mUnit"),
    6: .same(proto: "mUnitTax"),
    7: .same(proto: "pack"),
    8: .same(proto: "packTax"),
    9: .same(proto: "validFrom"),
    10: .same(proto: "validTo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.priceType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.businessID) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.unit) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.unitTax) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.mUnit) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.mUnitTax) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.pack) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self.packTax) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._validFrom) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._validTo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.priceType != .unknownPriceType {
      try visitor.visitSingularEnumField(value: self.priceType, fieldNumber: 1)
    }
    if !self.businessID.isEmpty {
      try visitor.visitSingularStringField(value: self.businessID, fieldNumber: 2)
    }
    if self.unit != 0 {
      try visitor.visitSingularDoubleField(value: self.unit, fieldNumber: 3)
    }
    if self.unitTax != 0 {
      try visitor.visitSingularDoubleField(value: self.unitTax, fieldNumber: 4)
    }
    if self.mUnit != 0 {
      try visitor.visitSingularDoubleField(value: self.mUnit, fieldNumber: 5)
    }
    if self.mUnitTax != 0 {
      try visitor.visitSingularDoubleField(value: self.mUnitTax, fieldNumber: 6)
    }
    if self.pack != 0 {
      try visitor.visitSingularDoubleField(value: self.pack, fieldNumber: 7)
    }
    if self.packTax != 0 {
      try visitor.visitSingularDoubleField(value: self.packTax, fieldNumber: 8)
    }
    try { if let v = self._validFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._validTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_Price, rhs: Metro_Assortment_V1_Price) -> Bool {
    if lhs.priceType != rhs.priceType {return false}
    if lhs.businessID != rhs.businessID {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.unitTax != rhs.unitTax {return false}
    if lhs.mUnit != rhs.mUnit {return false}
    if lhs.mUnitTax != rhs.mUnitTax {return false}
    if lhs.pack != rhs.pack {return false}
    if lhs.packTax != rhs.packTax {return false}
    if lhs._validFrom != rhs._validFrom {return false}
    if lhs._validTo != rhs._validTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

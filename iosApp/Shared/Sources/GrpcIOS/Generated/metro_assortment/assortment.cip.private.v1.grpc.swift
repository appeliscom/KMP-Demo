//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: metro_assortment/assortment.cip.private.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Metro_Assortment_V1_PrivateCipClient`, then call methods of this protocol to make API calls.
public protocol Metro_Assortment_V1_PrivateCipClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol? { get }

  func getSelectedCipPricesForCompany(
    _ request: Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest, Metro_Assortment_V1_GetSelectedCipPricesForCompanyResponse>
}

extension Metro_Assortment_V1_PrivateCipClientProtocol {
  public var serviceName: String {
    return "metro.assortment.v1.PrivateCip"
  }

  /// Unary call to GetSelectedCipPricesForCompany
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSelectedCipPricesForCompany.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSelectedCipPricesForCompany(
    _ request: Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest, Metro_Assortment_V1_GetSelectedCipPricesForCompanyResponse> {
    return self.makeUnaryCall(
      path: Metro_Assortment_V1_PrivateCipClientMetadata.Methods.getSelectedCipPricesForCompany.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSelectedCipPricesForCompanyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Assortment_V1_PrivateCipClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Assortment_V1_PrivateCipNIOClient")
public final class Metro_Assortment_V1_PrivateCipClient: Metro_Assortment_V1_PrivateCipClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.assortment.v1.PrivateCip service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Assortment_V1_PrivateCipNIOClient: Metro_Assortment_V1_PrivateCipClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.assortment.v1.PrivateCip service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Assortment_V1_PrivateCipAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol? { get }

  func makeGetSelectedCipPricesForCompanyCall(
    _ request: Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest, Metro_Assortment_V1_GetSelectedCipPricesForCompanyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Assortment_V1_PrivateCipAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Assortment_V1_PrivateCipClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetSelectedCipPricesForCompanyCall(
    _ request: Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest, Metro_Assortment_V1_GetSelectedCipPricesForCompanyResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Assortment_V1_PrivateCipClientMetadata.Methods.getSelectedCipPricesForCompany.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSelectedCipPricesForCompanyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Assortment_V1_PrivateCipAsyncClientProtocol {
  public func getSelectedCipPricesForCompany(
    _ request: Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Assortment_V1_GetSelectedCipPricesForCompanyResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Assortment_V1_PrivateCipClientMetadata.Methods.getSelectedCipPricesForCompany.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSelectedCipPricesForCompanyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Assortment_V1_PrivateCipAsyncClient: Metro_Assortment_V1_PrivateCipAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Assortment_V1_PrivateCipClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getSelectedCipPricesForCompany'.
  func makeGetSelectedCipPricesForCompanyInterceptors() -> [ClientInterceptor<Metro_Assortment_V1_GetSelectedCipPricesForCompanyRequest, Metro_Assortment_V1_GetSelectedCipPricesForCompanyResponse>]
}

public enum Metro_Assortment_V1_PrivateCipClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PrivateCip",
    fullName: "metro.assortment.v1.PrivateCip",
    methods: [
      Metro_Assortment_V1_PrivateCipClientMetadata.Methods.getSelectedCipPricesForCompany,
    ]
  )

  public enum Methods {
    public static let getSelectedCipPricesForCompany = GRPCMethodDescriptor(
      name: "GetSelectedCipPricesForCompany",
      path: "/metro.assortment.v1.PrivateCip/GetSelectedCipPricesForCompany",
      type: GRPCCallType.unary
    )
  }
}


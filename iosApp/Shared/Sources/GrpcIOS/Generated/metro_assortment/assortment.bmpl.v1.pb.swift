// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: metro_assortment/assortment.bmpl.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Metro_Assortment_V1_ConditionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownConditionType // = 0
  case articleQuantity // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownConditionType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownConditionType
    case 1: self = .articleQuantity
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownConditionType: return 0
    case .articleQuantity: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Assortment_V1_ConditionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Assortment_V1_ConditionType] = [
    .unknownConditionType,
    .articleQuantity,
  ]
}

#endif  // swift(>=4.2)

public enum Metro_Assortment_V1_DiscountType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownDiscountType // = 0
  case percent // = 1
  case discount // = 2
  case fixed // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownDiscountType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownDiscountType
    case 1: self = .percent
    case 2: self = .discount
    case 3: self = .fixed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownDiscountType: return 0
    case .percent: return 1
    case .discount: return 2
    case .fixed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Assortment_V1_DiscountType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Assortment_V1_DiscountType] = [
    .unknownDiscountType,
    .percent,
    .discount,
    .fixed,
  ]
}

#endif  // swift(>=4.2)

public struct Metro_Assortment_V1_DeletePricesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Appelis_Identity_Common_V1_TokenError = .unknownTokenError

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Metro_Assortment_V1_DeletePricesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var ids: [Appelis_UUID] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_Assortment_V1_SetPricesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var prices: Metro_Assortment_V1_BmplPricesArray {
    get {return _prices ?? Metro_Assortment_V1_BmplPricesArray()}
    set {_prices = newValue}
  }
  /// Returns true if `prices` has been explicitly set.
  public var hasPrices: Bool {return self._prices != nil}
  /// Clears the value of `prices`. Subsequent reads from it will return its default value.
  public mutating func clearPrices() {self._prices = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _prices: Metro_Assortment_V1_BmplPricesArray? = nil
}

public struct Metro_Assortment_V1_StreamAllPricesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_Assortment_V1_AllPricesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_Assortment_V1_AllPricesResponse.OneOf_Payload? = nil

  public var error: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .error(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .error(newValue)}
  }

  public var data: Metro_Assortment_V1_BmplPricesArray {
    get {
      if case .data(let v)? = payload {return v}
      return Metro_Assortment_V1_BmplPricesArray()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case error(Appelis_Identity_Common_V1_TokenError)
    case data(Metro_Assortment_V1_BmplPricesArray)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_Assortment_V1_AllPricesResponse.OneOf_Payload, rhs: Metro_Assortment_V1_AllPricesResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Metro_Assortment_V1_BmplPricesArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var price: [Metro_Assortment_V1_BmplPrice] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Metro_Assortment_V1_PriceData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idArticle: String = String()

  public var idBusiness: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _idBusiness ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_idBusiness = newValue}
  }
  /// Returns true if `idBusiness` has been explicitly set.
  public var hasIDBusiness: Bool {return self._idBusiness != nil}
  /// Clears the value of `idBusiness`. Subsequent reads from it will return its default value.
  public mutating func clearIDBusiness() {self._idBusiness = nil}

  public var validityFrom: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validityFrom ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validityFrom = newValue}
  }
  /// Returns true if `validityFrom` has been explicitly set.
  public var hasValidityFrom: Bool {return self._validityFrom != nil}
  /// Clears the value of `validityFrom`. Subsequent reads from it will return its default value.
  public mutating func clearValidityFrom() {self._validityFrom = nil}

  public var validityTo: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validityTo ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validityTo = newValue}
  }
  /// Returns true if `validityTo` has been explicitly set.
  public var hasValidityTo: Bool {return self._validityTo != nil}
  /// Clears the value of `validityTo`. Subsequent reads from it will return its default value.
  public mutating func clearValidityTo() {self._validityTo = nil}

  public var conditionType: Metro_Assortment_V1_ConditionType = .unknownConditionType

  public var conditionValue: Double = 0

  public var discountType: Metro_Assortment_V1_DiscountType = .unknownDiscountType

  public var discountValue: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _idBusiness: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _validityFrom: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validityTo: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Metro_Assortment_V1_BmplPrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Uuid have null value or empty val for updating...
  public var id: Appelis_UUID {
    get {return _id ?? Appelis_UUID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var data: Metro_Assortment_V1_PriceData {
    get {return _data ?? Metro_Assortment_V1_PriceData()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: Appelis_UUID? = nil
  fileprivate var _data: Metro_Assortment_V1_PriceData? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Metro_Assortment_V1_ConditionType: @unchecked Sendable {}
extension Metro_Assortment_V1_DiscountType: @unchecked Sendable {}
extension Metro_Assortment_V1_DeletePricesResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_DeletePricesRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_SetPricesRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_StreamAllPricesRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_AllPricesResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_AllPricesResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_Assortment_V1_BmplPricesArray: @unchecked Sendable {}
extension Metro_Assortment_V1_PriceData: @unchecked Sendable {}
extension Metro_Assortment_V1_BmplPrice: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metro.assortment.v1"

extension Metro_Assortment_V1_ConditionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CONDITION_TYPE"),
    1: .same(proto: "ARTICLE_QUANTITY"),
  ]
}

extension Metro_Assortment_V1_DiscountType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_DISCOUNT_TYPE"),
    1: .same(proto: "PERCENT"),
    2: .same(proto: "DISCOUNT"),
    3: .same(proto: "FIXED"),
  ]
}

extension Metro_Assortment_V1_DeletePricesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeletePricesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.error != .unknownTokenError {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_DeletePricesResponse, rhs: Metro_Assortment_V1_DeletePricesResponse) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_DeletePricesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeletePricesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.ids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_DeletePricesRequest, rhs: Metro_Assortment_V1_DeletePricesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_SetPricesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPricesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "prices"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._prices) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._prices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_SetPricesRequest, rhs: Metro_Assortment_V1_SetPricesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._prices != rhs._prices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_StreamAllPricesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamAllPricesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_StreamAllPricesRequest, rhs: Metro_Assortment_V1_StreamAllPricesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_AllPricesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AllPricesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .error(v)
        }
      }()
      case 2: try {
        var v: Metro_Assortment_V1_BmplPricesArray?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .error?: try {
      guard case .error(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_AllPricesResponse, rhs: Metro_Assortment_V1_AllPricesResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_BmplPricesArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BmplPricesArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.price) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.price.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.price, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_BmplPricesArray, rhs: Metro_Assortment_V1_BmplPricesArray) -> Bool {
    if lhs.price != rhs.price {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_PriceData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PriceData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "idArticle"),
    5: .same(proto: "idBusiness"),
    6: .same(proto: "validityFrom"),
    7: .same(proto: "validityTo"),
    8: .same(proto: "conditionType"),
    9: .same(proto: "conditionValue"),
    10: .same(proto: "discountType"),
    11: .same(proto: "discountValue"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.idArticle) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._idBusiness) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._validityFrom) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._validityTo) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.conditionType) }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self.conditionValue) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.discountType) }()
      case 11: try { try decoder.decodeSingularDoubleField(value: &self.discountValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.idArticle.isEmpty {
      try visitor.visitSingularStringField(value: self.idArticle, fieldNumber: 2)
    }
    try { if let v = self._idBusiness {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._validityFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._validityTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.conditionType != .unknownConditionType {
      try visitor.visitSingularEnumField(value: self.conditionType, fieldNumber: 8)
    }
    if self.conditionValue != 0 {
      try visitor.visitSingularDoubleField(value: self.conditionValue, fieldNumber: 9)
    }
    if self.discountType != .unknownDiscountType {
      try visitor.visitSingularEnumField(value: self.discountType, fieldNumber: 10)
    }
    if self.discountValue != 0 {
      try visitor.visitSingularDoubleField(value: self.discountValue, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_PriceData, rhs: Metro_Assortment_V1_PriceData) -> Bool {
    if lhs.idArticle != rhs.idArticle {return false}
    if lhs._idBusiness != rhs._idBusiness {return false}
    if lhs._validityFrom != rhs._validityFrom {return false}
    if lhs._validityTo != rhs._validityTo {return false}
    if lhs.conditionType != rhs.conditionType {return false}
    if lhs.conditionValue != rhs.conditionValue {return false}
    if lhs.discountType != rhs.discountType {return false}
    if lhs.discountValue != rhs.discountValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_BmplPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BmplPrice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_BmplPrice, rhs: Metro_Assortment_V1_BmplPrice) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

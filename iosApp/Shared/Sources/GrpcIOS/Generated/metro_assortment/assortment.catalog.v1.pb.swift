// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: metro_assortment/assortment.catalog.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Metro_Assortment_V1_FilterPriceType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownFilterPriceType // = 0
  case filterPriceUnit // = 1
  case filterPriceUnitTax // = 2
  case filterPriceMunit // = 3
  case filterPriceMunitTax // = 4
  case filterPricePack // = 5
  case filterPricePackTax // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownFilterPriceType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownFilterPriceType
    case 1: self = .filterPriceUnit
    case 2: self = .filterPriceUnitTax
    case 3: self = .filterPriceMunit
    case 4: self = .filterPriceMunitTax
    case 5: self = .filterPricePack
    case 6: self = .filterPricePackTax
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownFilterPriceType: return 0
    case .filterPriceUnit: return 1
    case .filterPriceUnitTax: return 2
    case .filterPriceMunit: return 3
    case .filterPriceMunitTax: return 4
    case .filterPricePack: return 5
    case .filterPricePackTax: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Assortment_V1_FilterPriceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Assortment_V1_FilterPriceType] = [
    .unknownFilterPriceType,
    .filterPriceUnit,
    .filterPriceUnitTax,
    .filterPriceMunit,
    .filterPriceMunitTax,
    .filterPricePack,
    .filterPricePackTax,
  ]
}

#endif  // swift(>=4.2)

public enum Metro_Assortment_V1_SortField: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownSortType // = 0
  case priceUnit // = 1
  case priceUnitTax // = 2
  case priceMunit // = 3
  case priceMunitTax // = 4
  case pricePack // = 5
  case pricePackTax // = 6
  case relevance // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownSortType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownSortType
    case 1: self = .priceUnit
    case 2: self = .priceUnitTax
    case 3: self = .priceMunit
    case 4: self = .priceMunitTax
    case 5: self = .pricePack
    case 6: self = .pricePackTax
    case 7: self = .relevance
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownSortType: return 0
    case .priceUnit: return 1
    case .priceUnitTax: return 2
    case .priceMunit: return 3
    case .priceMunitTax: return 4
    case .pricePack: return 5
    case .pricePackTax: return 6
    case .relevance: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Assortment_V1_SortField: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Assortment_V1_SortField] = [
    .unknownSortType,
    .priceUnit,
    .priceUnitTax,
    .priceMunit,
    .priceMunitTax,
    .pricePack,
    .pricePackTax,
    .relevance,
  ]
}

#endif  // swift(>=4.2)

public struct Metro_Assortment_V1_ScanArticleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var scanned: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_Assortment_V1_ScanArticleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_Assortment_V1_ScanArticleResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var article: Metro_Assortment_V1_CatalogArticle {
    get {
      if case .article(let v)? = payload {return v}
      return Metro_Assortment_V1_CatalogArticle()
    }
    set {payload = .article(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case article(Metro_Assortment_V1_CatalogArticle)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_Assortment_V1_ScanArticleResponse.OneOf_Payload, rhs: Metro_Assortment_V1_ScanArticleResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.article, .article): return {
        guard case .article(let l) = lhs, case .article(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Metro_Assortment_V1_GetAssortmentFilterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_Assortment_V1_GetAssortmentFilterResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var filter: Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter {
    get {
      if case .filter(let v)? = payload {return v}
      return Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter()
    }
    set {payload = .filter(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case filter(Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_Assortment_V1_GetAssortmentFilterResponse.OneOf_Payload, rhs: Metro_Assortment_V1_GetAssortmentFilterResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.filter, .filter): return {
        guard case .filter(let l) = lhs, case .filter(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct FilterAttributeValue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: Metro_Assortment_V1_AttributeValue {
      get {return _value ?? Metro_Assortment_V1_AttributeValue()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var articleCount: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: Metro_Assortment_V1_AttributeValue? = nil
  }

  public struct FilterAttribute {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var attribute: Metro_Assortment_V1_Attribute {
      get {return _attribute ?? Metro_Assortment_V1_Attribute()}
      set {_attribute = newValue}
    }
    /// Returns true if `attribute` has been explicitly set.
    public var hasAttribute: Bool {return self._attribute != nil}
    /// Clears the value of `attribute`. Subsequent reads from it will return its default value.
    public mutating func clearAttribute() {self._attribute = nil}

    public var values: [Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttributeValue] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _attribute: Metro_Assortment_V1_Attribute? = nil
  }

  public struct AssortmentFilter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var priceFrom: Double = 0

    public var priceTo: Double = 0

    public var cipCount: Int64 = 0

    public var attributes: [Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttribute] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Metro_Assortment_V1_GetAssortmentFilterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var filter: Metro_Assortment_V1_FilterFlagsExt {
    get {return _filter ?? Metro_Assortment_V1_FilterFlagsExt()}
    set {_filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  public var hasFilter: Bool {return self._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  public mutating func clearFilter() {self._filter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _filter: Metro_Assortment_V1_FilterFlagsExt? = nil
}

public struct Metro_Assortment_V1_FilterFlagsExt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Metro_Assortment_V1_FilterFlags {
    get {return _flags ?? Metro_Assortment_V1_FilterFlags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  /// Id of category. if empty returns empty results.
  public var categoryID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _flags: Metro_Assortment_V1_FilterFlags? = nil
}

public struct Metro_Assortment_V1_FilterFlags {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// if empty returns empty results.
  public var businessID: String = String()

  /// Optional: keyword when user searches for articles before using filter.
  public var keyword: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _keyword ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_keyword = newValue}
  }
  /// Returns true if `keyword` has been explicitly set.
  public var hasKeyword: Bool {return self._keyword != nil}
  /// Clears the value of `keyword`. Subsequent reads from it will return its default value.
  public mutating func clearKeyword() {self._keyword = nil}

  /// Optional: if default value will be sent status will not be used in filtering.
  public var status: Metro_Assortment_V1_StockStatus = .unknownStockStatus

  /// Optional: if used filter attributes will be filtered according to this value
  public var priceFrom: Double = 0

  /// Optional: if used filter attributes will be filtered according to this value
  public var priceTo: Double = 0

  /// Only set when filtering using priceFrom/priceTo.
  public var priceType: Metro_Assortment_V1_FilterPriceType = .unknownFilterPriceType

  /// filtering only on assortment with CIP prices for registration.
  public var cipOnly: Bool = false

  public var attributeValueIds: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _keyword: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Metro_Assortment_V1_SortingFlags {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Appelis_SortOrder = .unknownSort

  public var field: Metro_Assortment_V1_SortField = .unknownSortType

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Metro_Assortment_V1_GetAssortmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var sorting: Metro_Assortment_V1_SortingFlags {
    get {return _sorting ?? Metro_Assortment_V1_SortingFlags()}
    set {_sorting = newValue}
  }
  /// Returns true if `sorting` has been explicitly set.
  public var hasSorting: Bool {return self._sorting != nil}
  /// Clears the value of `sorting`. Subsequent reads from it will return its default value.
  public mutating func clearSorting() {self._sorting = nil}

  public var filtering: Metro_Assortment_V1_FilterFlagsExt {
    get {return _filtering ?? Metro_Assortment_V1_FilterFlagsExt()}
    set {_filtering = newValue}
  }
  /// Returns true if `filtering` has been explicitly set.
  public var hasFiltering: Bool {return self._filtering != nil}
  /// Clears the value of `filtering`. Subsequent reads from it will return its default value.
  public mutating func clearFiltering() {self._filtering = nil}

  public var paging: Appelis_CursorForwardPagingParams {
    get {return _paging ?? Appelis_CursorForwardPagingParams()}
    set {_paging = newValue}
  }
  /// Returns true if `paging` has been explicitly set.
  public var hasPaging: Bool {return self._paging != nil}
  /// Clears the value of `paging`. Subsequent reads from it will return its default value.
  public mutating func clearPaging() {self._paging = nil}

  /// Field mask will be applied to whole response.
  public var fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldMask = newValue}
  }
  /// Returns true if `fieldMask` has been explicitly set.
  public var hasFieldMask: Bool {return self._fieldMask != nil}
  /// Clears the value of `fieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldMask() {self._fieldMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _sorting: Metro_Assortment_V1_SortingFlags? = nil
  fileprivate var _filtering: Metro_Assortment_V1_FilterFlagsExt? = nil
  fileprivate var _paging: Appelis_CursorForwardPagingParams? = nil
  fileprivate var _fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

public struct Metro_Assortment_V1_GetAssortmentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_Assortment_V1_GetAssortmentResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var page: Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage {
    get {
      if case .page(let v)? = payload {return v}
      return Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage()
    }
    set {payload = .page(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case page(Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_Assortment_V1_GetAssortmentResponse.OneOf_Payload, rhs: Metro_Assortment_V1_GetAssortmentResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.page, .page): return {
        guard case .page(let l) = lhs, case .page(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct AssortmentNode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var cursor: String = String()

    public var data: Metro_Assortment_V1_CatalogArticle {
      get {return _data ?? Metro_Assortment_V1_CatalogArticle()}
      set {_data = newValue}
    }
    /// Returns true if `data` has been explicitly set.
    public var hasData: Bool {return self._data != nil}
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    public mutating func clearData() {self._data = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _data: Metro_Assortment_V1_CatalogArticle? = nil
  }

  public struct AssortmentPage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var hasNext_p: Bool = false

    public var totalCount: Int64 = 0

    public var nodes: [Metro_Assortment_V1_GetAssortmentResponse.AssortmentNode] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Metro_Assortment_V1_GetArticleCountByCategoryIdsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  /// Ids of categories for which client wants article counts.
  public var categoryIds: [String] = []

  /// Count of articles will be dependent of filter setup.
  public var filter: Metro_Assortment_V1_FilterFlags {
    get {return _filter ?? Metro_Assortment_V1_FilterFlags()}
    set {_filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  public var hasFilter: Bool {return self._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  public mutating func clearFilter() {self._filter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _filter: Metro_Assortment_V1_FilterFlags? = nil
}

public struct Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var data: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount {
    get {
      if case .data(let v)? = payload {return v}
      return Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case data(Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.OneOf_Payload, rhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct ArticleCount {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Per selected category ids, as value article count.
    public var articleCounts: Dictionary<String,UInt64> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Metro_Assortment_V1_GetArticleRelatedArticlesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Token representing client. If MobileUser is in claims, then prices will be filtered according to user price level.
  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  /// Id of article that client wants and its parent to related association.
  public var articleID: String = String()

  /// Field mask will be applied to whole response.
  public var fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldMask = newValue}
  }
  /// Returns true if `fieldMask` has been explicitly set.
  public var hasFieldMask: Bool {return self._fieldMask != nil}
  /// Clears the value of `fieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldMask() {self._fieldMask = nil}

  /// Maximum length of output array.
  public var size: UInt32 = 0

  /// Optional: if business if provided impl does filtering on business availability and status=available.
  public var businessID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _businessID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_businessID = newValue}
  }
  /// Returns true if `businessID` has been explicitly set.
  public var hasBusinessID: Bool {return self._businessID != nil}
  /// Clears the value of `businessID`. Subsequent reads from it will return its default value.
  public mutating func clearBusinessID() {self._businessID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
  fileprivate var _businessID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Metro_Assortment_V1_GetArticlesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Token representing client.
  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  /// Field mask will be applied to whole response.
  public var fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldMask = newValue}
  }
  /// Returns true if `fieldMask` has been explicitly set.
  public var hasFieldMask: Bool {return self._fieldMask != nil}
  /// Clears the value of `fieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldMask() {self._fieldMask = nil}

  /// Id of articles that client wants.
  public var articleIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

public struct Metro_Assortment_V1_GetArticleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_Assortment_V1_GetArticleResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var data: Metro_Assortment_V1_CatalogArticleArray {
    get {
      if case .data(let v)? = payload {return v}
      return Metro_Assortment_V1_CatalogArticleArray()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case data(Metro_Assortment_V1_CatalogArticleArray)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_Assortment_V1_GetArticleResponse.OneOf_Payload, rhs: Metro_Assortment_V1_GetArticleResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Metro_Assortment_V1_CatalogArticle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Metro_Assortment_V1_Article {
    get {return _data ?? Metro_Assortment_V1_Article()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var depositArticle: Metro_Assortment_V1_Article {
    get {return _depositArticle ?? Metro_Assortment_V1_Article()}
    set {_depositArticle = newValue}
  }
  /// Returns true if `depositArticle` has been explicitly set.
  public var hasDepositArticle: Bool {return self._depositArticle != nil}
  /// Clears the value of `depositArticle`. Subsequent reads from it will return its default value.
  public mutating func clearDepositArticle() {self._depositArticle = nil}

  public var bmplPrices: Metro_Assortment_V1_BmplPricesArray {
    get {return _bmplPrices ?? Metro_Assortment_V1_BmplPricesArray()}
    set {_bmplPrices = newValue}
  }
  /// Returns true if `bmplPrices` has been explicitly set.
  public var hasBmplPrices: Bool {return self._bmplPrices != nil}
  /// Clears the value of `bmplPrices`. Subsequent reads from it will return its default value.
  public mutating func clearBmplPrices() {self._bmplPrices = nil}

  public var attributeValues: Metro_Assortment_V1_AttributeValuesArray {
    get {return _attributeValues ?? Metro_Assortment_V1_AttributeValuesArray()}
    set {_attributeValues = newValue}
  }
  /// Returns true if `attributeValues` has been explicitly set.
  public var hasAttributeValues: Bool {return self._attributeValues != nil}
  /// Clears the value of `attributeValues`. Subsequent reads from it will return its default value.
  public mutating func clearAttributeValues() {self._attributeValues = nil}

  public var cipPrices: Metro_Assortment_V1_CipPrices {
    get {return _cipPrices ?? Metro_Assortment_V1_CipPrices()}
    set {_cipPrices = newValue}
  }
  /// Returns true if `cipPrices` has been explicitly set.
  public var hasCipPrices: Bool {return self._cipPrices != nil}
  /// Clears the value of `cipPrices`. Subsequent reads from it will return its default value.
  public mutating func clearCipPrices() {self._cipPrices = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Metro_Assortment_V1_Article? = nil
  fileprivate var _depositArticle: Metro_Assortment_V1_Article? = nil
  fileprivate var _bmplPrices: Metro_Assortment_V1_BmplPricesArray? = nil
  fileprivate var _attributeValues: Metro_Assortment_V1_AttributeValuesArray? = nil
  fileprivate var _cipPrices: Metro_Assortment_V1_CipPrices? = nil
}

public struct Metro_Assortment_V1_CatalogArticleArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var array: [Metro_Assortment_V1_CatalogArticle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Metro_Assortment_V1_FilterPriceType: @unchecked Sendable {}
extension Metro_Assortment_V1_SortField: @unchecked Sendable {}
extension Metro_Assortment_V1_ScanArticleRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_ScanArticleResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_ScanArticleResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentFilterResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentFilterResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttributeValue: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttribute: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentFilterRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_FilterFlagsExt: @unchecked Sendable {}
extension Metro_Assortment_V1_FilterFlags: @unchecked Sendable {}
extension Metro_Assortment_V1_SortingFlags: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentResponse.AssortmentNode: @unchecked Sendable {}
extension Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticleCountByCategoryIdsRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticleRelatedArticlesRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticlesRequest: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticleResponse: @unchecked Sendable {}
extension Metro_Assortment_V1_GetArticleResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_Assortment_V1_CatalogArticle: @unchecked Sendable {}
extension Metro_Assortment_V1_CatalogArticleArray: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metro.assortment.v1"

extension Metro_Assortment_V1_FilterPriceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_FILTER_PRICE_TYPE"),
    1: .same(proto: "FILTER_PRICE_UNIT"),
    2: .same(proto: "FILTER_PRICE_UNIT_TAX"),
    3: .same(proto: "FILTER_PRICE_MUNIT"),
    4: .same(proto: "FILTER_PRICE_MUNIT_TAX"),
    5: .same(proto: "FILTER_PRICE_PACK"),
    6: .same(proto: "FILTER_PRICE_PACK_TAX"),
  ]
}

extension Metro_Assortment_V1_SortField: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_SORT_TYPE"),
    1: .same(proto: "PRICE_UNIT"),
    2: .same(proto: "PRICE_UNIT_TAX"),
    3: .same(proto: "PRICE_MUNIT"),
    4: .same(proto: "PRICE_MUNIT_TAX"),
    5: .same(proto: "PRICE_PACK"),
    6: .same(proto: "PRICE_PACK_TAX"),
    7: .same(proto: "RELEVANCE"),
  ]
}

extension Metro_Assortment_V1_ScanArticleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScanArticleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "scanned"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.scanned) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.scanned.isEmpty {
      try visitor.visitSingularStringField(value: self.scanned, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_ScanArticleRequest, rhs: Metro_Assortment_V1_ScanArticleRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.scanned != rhs.scanned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_ScanArticleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScanArticleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenErr"),
    2: .same(proto: "article"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Metro_Assortment_V1_CatalogArticle?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .article(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .article(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .article?: try {
      guard case .article(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_ScanArticleResponse, rhs: Metro_Assortment_V1_ScanArticleResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentFilterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssortmentFilterResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenErr"),
    2: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .filter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .filter(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .filter?: try {
      guard case .filter(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentFilterResponse, rhs: Metro_Assortment_V1_GetAssortmentFilterResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttributeValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_Assortment_V1_GetAssortmentFilterResponse.protoMessageName + ".FilterAttributeValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "articleCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.articleCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.articleCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.articleCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttributeValue, rhs: Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttributeValue) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.articleCount != rhs.articleCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttribute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_Assortment_V1_GetAssortmentFilterResponse.protoMessageName + ".FilterAttribute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attribute"),
    2: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._attribute) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._attribute {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttribute, rhs: Metro_Assortment_V1_GetAssortmentFilterResponse.FilterAttribute) -> Bool {
    if lhs._attribute != rhs._attribute {return false}
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_Assortment_V1_GetAssortmentFilterResponse.protoMessageName + ".AssortmentFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "priceFrom"),
    2: .same(proto: "priceTo"),
    3: .same(proto: "cipCount"),
    4: .same(proto: "attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.priceFrom) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.priceTo) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.cipCount) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.attributes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.priceFrom != 0 {
      try visitor.visitSingularDoubleField(value: self.priceFrom, fieldNumber: 1)
    }
    if self.priceTo != 0 {
      try visitor.visitSingularDoubleField(value: self.priceTo, fieldNumber: 2)
    }
    if self.cipCount != 0 {
      try visitor.visitSingularInt64Field(value: self.cipCount, fieldNumber: 3)
    }
    if !self.attributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter, rhs: Metro_Assortment_V1_GetAssortmentFilterResponse.AssortmentFilter) -> Bool {
    if lhs.priceFrom != rhs.priceFrom {return false}
    if lhs.priceTo != rhs.priceTo {return false}
    if lhs.cipCount != rhs.cipCount {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentFilterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssortmentFilterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._filter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentFilterRequest, rhs: Metro_Assortment_V1_GetAssortmentFilterRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._filter != rhs._filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_FilterFlagsExt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterFlagsExt"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .same(proto: "categoryId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._flags) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.categoryID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.categoryID.isEmpty {
      try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_FilterFlagsExt, rhs: Metro_Assortment_V1_FilterFlagsExt) -> Bool {
    if lhs._flags != rhs._flags {return false}
    if lhs.categoryID != rhs.categoryID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_FilterFlags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterFlags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "businessId"),
    4: .same(proto: "keyword"),
    5: .same(proto: "status"),
    6: .same(proto: "priceFrom"),
    7: .same(proto: "priceTo"),
    8: .same(proto: "priceType"),
    9: .same(proto: "cipOnly"),
    10: .same(proto: "attributeValueIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.businessID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._keyword) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.priceFrom) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.priceTo) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.priceType) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.cipOnly) }()
      case 10: try { try decoder.decodeRepeatedInt64Field(value: &self.attributeValueIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.businessID.isEmpty {
      try visitor.visitSingularStringField(value: self.businessID, fieldNumber: 3)
    }
    try { if let v = self._keyword {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.status != .unknownStockStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    if self.priceFrom != 0 {
      try visitor.visitSingularDoubleField(value: self.priceFrom, fieldNumber: 6)
    }
    if self.priceTo != 0 {
      try visitor.visitSingularDoubleField(value: self.priceTo, fieldNumber: 7)
    }
    if self.priceType != .unknownFilterPriceType {
      try visitor.visitSingularEnumField(value: self.priceType, fieldNumber: 8)
    }
    if self.cipOnly != false {
      try visitor.visitSingularBoolField(value: self.cipOnly, fieldNumber: 9)
    }
    if !self.attributeValueIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.attributeValueIds, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_FilterFlags, rhs: Metro_Assortment_V1_FilterFlags) -> Bool {
    if lhs.businessID != rhs.businessID {return false}
    if lhs._keyword != rhs._keyword {return false}
    if lhs.status != rhs.status {return false}
    if lhs.priceFrom != rhs.priceFrom {return false}
    if lhs.priceTo != rhs.priceTo {return false}
    if lhs.priceType != rhs.priceType {return false}
    if lhs.cipOnly != rhs.cipOnly {return false}
    if lhs.attributeValueIds != rhs.attributeValueIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_SortingFlags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SortingFlags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.field) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknownSort {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.field != .unknownSortType {
      try visitor.visitSingularEnumField(value: self.field, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_SortingFlags, rhs: Metro_Assortment_V1_SortingFlags) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.field != rhs.field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssortmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "sorting"),
    3: .same(proto: "filtering"),
    4: .same(proto: "paging"),
    5: .standard(proto: "field_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._sorting) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._filtering) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._paging) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._fieldMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._sorting {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._filtering {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._paging {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._fieldMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentRequest, rhs: Metro_Assortment_V1_GetAssortmentRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._sorting != rhs._sorting {return false}
    if lhs._filtering != rhs._filtering {return false}
    if lhs._paging != rhs._paging {return false}
    if lhs._fieldMask != rhs._fieldMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssortmentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenErr"),
    2: .same(proto: "page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .page(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .page(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .page?: try {
      guard case .page(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentResponse, rhs: Metro_Assortment_V1_GetAssortmentResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentResponse.AssortmentNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_Assortment_V1_GetAssortmentResponse.protoMessageName + ".AssortmentNode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cursor"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentResponse.AssortmentNode, rhs: Metro_Assortment_V1_GetAssortmentResponse.AssortmentNode) -> Bool {
    if lhs.cursor != rhs.cursor {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_Assortment_V1_GetAssortmentResponse.protoMessageName + ".AssortmentPage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hasNext"),
    2: .same(proto: "totalCount"),
    3: .same(proto: "nodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.hasNext_p) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalCount) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.nodes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hasNext_p != false {
      try visitor.visitSingularBoolField(value: self.hasNext_p, fieldNumber: 1)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCount, fieldNumber: 2)
    }
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage, rhs: Metro_Assortment_V1_GetAssortmentResponse.AssortmentPage) -> Bool {
    if lhs.hasNext_p != rhs.hasNext_p {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.nodes != rhs.nodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetArticleCountByCategoryIdsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetArticleCountByCategoryIdsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "categoryIds"),
    3: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.categoryIds) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._filter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.categoryIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.categoryIds, fieldNumber: 2)
    }
    try { if let v = self._filter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsRequest, rhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.categoryIds != rhs.categoryIds {return false}
    if lhs._filter != rhs._filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetArticleCountByCategoryIdsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenErr"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse, rhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.protoMessageName + ".ArticleCount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "articleCounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt64>.self, value: &self.articleCounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.articleCounts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt64>.self, value: self.articleCounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount, rhs: Metro_Assortment_V1_GetArticleCountByCategoryIdsResponse.ArticleCount) -> Bool {
    if lhs.articleCounts != rhs.articleCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetArticleRelatedArticlesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetArticleRelatedArticlesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "articleId"),
    3: .standard(proto: "field_mask"),
    4: .same(proto: "size"),
    5: .same(proto: "businessId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.articleID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._fieldMask) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.size) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._businessID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.articleID.isEmpty {
      try visitor.visitSingularStringField(value: self.articleID, fieldNumber: 2)
    }
    try { if let v = self._fieldMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.size != 0 {
      try visitor.visitSingularUInt32Field(value: self.size, fieldNumber: 4)
    }
    try { if let v = self._businessID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticleRelatedArticlesRequest, rhs: Metro_Assortment_V1_GetArticleRelatedArticlesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.articleID != rhs.articleID {return false}
    if lhs._fieldMask != rhs._fieldMask {return false}
    if lhs.size != rhs.size {return false}
    if lhs._businessID != rhs._businessID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetArticlesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetArticlesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    3: .standard(proto: "field_mask"),
    2: .same(proto: "articleIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.articleIds) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._fieldMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.articleIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.articleIds, fieldNumber: 2)
    }
    try { if let v = self._fieldMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticlesRequest, rhs: Metro_Assortment_V1_GetArticlesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._fieldMask != rhs._fieldMask {return false}
    if lhs.articleIds != rhs.articleIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_GetArticleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetArticleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenErr"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Metro_Assortment_V1_CatalogArticleArray?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_GetArticleResponse, rhs: Metro_Assortment_V1_GetArticleResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_CatalogArticle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogArticle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "depositArticle"),
    3: .same(proto: "bmplPrices"),
    4: .same(proto: "attributeValues"),
    5: .same(proto: "cipPrices"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._depositArticle) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._bmplPrices) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._attributeValues) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._cipPrices) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._depositArticle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._bmplPrices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._attributeValues {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._cipPrices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_CatalogArticle, rhs: Metro_Assortment_V1_CatalogArticle) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs._depositArticle != rhs._depositArticle {return false}
    if lhs._bmplPrices != rhs._bmplPrices {return false}
    if lhs._attributeValues != rhs._attributeValues {return false}
    if lhs._cipPrices != rhs._cipPrices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Assortment_V1_CatalogArticleArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogArticleArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "array"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.array) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.array.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.array, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Assortment_V1_CatalogArticleArray, rhs: Metro_Assortment_V1_CatalogArticleArray) -> Bool {
    if lhs.array != rhs.array {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: category_service/categories.data.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Category_V1_CreateType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownCreateType // = 0
  case manual // = 1
  case automatic // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownCreateType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCreateType
    case 1: self = .manual
    case 2: self = .automatic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownCreateType: return 0
    case .manual: return 1
    case .automatic: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Category_V1_CreateType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Category_V1_CreateType] = [
    .unknownCreateType,
    .manual,
    .automatic,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Category_V1_Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  /// Id of the parent category.
  public var parentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _parentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_parentID = newValue}
  }
  /// Returns true if `parentID` has been explicitly set.
  public var hasParentID: Bool {return self._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
  public mutating func clearParentID() {self._parentID = nil}

  /// Const key by which category can be found.
  public var categoryKey: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _categoryKey ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_categoryKey = newValue}
  }
  /// Returns true if `categoryKey` has been explicitly set.
  public var hasCategoryKey: Bool {return self._categoryKey != nil}
  /// Clears the value of `categoryKey`. Subsequent reads from it will return its default value.
  public mutating func clearCategoryKey() {self._categoryKey = nil}

  /// Flag for showing category in menu.
  public var menuVisible: Bool = false

  /// Default category name.
  public var name: String = String()

  public var picture: Appelis_Picture {
    get {return _picture ?? Appelis_Picture()}
    set {_picture = newValue}
  }
  /// Returns true if `picture` has been explicitly set.
  public var hasPicture: Bool {return self._picture != nil}
  /// Clears the value of `picture`. Subsequent reads from it will return its default value.
  public mutating func clearPicture() {self._picture = nil}

  /// Count of child categories mapped by parentId
  public var childCount: UInt32 = 0

  public var translatedNames: [Appelis_Category_V1_TranslatedName] = []

  /// Path of default names of parent categories. Array will have only parents...
  public var treePath: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _categoryKey: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _picture: Appelis_Picture? = nil
}

public struct Appelis_Category_V1_TranslatedName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var language: Appelis_Language = .unknown

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Category_V1_AdminCategory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Appelis_Category_V1_Category {
    get {return _data ?? Appelis_Category_V1_Category()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var active: Bool = false

  public var childOrder: UInt32 = 0

  public var externalID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _externalID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  public var hasExternalID: Bool {return self._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalID() {self._externalID = nil}

  public var creatType: Appelis_Category_V1_CreateType = .unknownCreateType

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Appelis_Category_V1_Category? = nil
  fileprivate var _externalID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Category_V1_CreateType: @unchecked Sendable {}
extension Appelis_Category_V1_Category: @unchecked Sendable {}
extension Appelis_Category_V1_TranslatedName: @unchecked Sendable {}
extension Appelis_Category_V1_AdminCategory: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.category.v1"

extension Appelis_Category_V1_CreateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CREATE_TYPE"),
    1: .same(proto: "MANUAL"),
    2: .same(proto: "AUTOMATIC"),
  ]
}

extension Appelis_Category_V1_Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Category"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "parentId"),
    3: .same(proto: "categoryKey"),
    4: .same(proto: "menuVisible"),
    5: .same(proto: "name"),
    6: .same(proto: "picture"),
    7: .same(proto: "childCount"),
    8: .same(proto: "translatedNames"),
    9: .same(proto: "treePath"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parentID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._categoryKey) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.menuVisible) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._picture) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.childCount) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.translatedNames) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.treePath) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._parentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._categoryKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.menuVisible != false {
      try visitor.visitSingularBoolField(value: self.menuVisible, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try { if let v = self._picture {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.childCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.childCount, fieldNumber: 7)
    }
    if !self.translatedNames.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.translatedNames, fieldNumber: 8)
    }
    if !self.treePath.isEmpty {
      try visitor.visitRepeatedStringField(value: self.treePath, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Category_V1_Category, rhs: Appelis_Category_V1_Category) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._parentID != rhs._parentID {return false}
    if lhs._categoryKey != rhs._categoryKey {return false}
    if lhs.menuVisible != rhs.menuVisible {return false}
    if lhs.name != rhs.name {return false}
    if lhs._picture != rhs._picture {return false}
    if lhs.childCount != rhs.childCount {return false}
    if lhs.translatedNames != rhs.translatedNames {return false}
    if lhs.treePath != rhs.treePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Category_V1_TranslatedName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranslatedName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.language) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.language != .unknown {
      try visitor.visitSingularEnumField(value: self.language, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Category_V1_TranslatedName, rhs: Appelis_Category_V1_TranslatedName) -> Bool {
    if lhs.language != rhs.language {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Category_V1_AdminCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminCategory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "active"),
    3: .same(proto: "childOrder"),
    4: .same(proto: "externalId"),
    5: .same(proto: "creatType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.childOrder) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._externalID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.creatType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 2)
    }
    if self.childOrder != 0 {
      try visitor.visitSingularUInt32Field(value: self.childOrder, fieldNumber: 3)
    }
    try { if let v = self._externalID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.creatType != .unknownCreateType {
      try visitor.visitSingularEnumField(value: self.creatType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Category_V1_AdminCategory, rhs: Appelis_Category_V1_AdminCategory) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.active != rhs.active {return false}
    if lhs.childOrder != rhs.childOrder {return false}
    if lhs._externalID != rhs._externalID {return false}
    if lhs.creatType != rhs.creatType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

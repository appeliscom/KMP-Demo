// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wallet_v2/wallet.private.v2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Metro_Wallet_Private_V2_AddCreditedActivityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idProject: String = String()

  public var idCompanyExt: String = String()

  public var idBusinessExt: String = String()

  public var idExternal: String = String()

  public var fundName: String = String()

  public var fundType: Metro_Wallet_Data_V2_WalletFundType = .unknownFundType

  public var amount: Double = 0

  public var expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expirationDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expirationDate = newValue}
  }
  /// Returns true if `expirationDate` has been explicitly set.
  public var hasExpirationDate: Bool {return self._expirationDate != nil}
  /// Clears the value of `expirationDate`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationDate() {self._expirationDate = nil}

  public var note: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Metro_Wallet_Private_V2_AddCreditedActivityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Metro_Wallet_Private_V2_AddCreditedActivityResponse.Error {
    get {return _error ?? .unknownError}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Error: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknownError // = 0
    case companyNotFoundError // = 1
    case invalidExpirationDateError // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknownError
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownError
      case 1: self = .companyNotFoundError
      case 2: self = .invalidExpirationDateError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownError: return 0
      case .companyNotFoundError: return 1
      case .invalidExpirationDateError: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _error: Metro_Wallet_Private_V2_AddCreditedActivityResponse.Error? = nil
}

#if swift(>=4.2)

extension Metro_Wallet_Private_V2_AddCreditedActivityResponse.Error: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Wallet_Private_V2_AddCreditedActivityResponse.Error] = [
    .unknownError,
    .companyNotFoundError,
    .invalidExpirationDateError,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Metro_Wallet_Private_V2_AddCreditedActivityRequest: @unchecked Sendable {}
extension Metro_Wallet_Private_V2_AddCreditedActivityResponse: @unchecked Sendable {}
extension Metro_Wallet_Private_V2_AddCreditedActivityResponse.Error: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metro.wallet.private.v2"

extension Metro_Wallet_Private_V2_AddCreditedActivityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddCreditedActivityRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "id_project"),
    2: .standard(proto: "id_company_ext"),
    3: .standard(proto: "id_business_ext"),
    4: .standard(proto: "id_external"),
    5: .standard(proto: "fund_name"),
    6: .standard(proto: "fund_type"),
    7: .same(proto: "amount"),
    8: .standard(proto: "expiration_date"),
    9: .same(proto: "note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.idProject) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.idCompanyExt) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.idBusinessExt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.idExternal) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.fundName) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.fundType) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.amount) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._expirationDate) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.note) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.idProject.isEmpty {
      try visitor.visitSingularStringField(value: self.idProject, fieldNumber: 1)
    }
    if !self.idCompanyExt.isEmpty {
      try visitor.visitSingularStringField(value: self.idCompanyExt, fieldNumber: 2)
    }
    if !self.idBusinessExt.isEmpty {
      try visitor.visitSingularStringField(value: self.idBusinessExt, fieldNumber: 3)
    }
    if !self.idExternal.isEmpty {
      try visitor.visitSingularStringField(value: self.idExternal, fieldNumber: 4)
    }
    if !self.fundName.isEmpty {
      try visitor.visitSingularStringField(value: self.fundName, fieldNumber: 5)
    }
    if self.fundType != .unknownFundType {
      try visitor.visitSingularEnumField(value: self.fundType, fieldNumber: 6)
    }
    if self.amount != 0 {
      try visitor.visitSingularDoubleField(value: self.amount, fieldNumber: 7)
    }
    try { if let v = self._expirationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Wallet_Private_V2_AddCreditedActivityRequest, rhs: Metro_Wallet_Private_V2_AddCreditedActivityRequest) -> Bool {
    if lhs.idProject != rhs.idProject {return false}
    if lhs.idCompanyExt != rhs.idCompanyExt {return false}
    if lhs.idBusinessExt != rhs.idBusinessExt {return false}
    if lhs.idExternal != rhs.idExternal {return false}
    if lhs.fundName != rhs.fundName {return false}
    if lhs.fundType != rhs.fundType {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs._expirationDate != rhs._expirationDate {return false}
    if lhs.note != rhs.note {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Wallet_Private_V2_AddCreditedActivityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddCreditedActivityResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Wallet_Private_V2_AddCreditedActivityResponse, rhs: Metro_Wallet_Private_V2_AddCreditedActivityResponse) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Wallet_Private_V2_AddCreditedActivityResponse.Error: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_ERROR"),
    1: .same(proto: "COMPANY_NOT_FOUND_ERROR"),
    2: .same(proto: "INVALID_EXPIRATION_DATE_ERROR"),
  ]
}

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: wallet_v2/wallet.private.v2.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Metro_Wallet_Private_V2_WalletPrivateV2Client`, then call methods of this protocol to make API calls.
public protocol Metro_Wallet_Private_V2_WalletPrivateV2ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol? { get }

  func addCreditedActivity(
    _ request: Metro_Wallet_Private_V2_AddCreditedActivityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Wallet_Private_V2_AddCreditedActivityRequest, Metro_Wallet_Private_V2_AddCreditedActivityResponse>
}

extension Metro_Wallet_Private_V2_WalletPrivateV2ClientProtocol {
  public var serviceName: String {
    return "metro.wallet.private.v2.WalletPrivateV2"
  }

  /// Unary call to AddCreditedActivity
  ///
  /// - Parameters:
  ///   - request: Request to send to AddCreditedActivity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addCreditedActivity(
    _ request: Metro_Wallet_Private_V2_AddCreditedActivityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Wallet_Private_V2_AddCreditedActivityRequest, Metro_Wallet_Private_V2_AddCreditedActivityResponse> {
    return self.makeUnaryCall(
      path: Metro_Wallet_Private_V2_WalletPrivateV2ClientMetadata.Methods.addCreditedActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCreditedActivityInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Wallet_Private_V2_WalletPrivateV2Client: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Wallet_Private_V2_WalletPrivateV2NIOClient")
public final class Metro_Wallet_Private_V2_WalletPrivateV2Client: Metro_Wallet_Private_V2_WalletPrivateV2ClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.wallet.private.v2.WalletPrivateV2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Wallet_Private_V2_WalletPrivateV2NIOClient: Metro_Wallet_Private_V2_WalletPrivateV2ClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.wallet.private.v2.WalletPrivateV2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Wallet_Private_V2_WalletPrivateV2AsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol? { get }

  func makeAddCreditedActivityCall(
    _ request: Metro_Wallet_Private_V2_AddCreditedActivityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Wallet_Private_V2_AddCreditedActivityRequest, Metro_Wallet_Private_V2_AddCreditedActivityResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Wallet_Private_V2_WalletPrivateV2AsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Wallet_Private_V2_WalletPrivateV2ClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAddCreditedActivityCall(
    _ request: Metro_Wallet_Private_V2_AddCreditedActivityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Wallet_Private_V2_AddCreditedActivityRequest, Metro_Wallet_Private_V2_AddCreditedActivityResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Wallet_Private_V2_WalletPrivateV2ClientMetadata.Methods.addCreditedActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCreditedActivityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Wallet_Private_V2_WalletPrivateV2AsyncClientProtocol {
  public func addCreditedActivity(
    _ request: Metro_Wallet_Private_V2_AddCreditedActivityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Wallet_Private_V2_AddCreditedActivityResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Wallet_Private_V2_WalletPrivateV2ClientMetadata.Methods.addCreditedActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCreditedActivityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Wallet_Private_V2_WalletPrivateV2AsyncClient: Metro_Wallet_Private_V2_WalletPrivateV2AsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Wallet_Private_V2_WalletPrivateV2ClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addCreditedActivity'.
  func makeAddCreditedActivityInterceptors() -> [ClientInterceptor<Metro_Wallet_Private_V2_AddCreditedActivityRequest, Metro_Wallet_Private_V2_AddCreditedActivityResponse>]
}

public enum Metro_Wallet_Private_V2_WalletPrivateV2ClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WalletPrivateV2",
    fullName: "metro.wallet.private.v2.WalletPrivateV2",
    methods: [
      Metro_Wallet_Private_V2_WalletPrivateV2ClientMetadata.Methods.addCreditedActivity,
    ]
  )

  public enum Methods {
    public static let addCreditedActivity = GRPCMethodDescriptor(
      name: "AddCreditedActivity",
      path: "/metro.wallet.private.v2.WalletPrivateV2/AddCreditedActivity",
      type: GRPCCallType.unary
    )
  }
}


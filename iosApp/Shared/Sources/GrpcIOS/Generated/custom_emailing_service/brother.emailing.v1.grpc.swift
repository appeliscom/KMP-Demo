//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: custom_emailing_service/brother.emailing.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Brother_Emailing_V1_BrotherCustomerContactClient`, then call methods of this protocol to make API calls.
public protocol Brother_Emailing_V1_BrotherCustomerContactClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol? { get }

  func contactSupport(
    _ request: Brother_Emailing_V1_ContactSupportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Brother_Emailing_V1_ContactSupportRequest, Brother_Emailing_V1_ContactSupportResponse>
}

extension Brother_Emailing_V1_BrotherCustomerContactClientProtocol {
  public var serviceName: String {
    return "brother.emailing.v1.BrotherCustomerContact"
  }

  /// Unary call to ContactSupport
  ///
  /// - Parameters:
  ///   - request: Request to send to ContactSupport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func contactSupport(
    _ request: Brother_Emailing_V1_ContactSupportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Brother_Emailing_V1_ContactSupportRequest, Brother_Emailing_V1_ContactSupportResponse> {
    return self.makeUnaryCall(
      path: Brother_Emailing_V1_BrotherCustomerContactClientMetadata.Methods.contactSupport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContactSupportInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Brother_Emailing_V1_BrotherCustomerContactClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Brother_Emailing_V1_BrotherCustomerContactNIOClient")
public final class Brother_Emailing_V1_BrotherCustomerContactClient: Brother_Emailing_V1_BrotherCustomerContactClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the brother.emailing.v1.BrotherCustomerContact service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Brother_Emailing_V1_BrotherCustomerContactNIOClient: Brother_Emailing_V1_BrotherCustomerContactClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol?

  /// Creates a client for the brother.emailing.v1.BrotherCustomerContact service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Brother_Emailing_V1_BrotherCustomerContactAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol? { get }

  func makeContactSupportCall(
    _ request: Brother_Emailing_V1_ContactSupportRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Brother_Emailing_V1_ContactSupportRequest, Brother_Emailing_V1_ContactSupportResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Brother_Emailing_V1_BrotherCustomerContactAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Brother_Emailing_V1_BrotherCustomerContactClientMetadata.serviceDescriptor
  }

  public var interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeContactSupportCall(
    _ request: Brother_Emailing_V1_ContactSupportRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Brother_Emailing_V1_ContactSupportRequest, Brother_Emailing_V1_ContactSupportResponse> {
    return self.makeAsyncUnaryCall(
      path: Brother_Emailing_V1_BrotherCustomerContactClientMetadata.Methods.contactSupport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContactSupportInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Brother_Emailing_V1_BrotherCustomerContactAsyncClientProtocol {
  public func contactSupport(
    _ request: Brother_Emailing_V1_ContactSupportRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Brother_Emailing_V1_ContactSupportResponse {
    return try await self.performAsyncUnaryCall(
      path: Brother_Emailing_V1_BrotherCustomerContactClientMetadata.Methods.contactSupport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContactSupportInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Brother_Emailing_V1_BrotherCustomerContactAsyncClient: Brother_Emailing_V1_BrotherCustomerContactAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Brother_Emailing_V1_BrotherCustomerContactClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'contactSupport'.
  func makeContactSupportInterceptors() -> [ClientInterceptor<Brother_Emailing_V1_ContactSupportRequest, Brother_Emailing_V1_ContactSupportResponse>]
}

public enum Brother_Emailing_V1_BrotherCustomerContactClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BrotherCustomerContact",
    fullName: "brother.emailing.v1.BrotherCustomerContact",
    methods: [
      Brother_Emailing_V1_BrotherCustomerContactClientMetadata.Methods.contactSupport,
    ]
  )

  public enum Methods {
    public static let contactSupport = GRPCMethodDescriptor(
      name: "ContactSupport",
      path: "/brother.emailing.v1.BrotherCustomerContact/ContactSupport",
      type: GRPCCallType.unary
    )
  }
}


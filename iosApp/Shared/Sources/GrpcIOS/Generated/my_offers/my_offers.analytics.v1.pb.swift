// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: my_offers/my_offers.analytics.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_MyOffers_V1_GetAnalyticsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idProject: String = String()

  public var timerange: Appelis_TimeRange {
    get {return _timerange ?? Appelis_TimeRange()}
    set {_timerange = newValue}
  }
  /// Returns true if `timerange` has been explicitly set.
  public var hasTimerange: Bool {return self._timerange != nil}
  /// Clears the value of `timerange`. Subsequent reads from it will return its default value.
  public mutating func clearTimerange() {self._timerange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timerange: Appelis_TimeRange? = nil
}

public struct Appelis_MyOffers_V1_GetAnalyticsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupMapped: [Appelis_MyOffers_V1_AnalyticsData] = []

  public var notGroupMapped: [Appelis_MyOffers_V1_AnalyticsData] = []

  public var limited: [Appelis_MyOffers_V1_AnalyticsData] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_MyOffers_V1_AnalyticsData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var usedCount: UInt32 = 0

  public var assignedCount: UInt32 = 0

  public var type: Appelis_MyOffers_V1_AnalyticsData.OfferType = .unknown

  public var id: String = String()

  public var ean: String = String()

  public var name: String = String()

  public var offerCategoryIDGroup: String = String()

  public var validity: Appelis_TimeRange {
    get {return _validity ?? Appelis_TimeRange()}
    set {_validity = newValue}
  }
  /// Returns true if `validity` has been explicitly set.
  public var hasValidity: Bool {return self._validity != nil}
  /// Clears the value of `validity`. Subsequent reads from it will return its default value.
  public mutating func clearValidity() {self._validity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OfferType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case once // = 1
    case perCount // = 2
    case infinity // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .once
      case 2: self = .perCount
      case 3: self = .infinity
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .once: return 1
      case .perCount: return 2
      case .infinity: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _validity: Appelis_TimeRange? = nil
}

#if swift(>=4.2)

extension Appelis_MyOffers_V1_AnalyticsData.OfferType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_MyOffers_V1_AnalyticsData.OfferType] = [
    .unknown,
    .once,
    .perCount,
    .infinity,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_MyOffers_V1_GetAnalyticsRequest: @unchecked Sendable {}
extension Appelis_MyOffers_V1_GetAnalyticsResponse: @unchecked Sendable {}
extension Appelis_MyOffers_V1_AnalyticsData: @unchecked Sendable {}
extension Appelis_MyOffers_V1_AnalyticsData.OfferType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.my_offers.v1"

extension Appelis_MyOffers_V1_GetAnalyticsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAnalyticsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "id_project"),
    2: .same(proto: "timerange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.idProject) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timerange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.idProject.isEmpty {
      try visitor.visitSingularStringField(value: self.idProject, fieldNumber: 1)
    }
    try { if let v = self._timerange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_MyOffers_V1_GetAnalyticsRequest, rhs: Appelis_MyOffers_V1_GetAnalyticsRequest) -> Bool {
    if lhs.idProject != rhs.idProject {return false}
    if lhs._timerange != rhs._timerange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_MyOffers_V1_GetAnalyticsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAnalyticsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupMapped"),
    2: .same(proto: "notGroupMapped"),
    3: .same(proto: "limited"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groupMapped) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.notGroupMapped) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.limited) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupMapped.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupMapped, fieldNumber: 1)
    }
    if !self.notGroupMapped.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.notGroupMapped, fieldNumber: 2)
    }
    if !self.limited.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.limited, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_MyOffers_V1_GetAnalyticsResponse, rhs: Appelis_MyOffers_V1_GetAnalyticsResponse) -> Bool {
    if lhs.groupMapped != rhs.groupMapped {return false}
    if lhs.notGroupMapped != rhs.notGroupMapped {return false}
    if lhs.limited != rhs.limited {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_MyOffers_V1_AnalyticsData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnalyticsData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "used_count"),
    2: .standard(proto: "assigned_count"),
    3: .same(proto: "type"),
    4: .same(proto: "id"),
    5: .same(proto: "ean"),
    6: .same(proto: "name"),
    7: .standard(proto: "offer_category_id_group"),
    8: .same(proto: "validity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.usedCount) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.assignedCount) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ean) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.offerCategoryIDGroup) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._validity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.usedCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.usedCount, fieldNumber: 1)
    }
    if self.assignedCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.assignedCount, fieldNumber: 2)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    if !self.ean.isEmpty {
      try visitor.visitSingularStringField(value: self.ean, fieldNumber: 5)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 6)
    }
    if !self.offerCategoryIDGroup.isEmpty {
      try visitor.visitSingularStringField(value: self.offerCategoryIDGroup, fieldNumber: 7)
    }
    try { if let v = self._validity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_MyOffers_V1_AnalyticsData, rhs: Appelis_MyOffers_V1_AnalyticsData) -> Bool {
    if lhs.usedCount != rhs.usedCount {return false}
    if lhs.assignedCount != rhs.assignedCount {return false}
    if lhs.type != rhs.type {return false}
    if lhs.id != rhs.id {return false}
    if lhs.ean != rhs.ean {return false}
    if lhs.name != rhs.name {return false}
    if lhs.offerCategoryIDGroup != rhs.offerCategoryIDGroup {return false}
    if lhs._validity != rhs._validity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_MyOffers_V1_AnalyticsData.OfferType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ONCE"),
    2: .same(proto: "PER_COUNT"),
    3: .same(proto: "INFINITY"),
  ]
}

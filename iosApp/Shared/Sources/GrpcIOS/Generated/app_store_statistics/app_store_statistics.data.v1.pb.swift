// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: app_store_statistics/app_store_statistics.data.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_AppStoreStatistics_Data_V1_DeviceInstalls {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ios: UInt32 = 0

  public var android: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Android and iOS installs per day
public struct Appelis_AppStoreStatistics_Data_V1_DailyInstalls {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var day: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _day ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_day = newValue}
  }
  /// Returns true if `day` has been explicitly set.
  public var hasDay: Bool {return self._day != nil}
  /// Clears the value of `day`. Subsequent reads from it will return its default value.
  public mutating func clearDay() {self._day = nil}

  public var installs: Appelis_AppStoreStatistics_Data_V1_DeviceInstalls {
    get {return _installs ?? Appelis_AppStoreStatistics_Data_V1_DeviceInstalls()}
    set {_installs = newValue}
  }
  /// Returns true if `installs` has been explicitly set.
  public var hasInstalls: Bool {return self._installs != nil}
  /// Clears the value of `installs`. Subsequent reads from it will return its default value.
  public mutating func clearInstalls() {self._installs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _day: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _installs: Appelis_AppStoreStatistics_Data_V1_DeviceInstalls? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_AppStoreStatistics_Data_V1_DeviceInstalls: @unchecked Sendable {}
extension Appelis_AppStoreStatistics_Data_V1_DailyInstalls: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.app_store_statistics.data.v1"

extension Appelis_AppStoreStatistics_Data_V1_DeviceInstalls: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceInstalls"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ios"),
    2: .same(proto: "android"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.ios) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.android) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ios != 0 {
      try visitor.visitSingularUInt32Field(value: self.ios, fieldNumber: 1)
    }
    if self.android != 0 {
      try visitor.visitSingularUInt32Field(value: self.android, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_AppStoreStatistics_Data_V1_DeviceInstalls, rhs: Appelis_AppStoreStatistics_Data_V1_DeviceInstalls) -> Bool {
    if lhs.ios != rhs.ios {return false}
    if lhs.android != rhs.android {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_AppStoreStatistics_Data_V1_DailyInstalls: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DailyInstalls"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "day"),
    2: .same(proto: "installs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._day) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._installs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._day {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._installs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_AppStoreStatistics_Data_V1_DailyInstalls, rhs: Appelis_AppStoreStatistics_Data_V1_DailyInstalls) -> Bool {
    if lhs._day != rhs._day {return false}
    if lhs._installs != rhs._installs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

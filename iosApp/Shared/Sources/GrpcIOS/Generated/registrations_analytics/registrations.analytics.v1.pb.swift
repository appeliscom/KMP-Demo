// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: registrations_analytics/registrations.analytics.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_Registrations_V1_GetRegistrationsByCompanyTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var timerange: Appelis_TimeRange {
    get {return _timerange ?? Appelis_TimeRange()}
    set {_timerange = newValue}
  }
  /// Returns true if `timerange` has been explicitly set.
  public var hasTimerange: Bool {return self._timerange != nil}
  /// Clears the value of `timerange`. Subsequent reads from it will return its default value.
  public mutating func clearTimerange() {self._timerange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _timerange: Appelis_TimeRange? = nil
}

public struct Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var data: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case data(Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.OneOf_Payload, rhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct CompanyTypeStats {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var all: Int64 = 0

    public var diff: Int64 = 0

    public var salesforces: Int64 = 0

    public var salesforcesDiff: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RegisteredCompaniesStats {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// all / horeca / sco / traders
    public var stats: Dictionary<String,Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.CompanyTypeStats> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Appelis_Registrations_V1_GetRegistrationsByStoreRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var timerange: Appelis_TimeRange {
    get {return _timerange ?? Appelis_TimeRange()}
    set {_timerange = newValue}
  }
  /// Returns true if `timerange` has been explicitly set.
  public var hasTimerange: Bool {return self._timerange != nil}
  /// Clears the value of `timerange`. Subsequent reads from it will return its default value.
  public mutating func clearTimerange() {self._timerange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _timerange: Appelis_TimeRange? = nil
}

public struct Appelis_Registrations_V1_GetRegistrationsByStoreResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var data: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case data(Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.OneOf_Payload, rhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct RegistrationsByStore {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String = String()

    public var all: Int64 = 0

    public var diff: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RegisteredCompaniesStats {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var stats: [Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegistrationsByStore] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeRequest: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.CompanyTypeStats: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByStoreRequest: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByStoreResponse: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByStoreResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegistrationsByStore: @unchecked Sendable {}
extension Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.registrations.v1"

extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRegistrationsByCompanyTypeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    3: .same(proto: "timerange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timerange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timerange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeRequest, rhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._timerange != rhs._timerange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRegistrationsByCompanyTypeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenErr"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse, rhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.CompanyTypeStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.protoMessageName + ".CompanyTypeStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "all"),
    2: .same(proto: "diff"),
    3: .same(proto: "salesforces"),
    4: .standard(proto: "salesforces_diff"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.all) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.diff) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.salesforces) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.salesforcesDiff) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.all != 0 {
      try visitor.visitSingularInt64Field(value: self.all, fieldNumber: 1)
    }
    if self.diff != 0 {
      try visitor.visitSingularInt64Field(value: self.diff, fieldNumber: 2)
    }
    if self.salesforces != 0 {
      try visitor.visitSingularInt64Field(value: self.salesforces, fieldNumber: 3)
    }
    if self.salesforcesDiff != 0 {
      try visitor.visitSingularInt64Field(value: self.salesforcesDiff, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.CompanyTypeStats, rhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.CompanyTypeStats) -> Bool {
    if lhs.all != rhs.all {return false}
    if lhs.diff != rhs.diff {return false}
    if lhs.salesforces != rhs.salesforces {return false}
    if lhs.salesforcesDiff != rhs.salesforcesDiff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.protoMessageName + ".RegisteredCompaniesStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.CompanyTypeStats>.self, value: &self.stats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stats.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.CompanyTypeStats>.self, value: self.stats, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats, rhs: Appelis_Registrations_V1_GetRegistrationsByCompanyTypeResponse.RegisteredCompaniesStats) -> Bool {
    if lhs.stats != rhs.stats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Registrations_V1_GetRegistrationsByStoreRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRegistrationsByStoreRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    3: .same(proto: "timerange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timerange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timerange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByStoreRequest, rhs: Appelis_Registrations_V1_GetRegistrationsByStoreRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._timerange != rhs._timerange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Registrations_V1_GetRegistrationsByStoreResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRegistrationsByStoreResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenErr"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse, rhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegistrationsByStore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Appelis_Registrations_V1_GetRegistrationsByStoreResponse.protoMessageName + ".RegistrationsByStore"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "all"),
    3: .same(proto: "diff"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.all) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.diff) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.all != 0 {
      try visitor.visitSingularInt64Field(value: self.all, fieldNumber: 2)
    }
    if self.diff != 0 {
      try visitor.visitSingularInt64Field(value: self.diff, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegistrationsByStore, rhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegistrationsByStore) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.all != rhs.all {return false}
    if lhs.diff != rhs.diff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Appelis_Registrations_V1_GetRegistrationsByStoreResponse.protoMessageName + ".RegisteredCompaniesStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.stats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stats, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats, rhs: Appelis_Registrations_V1_GetRegistrationsByStoreResponse.RegisteredCompaniesStats) -> Bool {
    if lhs.stats != rhs.stats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

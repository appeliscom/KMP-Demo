//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: metro_signIn_service/multiSignin.v2.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Metro_Signin_V2_MultiLoginVerificationClient`, then call methods of this protocol to make API calls.
public protocol Metro_Signin_V2_MultiLoginVerificationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol? { get }

  func sendVerificationEmail(
    _ request: Metro_Signin_V2_SendVerificationEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Signin_V2_SendVerificationEmailRequest, Metro_Signin_V2_SendVerificationEmailResponse>
}

extension Metro_Signin_V2_MultiLoginVerificationClientProtocol {
  public var serviceName: String {
    return "metro.signin.v2.MultiLoginVerification"
  }

  /// here will be only our email verification
  ///
  /// - Parameters:
  ///   - request: Request to send to SendVerificationEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendVerificationEmail(
    _ request: Metro_Signin_V2_SendVerificationEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Signin_V2_SendVerificationEmailRequest, Metro_Signin_V2_SendVerificationEmailResponse> {
    return self.makeUnaryCall(
      path: Metro_Signin_V2_MultiLoginVerificationClientMetadata.Methods.sendVerificationEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendVerificationEmailInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Signin_V2_MultiLoginVerificationClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Signin_V2_MultiLoginVerificationNIOClient")
public final class Metro_Signin_V2_MultiLoginVerificationClient: Metro_Signin_V2_MultiLoginVerificationClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.signin.v2.MultiLoginVerification service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Signin_V2_MultiLoginVerificationNIOClient: Metro_Signin_V2_MultiLoginVerificationClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.signin.v2.MultiLoginVerification service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Signin_V2_MultiLoginVerificationAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol? { get }

  func makeSendVerificationEmailCall(
    _ request: Metro_Signin_V2_SendVerificationEmailRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_SendVerificationEmailRequest, Metro_Signin_V2_SendVerificationEmailResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Signin_V2_MultiLoginVerificationAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Signin_V2_MultiLoginVerificationClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSendVerificationEmailCall(
    _ request: Metro_Signin_V2_SendVerificationEmailRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_SendVerificationEmailRequest, Metro_Signin_V2_SendVerificationEmailResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginVerificationClientMetadata.Methods.sendVerificationEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendVerificationEmailInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Signin_V2_MultiLoginVerificationAsyncClientProtocol {
  public func sendVerificationEmail(
    _ request: Metro_Signin_V2_SendVerificationEmailRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Signin_V2_SendVerificationEmailResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginVerificationClientMetadata.Methods.sendVerificationEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendVerificationEmailInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Signin_V2_MultiLoginVerificationAsyncClient: Metro_Signin_V2_MultiLoginVerificationAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Signin_V2_MultiLoginVerificationClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sendVerificationEmail'.
  func makeSendVerificationEmailInterceptors() -> [ClientInterceptor<Metro_Signin_V2_SendVerificationEmailRequest, Metro_Signin_V2_SendVerificationEmailResponse>]
}

public enum Metro_Signin_V2_MultiLoginVerificationClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MultiLoginVerification",
    fullName: "metro.signin.v2.MultiLoginVerification",
    methods: [
      Metro_Signin_V2_MultiLoginVerificationClientMetadata.Methods.sendVerificationEmail,
    ]
  )

  public enum Methods {
    public static let sendVerificationEmail = GRPCMethodDescriptor(
      name: "SendVerificationEmail",
      path: "/metro.signin.v2.MultiLoginVerification/SendVerificationEmail",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Metro_Signin_V2_MultiLoginUserListingClient`, then call methods of this protocol to make API calls.
public protocol Metro_Signin_V2_MultiLoginUserListingClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol? { get }

  func getUsersForEmail(
    _ request: Metro_Signin_V2_GetUsersForEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Signin_V2_GetUsersForEmailRequest, Metro_Signin_V2_GetUsersForEmailResponse>

  func getUsersForFirebaseToken(
    _ request: Metro_Signin_V2_GetUsersForFirebaseTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Signin_V2_GetUsersForFirebaseTokenRequest, Metro_Signin_V2_GetUsersForFirebaseTokenResponse>
}

extension Metro_Signin_V2_MultiLoginUserListingClientProtocol {
  public var serviceName: String {
    return "metro.signin.v2.MultiLoginUserListing"
  }

  /// Listing users for verified email
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsersForEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUsersForEmail(
    _ request: Metro_Signin_V2_GetUsersForEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Signin_V2_GetUsersForEmailRequest, Metro_Signin_V2_GetUsersForEmailResponse> {
    return self.makeUnaryCall(
      path: Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersForEmailInterceptors() ?? []
    )
  }

  /// listing users for firebase verified
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsersForFirebaseToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUsersForFirebaseToken(
    _ request: Metro_Signin_V2_GetUsersForFirebaseTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Signin_V2_GetUsersForFirebaseTokenRequest, Metro_Signin_V2_GetUsersForFirebaseTokenResponse> {
    return self.makeUnaryCall(
      path: Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForFirebaseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersForFirebaseTokenInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Signin_V2_MultiLoginUserListingClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Signin_V2_MultiLoginUserListingNIOClient")
public final class Metro_Signin_V2_MultiLoginUserListingClient: Metro_Signin_V2_MultiLoginUserListingClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.signin.v2.MultiLoginUserListing service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Signin_V2_MultiLoginUserListingNIOClient: Metro_Signin_V2_MultiLoginUserListingClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.signin.v2.MultiLoginUserListing service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Signin_V2_MultiLoginUserListingAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol? { get }

  func makeGetUsersForEmailCall(
    _ request: Metro_Signin_V2_GetUsersForEmailRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_GetUsersForEmailRequest, Metro_Signin_V2_GetUsersForEmailResponse>

  func makeGetUsersForFirebaseTokenCall(
    _ request: Metro_Signin_V2_GetUsersForFirebaseTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_GetUsersForFirebaseTokenRequest, Metro_Signin_V2_GetUsersForFirebaseTokenResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Signin_V2_MultiLoginUserListingAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Signin_V2_MultiLoginUserListingClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetUsersForEmailCall(
    _ request: Metro_Signin_V2_GetUsersForEmailRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_GetUsersForEmailRequest, Metro_Signin_V2_GetUsersForEmailResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersForEmailInterceptors() ?? []
    )
  }

  public func makeGetUsersForFirebaseTokenCall(
    _ request: Metro_Signin_V2_GetUsersForFirebaseTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_GetUsersForFirebaseTokenRequest, Metro_Signin_V2_GetUsersForFirebaseTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForFirebaseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersForFirebaseTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Signin_V2_MultiLoginUserListingAsyncClientProtocol {
  public func getUsersForEmail(
    _ request: Metro_Signin_V2_GetUsersForEmailRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Signin_V2_GetUsersForEmailResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersForEmailInterceptors() ?? []
    )
  }

  public func getUsersForFirebaseToken(
    _ request: Metro_Signin_V2_GetUsersForFirebaseTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Signin_V2_GetUsersForFirebaseTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForFirebaseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersForFirebaseTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Signin_V2_MultiLoginUserListingAsyncClient: Metro_Signin_V2_MultiLoginUserListingAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Signin_V2_MultiLoginUserListingClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getUsersForEmail'.
  func makeGetUsersForEmailInterceptors() -> [ClientInterceptor<Metro_Signin_V2_GetUsersForEmailRequest, Metro_Signin_V2_GetUsersForEmailResponse>]

  /// - Returns: Interceptors to use when invoking 'getUsersForFirebaseToken'.
  func makeGetUsersForFirebaseTokenInterceptors() -> [ClientInterceptor<Metro_Signin_V2_GetUsersForFirebaseTokenRequest, Metro_Signin_V2_GetUsersForFirebaseTokenResponse>]
}

public enum Metro_Signin_V2_MultiLoginUserListingClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MultiLoginUserListing",
    fullName: "metro.signin.v2.MultiLoginUserListing",
    methods: [
      Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForEmail,
      Metro_Signin_V2_MultiLoginUserListingClientMetadata.Methods.getUsersForFirebaseToken,
    ]
  )

  public enum Methods {
    public static let getUsersForEmail = GRPCMethodDescriptor(
      name: "GetUsersForEmail",
      path: "/metro.signin.v2.MultiLoginUserListing/GetUsersForEmail",
      type: GRPCCallType.unary
    )

    public static let getUsersForFirebaseToken = GRPCMethodDescriptor(
      name: "GetUsersForFirebaseToken",
      path: "/metro.signin.v2.MultiLoginUserListing/GetUsersForFirebaseToken",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Metro_Signin_V2_MultiLoginClient`, then call methods of this protocol to make API calls.
public protocol Metro_Signin_V2_MultiLoginClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol? { get }

  func emailLogin(
    _ request: Metro_Signin_V2_EmailLoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Signin_V2_EmailLoginRequest, Metro_Signin_V2_EmailLoginResponse>

  func firebaseMultiLogin(
    _ request: Metro_Signin_V2_FirebaseMultiLoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Signin_V2_FirebaseMultiLoginRequest, Metro_Signin_V2_FirebaseMultiLoginResponse>
}

extension Metro_Signin_V2_MultiLoginClientProtocol {
  public var serviceName: String {
    return "metro.signin.v2.MultiLogin"
  }

  /// login with email verification
  ///
  /// - Parameters:
  ///   - request: Request to send to EmailLogin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func emailLogin(
    _ request: Metro_Signin_V2_EmailLoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Signin_V2_EmailLoginRequest, Metro_Signin_V2_EmailLoginResponse> {
    return self.makeUnaryCall(
      path: Metro_Signin_V2_MultiLoginClientMetadata.Methods.emailLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmailLoginInterceptors() ?? []
    )
  }

  /// login with firebase token
  ///
  /// - Parameters:
  ///   - request: Request to send to FirebaseMultiLogin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func firebaseMultiLogin(
    _ request: Metro_Signin_V2_FirebaseMultiLoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Signin_V2_FirebaseMultiLoginRequest, Metro_Signin_V2_FirebaseMultiLoginResponse> {
    return self.makeUnaryCall(
      path: Metro_Signin_V2_MultiLoginClientMetadata.Methods.firebaseMultiLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFirebaseMultiLoginInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Signin_V2_MultiLoginClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Signin_V2_MultiLoginNIOClient")
public final class Metro_Signin_V2_MultiLoginClient: Metro_Signin_V2_MultiLoginClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.signin.v2.MultiLogin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Signin_V2_MultiLoginNIOClient: Metro_Signin_V2_MultiLoginClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.signin.v2.MultiLogin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Signin_V2_MultiLoginAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol? { get }

  func makeEmailLoginCall(
    _ request: Metro_Signin_V2_EmailLoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_EmailLoginRequest, Metro_Signin_V2_EmailLoginResponse>

  func makeFirebaseMultiLoginCall(
    _ request: Metro_Signin_V2_FirebaseMultiLoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_FirebaseMultiLoginRequest, Metro_Signin_V2_FirebaseMultiLoginResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Signin_V2_MultiLoginAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Signin_V2_MultiLoginClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeEmailLoginCall(
    _ request: Metro_Signin_V2_EmailLoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_EmailLoginRequest, Metro_Signin_V2_EmailLoginResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginClientMetadata.Methods.emailLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmailLoginInterceptors() ?? []
    )
  }

  public func makeFirebaseMultiLoginCall(
    _ request: Metro_Signin_V2_FirebaseMultiLoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Signin_V2_FirebaseMultiLoginRequest, Metro_Signin_V2_FirebaseMultiLoginResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginClientMetadata.Methods.firebaseMultiLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFirebaseMultiLoginInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Signin_V2_MultiLoginAsyncClientProtocol {
  public func emailLogin(
    _ request: Metro_Signin_V2_EmailLoginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Signin_V2_EmailLoginResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginClientMetadata.Methods.emailLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmailLoginInterceptors() ?? []
    )
  }

  public func firebaseMultiLogin(
    _ request: Metro_Signin_V2_FirebaseMultiLoginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Signin_V2_FirebaseMultiLoginResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Signin_V2_MultiLoginClientMetadata.Methods.firebaseMultiLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFirebaseMultiLoginInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Signin_V2_MultiLoginAsyncClient: Metro_Signin_V2_MultiLoginAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Signin_V2_MultiLoginClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'emailLogin'.
  func makeEmailLoginInterceptors() -> [ClientInterceptor<Metro_Signin_V2_EmailLoginRequest, Metro_Signin_V2_EmailLoginResponse>]

  /// - Returns: Interceptors to use when invoking 'firebaseMultiLogin'.
  func makeFirebaseMultiLoginInterceptors() -> [ClientInterceptor<Metro_Signin_V2_FirebaseMultiLoginRequest, Metro_Signin_V2_FirebaseMultiLoginResponse>]
}

public enum Metro_Signin_V2_MultiLoginClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MultiLogin",
    fullName: "metro.signin.v2.MultiLogin",
    methods: [
      Metro_Signin_V2_MultiLoginClientMetadata.Methods.emailLogin,
      Metro_Signin_V2_MultiLoginClientMetadata.Methods.firebaseMultiLogin,
    ]
  )

  public enum Methods {
    public static let emailLogin = GRPCMethodDescriptor(
      name: "EmailLogin",
      path: "/metro.signin.v2.MultiLogin/EmailLogin",
      type: GRPCCallType.unary
    )

    public static let firebaseMultiLogin = GRPCMethodDescriptor(
      name: "FirebaseMultiLogin",
      path: "/metro.signin.v2.MultiLogin/FirebaseMultiLogin",
      type: GRPCCallType.unary
    )
  }
}


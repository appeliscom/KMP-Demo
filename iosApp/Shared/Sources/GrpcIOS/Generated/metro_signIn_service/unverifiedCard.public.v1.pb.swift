// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: metro_signIn_service/unverifiedCard.public.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Metro_UnverifiedCard_Public_V1_AddCardRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var barcode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_UnverifiedCard_Public_V1_AddCardResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_UnverifiedCard_Public_V1_AddCardResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var addCardError: Metro_UnverifiedCard_Public_V1_AddCardResponse.AddCardError {
    get {
      if case .addCardError(let v)? = payload {return v}
      return .unknown
    }
    set {payload = .addCardError(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case addCardError(Metro_UnverifiedCard_Public_V1_AddCardResponse.AddCardError)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_UnverifiedCard_Public_V1_AddCardResponse.OneOf_Payload, rhs: Metro_UnverifiedCard_Public_V1_AddCardResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.addCardError, .addCardError): return {
        guard case .addCardError(let l) = lhs, case .addCardError(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum AddCardError: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case invalidBardcode // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .invalidBardcode
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .invalidBardcode: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Metro_UnverifiedCard_Public_V1_AddCardResponse.AddCardError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_UnverifiedCard_Public_V1_AddCardResponse.AddCardError] = [
    .unknown,
    .invalidBardcode,
  ]
}

#endif  // swift(>=4.2)

public struct Metro_UnverifiedCard_Public_V1_UpdateCardRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var storeNo: UInt32 = 0

  public var custNo: UInt32 = 0

  public var cardholderNo: UInt32 = 0

  public var timestampKey: Metro_UnverifiedCard_Data_V1_CardTimestampKey = .unknown

  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Metro_UnverifiedCard_Public_V1_UpdateCardResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_UnverifiedCard_Public_V1_UpdateCardResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case permErr(Appelis_Identity_Common_V1_PermissionError)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_UnverifiedCard_Public_V1_UpdateCardResponse.OneOf_Payload, rhs: Metro_UnverifiedCard_Public_V1_UpdateCardResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Metro_UnverifiedCard_Public_V1_GetCardRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_UnverifiedCard_Public_V1_GetCardResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_UnverifiedCard_Public_V1_GetCardResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var card: Metro_UnverifiedCard_Public_V1_GetCardResponse.Card {
    get {
      if case .card(let v)? = payload {return v}
      return Metro_UnverifiedCard_Public_V1_GetCardResponse.Card()
    }
    set {payload = .card(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case card(Metro_UnverifiedCard_Public_V1_GetCardResponse.Card)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetCardResponse.OneOf_Payload, rhs: Metro_UnverifiedCard_Public_V1_GetCardResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.card, .card): return {
        guard case .card(let l) = lhs, case .card(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum ContactType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case phone // = 1
    case email // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .phone
      case 2: self = .email
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .phone: return 1
      case .email: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Card {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var barcode: String = String()

    public var status: Metro_UnverifiedCard_Data_V1_CardStatus = .unknown

    public var contactType: Metro_UnverifiedCard_Public_V1_GetCardResponse.ContactType = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Metro_UnverifiedCard_Public_V1_GetCardResponse.ContactType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_UnverifiedCard_Public_V1_GetCardResponse.ContactType] = [
    .unknown,
    .phone,
    .email,
  ]
}

#endif  // swift(>=4.2)

public struct Metro_UnverifiedCard_Public_V1_RemoveCardRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_UnverifiedCard_Public_V1_RemoveCardResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {return _tokenErr ?? .unknownTokenError}
    set {_tokenErr = newValue}
  }
  /// Returns true if `tokenErr` has been explicitly set.
  public var hasTokenErr: Bool {return self._tokenErr != nil}
  /// Clears the value of `tokenErr`. Subsequent reads from it will return its default value.
  public mutating func clearTokenErr() {self._tokenErr = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenErr: Appelis_Identity_Common_V1_TokenError? = nil
}

public struct Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {return _tokenErr ?? .unknownTokenError}
    set {_tokenErr = newValue}
  }
  /// Returns true if `tokenErr` has been explicitly set.
  public var hasTokenErr: Bool {return self._tokenErr != nil}
  /// Clears the value of `tokenErr`. Subsequent reads from it will return its default value.
  public mutating func clearTokenErr() {self._tokenErr = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenErr: Appelis_Identity_Common_V1_TokenError? = nil
}

public struct Metro_UnverifiedCard_Public_V1_GetActiveCardsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.OneOf_Payload? = nil

  public var tokenErr: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .tokenErr(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .tokenErr(newValue)}
  }

  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  public var cardList: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList {
    get {
      if case .cardList(let v)? = payload {return v}
      return Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList()
    }
    set {payload = .cardList(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case tokenErr(Appelis_Identity_Common_V1_TokenError)
    case permErr(Appelis_Identity_Common_V1_PermissionError)
    case cardList(Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList)

  #if !swift(>=4.1)
    public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.OneOf_Payload, rhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tokenErr, .tokenErr): return {
        guard case .tokenErr(let l) = lhs, case .tokenErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cardList, .cardList): return {
        guard case .cardList(let l) = lhs, case .cardList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct UnverifiedCard {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var storeNo: UInt32 = 0

    public var custNo: UInt32 = 0

    public var cardholderNo: UInt32 = 0

    public var emailReadyAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _emailReadyAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_emailReadyAt = newValue}
    }
    /// Returns true if `emailReadyAt` has been explicitly set.
    public var hasEmailReadyAt: Bool {return self._emailReadyAt != nil}
    /// Clears the value of `emailReadyAt`. Subsequent reads from it will return its default value.
    public mutating func clearEmailReadyAt() {self._emailReadyAt = nil}

    public var phoneReadyAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _phoneReadyAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_phoneReadyAt = newValue}
    }
    /// Returns true if `phoneReadyAt` has been explicitly set.
    public var hasPhoneReadyAt: Bool {return self._phoneReadyAt != nil}
    /// Clears the value of `phoneReadyAt`. Subsequent reads from it will return its default value.
    public mutating func clearPhoneReadyAt() {self._phoneReadyAt = nil}

    public var missingContactInfoAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _missingContactInfoAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_missingContactInfoAt = newValue}
    }
    /// Returns true if `missingContactInfoAt` has been explicitly set.
    public var hasMissingContactInfoAt: Bool {return self._missingContactInfoAt != nil}
    /// Clears the value of `missingContactInfoAt`. Subsequent reads from it will return its default value.
    public mutating func clearMissingContactInfoAt() {self._missingContactInfoAt = nil}

    public var blockedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _blockedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_blockedAt = newValue}
    }
    /// Returns true if `blockedAt` has been explicitly set.
    public var hasBlockedAt: Bool {return self._blockedAt != nil}
    /// Clears the value of `blockedAt`. Subsequent reads from it will return its default value.
    public mutating func clearBlockedAt() {self._blockedAt = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _emailReadyAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _phoneReadyAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _missingContactInfoAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _blockedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public struct UnverifiedCardList {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var cards: [Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCard] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Metro_UnverifiedCard_Public_V1_AddCardRequest: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_AddCardResponse: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_AddCardResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_AddCardResponse.AddCardError: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_UpdateCardRequest: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_UpdateCardResponse: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_UpdateCardResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetCardRequest: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetCardResponse: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetCardResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetCardResponse.ContactType: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetCardResponse.Card: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_RemoveCardRequest: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_RemoveCardResponse: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoRequest: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoResponse: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetActiveCardsRequest: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.OneOf_Payload: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCard: @unchecked Sendable {}
extension Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metro.unverifiedCard.public.v1"

extension Metro_UnverifiedCard_Public_V1_AddCardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddCardRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "barcode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.barcode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.barcode.isEmpty {
      try visitor.visitSingularStringField(value: self.barcode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_AddCardRequest, rhs: Metro_UnverifiedCard_Public_V1_AddCardRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.barcode != rhs.barcode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_AddCardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddCardResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_err"),
    2: .standard(proto: "add_card_error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Metro_UnverifiedCard_Public_V1_AddCardResponse.AddCardError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .addCardError(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .addCardError?: try {
      guard case .addCardError(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_AddCardResponse, rhs: Metro_UnverifiedCard_Public_V1_AddCardResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_AddCardResponse.AddCardError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "INVALID_BARDCODE"),
  ]
}

extension Metro_UnverifiedCard_Public_V1_UpdateCardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateCardRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "store_no"),
    3: .standard(proto: "cust_no"),
    4: .standard(proto: "cardholder_no"),
    5: .standard(proto: "timestamp_key"),
    6: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.storeNo) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.custNo) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.cardholderNo) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.timestampKey) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.storeNo != 0 {
      try visitor.visitSingularUInt32Field(value: self.storeNo, fieldNumber: 2)
    }
    if self.custNo != 0 {
      try visitor.visitSingularUInt32Field(value: self.custNo, fieldNumber: 3)
    }
    if self.cardholderNo != 0 {
      try visitor.visitSingularUInt32Field(value: self.cardholderNo, fieldNumber: 4)
    }
    if self.timestampKey != .unknown {
      try visitor.visitSingularEnumField(value: self.timestampKey, fieldNumber: 5)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_UpdateCardRequest, rhs: Metro_UnverifiedCard_Public_V1_UpdateCardRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.storeNo != rhs.storeNo {return false}
    if lhs.custNo != rhs.custNo {return false}
    if lhs.cardholderNo != rhs.cardholderNo {return false}
    if lhs.timestampKey != rhs.timestampKey {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_UpdateCardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateCardResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_err"),
    2: .standard(proto: "perm_err"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_UpdateCardResponse, rhs: Metro_UnverifiedCard_Public_V1_UpdateCardResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_GetCardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCardRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetCardRequest, rhs: Metro_UnverifiedCard_Public_V1_GetCardRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_GetCardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCardResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_err"),
    2: .same(proto: "card"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Metro_UnverifiedCard_Public_V1_GetCardResponse.Card?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .card(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .card(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .card?: try {
      guard case .card(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetCardResponse, rhs: Metro_UnverifiedCard_Public_V1_GetCardResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_GetCardResponse.ContactType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONTACT_TYPE_UNKNOWN"),
    1: .same(proto: "CONTACT_TYPE_PHONE"),
    2: .same(proto: "CONTACT_TYPE_EMAIL"),
  ]
}

extension Metro_UnverifiedCard_Public_V1_GetCardResponse.Card: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_UnverifiedCard_Public_V1_GetCardResponse.protoMessageName + ".Card"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "barcode"),
    2: .same(proto: "status"),
    3: .standard(proto: "contact_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.barcode) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.contactType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.barcode.isEmpty {
      try visitor.visitSingularStringField(value: self.barcode, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.contactType != .unknown {
      try visitor.visitSingularEnumField(value: self.contactType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetCardResponse.Card, rhs: Metro_UnverifiedCard_Public_V1_GetCardResponse.Card) -> Bool {
    if lhs.barcode != rhs.barcode {return false}
    if lhs.status != rhs.status {return false}
    if lhs.contactType != rhs.contactType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_RemoveCardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveCardRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_RemoveCardRequest, rhs: Metro_UnverifiedCard_Public_V1_RemoveCardRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_RemoveCardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveCardResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_err"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._tokenErr) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenErr {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_RemoveCardResponse, rhs: Metro_UnverifiedCard_Public_V1_RemoveCardResponse) -> Bool {
    if lhs._tokenErr != rhs._tokenErr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetWaitingForContactInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoRequest, rhs: Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetWaitingForContactInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_err"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._tokenErr) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenErr {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoResponse, rhs: Metro_UnverifiedCard_Public_V1_SetWaitingForContactInfoResponse) -> Bool {
    if lhs._tokenErr != rhs._tokenErr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_GetActiveCardsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetActiveCardsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsRequest, rhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetActiveCardsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_err"),
    2: .standard(proto: "perm_err"),
    3: .standard(proto: "card_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .tokenErr(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      case 3: try {
        var v: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cardList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cardList(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .tokenErr?: try {
      guard case .tokenErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case .cardList?: try {
      guard case .cardList(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse, rhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.protoMessageName + ".UnverifiedCard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "store_no"),
    2: .standard(proto: "cust_no"),
    3: .standard(proto: "cardholder_no"),
    4: .standard(proto: "email_ready_at"),
    5: .standard(proto: "phone_ready_at"),
    6: .standard(proto: "missing_contact_info_at"),
    7: .standard(proto: "blocked_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.storeNo) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.custNo) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.cardholderNo) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._emailReadyAt) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._phoneReadyAt) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._missingContactInfoAt) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._blockedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.storeNo != 0 {
      try visitor.visitSingularUInt32Field(value: self.storeNo, fieldNumber: 1)
    }
    if self.custNo != 0 {
      try visitor.visitSingularUInt32Field(value: self.custNo, fieldNumber: 2)
    }
    if self.cardholderNo != 0 {
      try visitor.visitSingularUInt32Field(value: self.cardholderNo, fieldNumber: 3)
    }
    try { if let v = self._emailReadyAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._phoneReadyAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._missingContactInfoAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._blockedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCard, rhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCard) -> Bool {
    if lhs.storeNo != rhs.storeNo {return false}
    if lhs.custNo != rhs.custNo {return false}
    if lhs.cardholderNo != rhs.cardholderNo {return false}
    if lhs._emailReadyAt != rhs._emailReadyAt {return false}
    if lhs._phoneReadyAt != rhs._phoneReadyAt {return false}
    if lhs._missingContactInfoAt != rhs._missingContactInfoAt {return false}
    if lhs._blockedAt != rhs._blockedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.protoMessageName + ".UnverifiedCardList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cards"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cards) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cards, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList, rhs: Metro_UnverifiedCard_Public_V1_GetActiveCardsResponse.UnverifiedCardList) -> Bool {
    if lhs.cards != rhs.cards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: loyalty/loyalty.policy.public.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Metro_Loyalty_V1_LoyaltyPolicyPublicClient`, then call methods of this protocol to make API calls.
public protocol Metro_Loyalty_V1_LoyaltyPolicyPublicClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol? { get }

  func getPolicyPreview(
    _ request: Metro_Loyalty_V1_GetPolicyPreviewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Loyalty_V1_GetPolicyPreviewRequest, Metro_Loyalty_V1_GetPolicyPreviewResponse>

  func getPolicy(
    _ request: Metro_Loyalty_V1_GetPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Loyalty_V1_GetPolicyRequest, Metro_Loyalty_V1_GetPolicyResponse>

  func approvePolicy(
    _ request: Metro_Loyalty_V1_ApprovePolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Loyalty_V1_ApprovePolicyRequest, Metro_Loyalty_V1_ApprovePolicyResponse>
}

extension Metro_Loyalty_V1_LoyaltyPolicyPublicClientProtocol {
  public var serviceName: String {
    return "metro.loyalty.v1.LoyaltyPolicyPublic"
  }

  /// Unary call to GetPolicyPreview
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPolicyPreview.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPolicyPreview(
    _ request: Metro_Loyalty_V1_GetPolicyPreviewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Loyalty_V1_GetPolicyPreviewRequest, Metro_Loyalty_V1_GetPolicyPreviewResponse> {
    return self.makeUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicyPreview.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPolicyPreviewInterceptors() ?? []
    )
  }

  /// Unary call to GetPolicy
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPolicy(
    _ request: Metro_Loyalty_V1_GetPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Loyalty_V1_GetPolicyRequest, Metro_Loyalty_V1_GetPolicyResponse> {
    return self.makeUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPolicyInterceptors() ?? []
    )
  }

  /// Unary call to ApprovePolicy
  ///
  /// - Parameters:
  ///   - request: Request to send to ApprovePolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func approvePolicy(
    _ request: Metro_Loyalty_V1_ApprovePolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Loyalty_V1_ApprovePolicyRequest, Metro_Loyalty_V1_ApprovePolicyResponse> {
    return self.makeUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.approvePolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApprovePolicyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Loyalty_V1_LoyaltyPolicyPublicClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Loyalty_V1_LoyaltyPolicyPublicNIOClient")
public final class Metro_Loyalty_V1_LoyaltyPolicyPublicClient: Metro_Loyalty_V1_LoyaltyPolicyPublicClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.loyalty.v1.LoyaltyPolicyPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Loyalty_V1_LoyaltyPolicyPublicNIOClient: Metro_Loyalty_V1_LoyaltyPolicyPublicClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.loyalty.v1.LoyaltyPolicyPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Loyalty_V1_LoyaltyPolicyPublicAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol? { get }

  func makeGetPolicyPreviewCall(
    _ request: Metro_Loyalty_V1_GetPolicyPreviewRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Loyalty_V1_GetPolicyPreviewRequest, Metro_Loyalty_V1_GetPolicyPreviewResponse>

  func makeGetPolicyCall(
    _ request: Metro_Loyalty_V1_GetPolicyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Loyalty_V1_GetPolicyRequest, Metro_Loyalty_V1_GetPolicyResponse>

  func makeApprovePolicyCall(
    _ request: Metro_Loyalty_V1_ApprovePolicyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Loyalty_V1_ApprovePolicyRequest, Metro_Loyalty_V1_ApprovePolicyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Loyalty_V1_LoyaltyPolicyPublicAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetPolicyPreviewCall(
    _ request: Metro_Loyalty_V1_GetPolicyPreviewRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Loyalty_V1_GetPolicyPreviewRequest, Metro_Loyalty_V1_GetPolicyPreviewResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicyPreview.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPolicyPreviewInterceptors() ?? []
    )
  }

  public func makeGetPolicyCall(
    _ request: Metro_Loyalty_V1_GetPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Loyalty_V1_GetPolicyRequest, Metro_Loyalty_V1_GetPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPolicyInterceptors() ?? []
    )
  }

  public func makeApprovePolicyCall(
    _ request: Metro_Loyalty_V1_ApprovePolicyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Loyalty_V1_ApprovePolicyRequest, Metro_Loyalty_V1_ApprovePolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.approvePolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApprovePolicyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Loyalty_V1_LoyaltyPolicyPublicAsyncClientProtocol {
  public func getPolicyPreview(
    _ request: Metro_Loyalty_V1_GetPolicyPreviewRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Loyalty_V1_GetPolicyPreviewResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicyPreview.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPolicyPreviewInterceptors() ?? []
    )
  }

  public func getPolicy(
    _ request: Metro_Loyalty_V1_GetPolicyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Loyalty_V1_GetPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPolicyInterceptors() ?? []
    )
  }

  public func approvePolicy(
    _ request: Metro_Loyalty_V1_ApprovePolicyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Loyalty_V1_ApprovePolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.approvePolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApprovePolicyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Loyalty_V1_LoyaltyPolicyPublicAsyncClient: Metro_Loyalty_V1_LoyaltyPolicyPublicAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Loyalty_V1_LoyaltyPolicyPublicClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getPolicyPreview'.
  func makeGetPolicyPreviewInterceptors() -> [ClientInterceptor<Metro_Loyalty_V1_GetPolicyPreviewRequest, Metro_Loyalty_V1_GetPolicyPreviewResponse>]

  /// - Returns: Interceptors to use when invoking 'getPolicy'.
  func makeGetPolicyInterceptors() -> [ClientInterceptor<Metro_Loyalty_V1_GetPolicyRequest, Metro_Loyalty_V1_GetPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'approvePolicy'.
  func makeApprovePolicyInterceptors() -> [ClientInterceptor<Metro_Loyalty_V1_ApprovePolicyRequest, Metro_Loyalty_V1_ApprovePolicyResponse>]
}

public enum Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LoyaltyPolicyPublic",
    fullName: "metro.loyalty.v1.LoyaltyPolicyPublic",
    methods: [
      Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicyPreview,
      Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.getPolicy,
      Metro_Loyalty_V1_LoyaltyPolicyPublicClientMetadata.Methods.approvePolicy,
    ]
  )

  public enum Methods {
    public static let getPolicyPreview = GRPCMethodDescriptor(
      name: "GetPolicyPreview",
      path: "/metro.loyalty.v1.LoyaltyPolicyPublic/GetPolicyPreview",
      type: GRPCCallType.unary
    )

    public static let getPolicy = GRPCMethodDescriptor(
      name: "GetPolicy",
      path: "/metro.loyalty.v1.LoyaltyPolicyPublic/GetPolicy",
      type: GRPCCallType.unary
    )

    public static let approvePolicy = GRPCMethodDescriptor(
      name: "ApprovePolicy",
      path: "/metro.loyalty.v1.LoyaltyPolicyPublic/ApprovePolicy",
      type: GRPCCallType.unary
    )
  }
}


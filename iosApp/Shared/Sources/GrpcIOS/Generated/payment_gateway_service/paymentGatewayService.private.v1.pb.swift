// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: payment_gateway_service/paymentGatewayService.private.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Payment_Gateway_V1_PaymentStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case created // = 1
  case processing // = 2

  /// Canceled by user
  case canceled // = 3
  case confirmed // = 4
  case revoked // = 5

  /// Probably denied because of card.
  case denied // = 6
  case waitingForCharging // = 7
  case charged // = 8
  case refundProcessing // = 9
  case refunded // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .created
    case 2: self = .processing
    case 3: self = .canceled
    case 4: self = .confirmed
    case 5: self = .revoked
    case 6: self = .denied
    case 7: self = .waitingForCharging
    case 8: self = .charged
    case 9: self = .refundProcessing
    case 10: self = .refunded
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .created: return 1
    case .processing: return 2
    case .canceled: return 3
    case .confirmed: return 4
    case .revoked: return 5
    case .denied: return 6
    case .waitingForCharging: return 7
    case .charged: return 8
    case .refundProcessing: return 9
    case .refunded: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Payment_Gateway_V1_PaymentStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Payment_Gateway_V1_PaymentStatus] = [
    .unknown,
    .created,
    .processing,
    .canceled,
    .confirmed,
    .revoked,
    .denied,
    .waitingForCharging,
    .charged,
    .refundProcessing,
    .refunded,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Payment_Gateway_V1_Gateway {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var projectID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Payment_Gateway_V1_ChangesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Payment ID to watch
  public var paymentID: Appelis_UUID {
    get {return _paymentID ?? Appelis_UUID()}
    set {_paymentID = newValue}
  }
  /// Returns true if `paymentID` has been explicitly set.
  public var hasPaymentID: Bool {return self._paymentID != nil}
  /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentID() {self._paymentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _paymentID: Appelis_UUID? = nil
}

public struct Appelis_Payment_Gateway_V1_PaymentInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orderNo: String = String()

  public var totalAmount: Double = 0

  public var lang: Appelis_Language = .unknown

  public var currency: Appelis_Currency = .unknown

  public var items: [Appelis_Payment_Gateway_V1_PayItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Payment_Gateway_V1_PayItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var quantity: Int32 = 0

  public var amount: Double = 0

  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Payment_Gateway_V1_CreatePaymentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gw: Appelis_Payment_Gateway_V1_Gateway {
    get {return _gw ?? Appelis_Payment_Gateway_V1_Gateway()}
    set {_gw = newValue}
  }
  /// Returns true if `gw` has been explicitly set.
  public var hasGw: Bool {return self._gw != nil}
  /// Clears the value of `gw`. Subsequent reads from it will return its default value.
  public mutating func clearGw() {self._gw = nil}

  public var data: Appelis_Payment_Gateway_V1_PaymentInput {
    get {return _data ?? Appelis_Payment_Gateway_V1_PaymentInput()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  /// Payment ID to create
  public var paymentID: Appelis_UUID {
    get {return _paymentID ?? Appelis_UUID()}
    set {_paymentID = newValue}
  }
  /// Returns true if `paymentID` has been explicitly set.
  public var hasPaymentID: Bool {return self._paymentID != nil}
  /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentID() {self._paymentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gw: Appelis_Payment_Gateway_V1_Gateway? = nil
  fileprivate var _data: Appelis_Payment_Gateway_V1_PaymentInput? = nil
  fileprivate var _paymentID: Appelis_UUID? = nil
}

public struct Appelis_Payment_Gateway_V1_PaymentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Appelis_Payment_Gateway_V1_Payment {
    get {return _data ?? Appelis_Payment_Gateway_V1_Payment()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Appelis_Payment_Gateway_V1_Payment? = nil
}

public struct Appelis_Payment_Gateway_V1_Payment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var paymentID: Appelis_UUID {
    get {return _paymentID ?? Appelis_UUID()}
    set {_paymentID = newValue}
  }
  /// Returns true if `paymentID` has been explicitly set.
  public var hasPaymentID: Bool {return self._paymentID != nil}
  /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentID() {self._paymentID = nil}

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var status: Appelis_Payment_Gateway_V1_PaymentStatus = .unknown

  /// Pay url is available only for limited time...
  public var payURL: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _payURL ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_payURL = newValue}
  }
  /// Returns true if `payURL` has been explicitly set.
  public var hasPayURL: Bool {return self._payURL != nil}
  /// Clears the value of `payURL`. Subsequent reads from it will return its default value.
  public mutating func clearPayURL() {self._payURL = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _paymentID: Appelis_UUID? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _payURL: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Payment_Gateway_V1_PaymentStatus: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_Gateway: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_ChangesRequest: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_PaymentInput: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_PayItem: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_CreatePaymentRequest: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_PaymentResponse: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_Payment: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.payment.gateway.v1"

extension Appelis_Payment_Gateway_V1_PaymentStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "CREATED"),
    2: .same(proto: "PROCESSING"),
    3: .same(proto: "CANCELED"),
    4: .same(proto: "CONFIRMED"),
    5: .same(proto: "REVOKED"),
    6: .same(proto: "DENIED"),
    7: .same(proto: "WAITING_FOR_CHARGING"),
    8: .same(proto: "CHARGED"),
    9: .same(proto: "REFUND_PROCESSING"),
    10: .same(proto: "REFUNDED"),
  ]
}

extension Appelis_Payment_Gateway_V1_Gateway: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Gateway"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "projectId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_Gateway, rhs: Appelis_Payment_Gateway_V1_Gateway) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_ChangesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "paymentId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._paymentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._paymentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_ChangesRequest, rhs: Appelis_Payment_Gateway_V1_ChangesRequest) -> Bool {
    if lhs._paymentID != rhs._paymentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_PaymentInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaymentInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderNo"),
    2: .same(proto: "totalAmount"),
    3: .same(proto: "lang"),
    4: .same(proto: "currency"),
    5: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderNo) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.totalAmount) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.lang) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.currency) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderNo.isEmpty {
      try visitor.visitSingularStringField(value: self.orderNo, fieldNumber: 1)
    }
    if self.totalAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.totalAmount, fieldNumber: 2)
    }
    if self.lang != .unknown {
      try visitor.visitSingularEnumField(value: self.lang, fieldNumber: 3)
    }
    if self.currency != .unknown {
      try visitor.visitSingularEnumField(value: self.currency, fieldNumber: 4)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_PaymentInput, rhs: Appelis_Payment_Gateway_V1_PaymentInput) -> Bool {
    if lhs.orderNo != rhs.orderNo {return false}
    if lhs.totalAmount != rhs.totalAmount {return false}
    if lhs.lang != rhs.lang {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_PayItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PayItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "quantity"),
    3: .same(proto: "amount"),
    4: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.quantity) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularDoubleField(value: self.amount, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_PayItem, rhs: Appelis_Payment_Gateway_V1_PayItem) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_CreatePaymentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatePaymentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gw"),
    2: .same(proto: "data"),
    3: .same(proto: "paymentId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gw) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._paymentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._paymentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_CreatePaymentRequest, rhs: Appelis_Payment_Gateway_V1_CreatePaymentRequest) -> Bool {
    if lhs._gw != rhs._gw {return false}
    if lhs._data != rhs._data {return false}
    if lhs._paymentID != rhs._paymentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_PaymentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaymentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_PaymentResponse, rhs: Appelis_Payment_Gateway_V1_PaymentResponse) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_Payment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Payment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paymentId"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "status"),
    4: .same(proto: "payUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._paymentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._payURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._paymentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try { if let v = self._payURL {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_Payment, rhs: Appelis_Payment_Gateway_V1_Payment) -> Bool {
    if lhs._paymentID != rhs._paymentID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.status != rhs.status {return false}
    if lhs._payURL != rhs._payURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

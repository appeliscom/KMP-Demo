// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: payment_gateway_service/paymentConfigService.public.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Payment_Gateway_V1_CsobCurrencies: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownCsobCurrency // = 0
  case czk // = 1
  case eur // = 2
  case usd // = 3
  case gbp // = 4
  case huf // = 5
  case pln // = 6
  case hrk // = 7
  case ron // = 8
  case nok // = 9
  case sek // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownCsobCurrency
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCsobCurrency
    case 1: self = .czk
    case 2: self = .eur
    case 3: self = .usd
    case 4: self = .gbp
    case 5: self = .huf
    case 6: self = .pln
    case 7: self = .hrk
    case 8: self = .ron
    case 9: self = .nok
    case 10: self = .sek
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownCsobCurrency: return 0
    case .czk: return 1
    case .eur: return 2
    case .usd: return 3
    case .gbp: return 4
    case .huf: return 5
    case .pln: return 6
    case .hrk: return 7
    case .ron: return 8
    case .nok: return 9
    case .sek: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Payment_Gateway_V1_CsobCurrencies: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Payment_Gateway_V1_CsobCurrencies] = [
    .unknownCsobCurrency,
    .czk,
    .eur,
    .usd,
    .gbp,
    .huf,
    .pln,
    .hrk,
    .ron,
    .nok,
    .sek,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Payment_Gateway_V1_CsobLanguage: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownCsobLanguage // = 0
  case cz // = 1
  case en // = 2
  case de // = 3
  case fr // = 4
  case hu // = 5
  case it // = 6
  case jp // = 7
  case pl // = 8
  case pt // = 9
  case ro // = 10
  case ru // = 11
  case sk // = 12
  case es // = 13
  case tr // = 14
  case vn // = 15
  case hr // = 16
  case si // = 17
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownCsobLanguage
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCsobLanguage
    case 1: self = .cz
    case 2: self = .en
    case 3: self = .de
    case 4: self = .fr
    case 5: self = .hu
    case 6: self = .it
    case 7: self = .jp
    case 8: self = .pl
    case 9: self = .pt
    case 10: self = .ro
    case 11: self = .ru
    case 12: self = .sk
    case 13: self = .es
    case 14: self = .tr
    case 15: self = .vn
    case 16: self = .hr
    case 17: self = .si
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownCsobLanguage: return 0
    case .cz: return 1
    case .en: return 2
    case .de: return 3
    case .fr: return 4
    case .hu: return 5
    case .it: return 6
    case .jp: return 7
    case .pl: return 8
    case .pt: return 9
    case .ro: return 10
    case .ru: return 11
    case .sk: return 12
    case .es: return 13
    case .tr: return 14
    case .vn: return 15
    case .hr: return 16
    case .si: return 17
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Payment_Gateway_V1_CsobLanguage: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Payment_Gateway_V1_CsobLanguage] = [
    .unknownCsobLanguage,
    .cz,
    .en,
    .de,
    .fr,
    .hu,
    .it,
    .jp,
    .pl,
    .pt,
    .ro,
    .ru,
    .sk,
    .es,
    .tr,
    .vn,
    .hr,
    .si,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Payment_Gateway_V1_SetCsobConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var config: Appelis_Payment_Gateway_V1_CsobConfiguration {
    get {return _config ?? Appelis_Payment_Gateway_V1_CsobConfiguration()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _config: Appelis_Payment_Gateway_V1_CsobConfiguration? = nil
}

public struct Appelis_Payment_Gateway_V1_SetCsobConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Payment_Gateway_V1_SetCsobConfigResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case permErr(Appelis_Identity_Common_V1_PermissionError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Payment_Gateway_V1_SetCsobConfigResponse.OneOf_Payload, rhs: Appelis_Payment_Gateway_V1_SetCsobConfigResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Payment_Gateway_V1_GetCsobConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_Payment_Gateway_V1_GetCsobConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_Payment_Gateway_V1_GetCsobConfigResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var permErr: Appelis_Identity_Common_V1_PermissionError {
    get {
      if case .permErr(let v)? = payload {return v}
      return .unknownPermissionError
    }
    set {payload = .permErr(newValue)}
  }

  public var config: Appelis_Payment_Gateway_V1_CsobConfiguration {
    get {
      if case .config(let v)? = payload {return v}
      return Appelis_Payment_Gateway_V1_CsobConfiguration()
    }
    set {payload = .config(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case permErr(Appelis_Identity_Common_V1_PermissionError)
    case config(Appelis_Payment_Gateway_V1_CsobConfiguration)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_Payment_Gateway_V1_GetCsobConfigResponse.OneOf_Payload, rhs: Appelis_Payment_Gateway_V1_GetCsobConfigResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permErr, .permErr): return {
        guard case .permErr(let l) = lhs, case .permErr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.config, .config): return {
        guard case .config(let l) = lhs, case .config(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_Payment_Gateway_V1_CsobConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var merchantID: String = String()

  public var privateKey: Data = Data()

  public var publicKey: Data = Data()

  public var allowedCurrencies: [Appelis_Payment_Gateway_V1_CsobCurrencies] = []

  public var allowedLanguages: [Appelis_Payment_Gateway_V1_CsobLanguage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Payment_Gateway_V1_CsobCurrencies: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_CsobLanguage: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_SetCsobConfigRequest: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_SetCsobConfigResponse: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_SetCsobConfigResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_GetCsobConfigRequest: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_GetCsobConfigResponse: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_GetCsobConfigResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_Payment_Gateway_V1_CsobConfiguration: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.payment.gateway.v1"

extension Appelis_Payment_Gateway_V1_CsobCurrencies: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CSOB_CURRENCY"),
    1: .same(proto: "CZK"),
    2: .same(proto: "EUR"),
    3: .same(proto: "USD"),
    4: .same(proto: "GBP"),
    5: .same(proto: "HUF"),
    6: .same(proto: "PLN"),
    7: .same(proto: "HRK"),
    8: .same(proto: "RON"),
    9: .same(proto: "NOK"),
    10: .same(proto: "SEK"),
  ]
}

extension Appelis_Payment_Gateway_V1_CsobLanguage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CSOB_LANGUAGE"),
    1: .same(proto: "CZ"),
    2: .same(proto: "EN"),
    3: .same(proto: "DE"),
    4: .same(proto: "FR"),
    5: .same(proto: "HU"),
    6: .same(proto: "IT"),
    7: .same(proto: "JP"),
    8: .same(proto: "PL"),
    9: .same(proto: "PT"),
    10: .same(proto: "RO"),
    11: .same(proto: "RU"),
    12: .same(proto: "SK"),
    13: .same(proto: "ES"),
    14: .same(proto: "TR"),
    15: .same(proto: "VN"),
    16: .same(proto: "HR"),
    17: .same(proto: "SI"),
  ]
}

extension Appelis_Payment_Gateway_V1_SetCsobConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCsobConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_SetCsobConfigRequest, rhs: Appelis_Payment_Gateway_V1_SetCsobConfigRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_SetCsobConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCsobConfigResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "permErr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_SetCsobConfigResponse, rhs: Appelis_Payment_Gateway_V1_SetCsobConfigResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_GetCsobConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCsobConfigRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_GetCsobConfigRequest, rhs: Appelis_Payment_Gateway_V1_GetCsobConfigRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_GetCsobConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCsobConfigResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "permErr"),
    3: .same(proto: "config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_Identity_Common_V1_PermissionError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .permErr(v)
        }
      }()
      case 3: try {
        var v: Appelis_Payment_Gateway_V1_CsobConfiguration?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .config(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .config(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .permErr?: try {
      guard case .permErr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case .config?: try {
      guard case .config(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_GetCsobConfigResponse, rhs: Appelis_Payment_Gateway_V1_GetCsobConfigResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Payment_Gateway_V1_CsobConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CsobConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "merchantId"),
    2: .same(proto: "privateKey"),
    3: .same(proto: "publicKey"),
    4: .same(proto: "allowedCurrencies"),
    5: .same(proto: "allowedLanguages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.merchantID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.allowedCurrencies) }()
      case 5: try { try decoder.decodeRepeatedEnumField(value: &self.allowedLanguages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.merchantID.isEmpty {
      try visitor.visitSingularStringField(value: self.merchantID, fieldNumber: 1)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 2)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 3)
    }
    if !self.allowedCurrencies.isEmpty {
      try visitor.visitPackedEnumField(value: self.allowedCurrencies, fieldNumber: 4)
    }
    if !self.allowedLanguages.isEmpty {
      try visitor.visitPackedEnumField(value: self.allowedLanguages, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Payment_Gateway_V1_CsobConfiguration, rhs: Appelis_Payment_Gateway_V1_CsobConfiguration) -> Bool {
    if lhs.merchantID != rhs.merchantID {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.allowedCurrencies != rhs.allowedCurrencies {return false}
    if lhs.allowedLanguages != rhs.allowedLanguages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

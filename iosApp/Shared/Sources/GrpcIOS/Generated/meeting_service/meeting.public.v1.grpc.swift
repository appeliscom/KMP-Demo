//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: meeting_service/meeting.public.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Metro_Meeting_Public_V1_MeetingsPublicServiceClient`, then call methods of this protocol to make API calls.
public protocol Metro_Meeting_Public_V1_MeetingsPublicServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol? { get }

  func scheduleMeeting(
    _ request: Metro_Meeting_Public_V1_ScheduleMeetingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Meeting_Public_V1_ScheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse>

  func rescheduleMeeting(
    _ request: Metro_Meeting_Public_V1_RescheduleMeetingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Meeting_Public_V1_RescheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse>

  func confirmMeeting(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse>

  func cancelMeeting(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse>

  func getMeetingById(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_MeetingResponse>

  func getMeetings(
    _ request: Metro_Meeting_Public_V1_GetMeetingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Metro_Meeting_Public_V1_GetMeetingsRequest, Metro_Meeting_Public_V1_MeetingsListResponse>
}

extension Metro_Meeting_Public_V1_MeetingsPublicServiceClientProtocol {
  public var serviceName: String {
    return "metro.meeting.public.v1.MeetingsPublicService"
  }

  /// Create new meeting
  ///
  /// - Parameters:
  ///   - request: Request to send to ScheduleMeeting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func scheduleMeeting(
    _ request: Metro_Meeting_Public_V1_ScheduleMeetingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Meeting_Public_V1_ScheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.scheduleMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleMeetingInterceptors() ?? []
    )
  }

  /// Move meeting to different time.
  ///
  /// - Parameters:
  ///   - request: Request to send to RescheduleMeeting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rescheduleMeeting(
    _ request: Metro_Meeting_Public_V1_RescheduleMeetingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Meeting_Public_V1_RescheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.rescheduleMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRescheduleMeetingInterceptors() ?? []
    )
  }

  /// Accept admin made time changes to meeting.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmMeeting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func confirmMeeting(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.confirmMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmMeetingInterceptors() ?? []
    )
  }

  /// Cancel meeting.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelMeeting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelMeeting(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.cancelMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMeetingInterceptors() ?? []
    )
  }

  /// List meeting by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMeetingById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMeetingById(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_MeetingResponse> {
    return self.makeUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetingById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeetingByIdInterceptors() ?? []
    )
  }

  /// List meetings, limit to page size. Sort
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMeetings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMeetings(
    _ request: Metro_Meeting_Public_V1_GetMeetingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Metro_Meeting_Public_V1_GetMeetingsRequest, Metro_Meeting_Public_V1_MeetingsListResponse> {
    return self.makeUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeetingsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Metro_Meeting_Public_V1_MeetingsPublicServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Metro_Meeting_Public_V1_MeetingsPublicServiceNIOClient")
public final class Metro_Meeting_Public_V1_MeetingsPublicServiceClient: Metro_Meeting_Public_V1_MeetingsPublicServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the metro.meeting.public.v1.MeetingsPublicService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Metro_Meeting_Public_V1_MeetingsPublicServiceNIOClient: Metro_Meeting_Public_V1_MeetingsPublicServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the metro.meeting.public.v1.MeetingsPublicService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Metro_Meeting_Public_V1_MeetingsPublicServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol? { get }

  func makeScheduleMeetingCall(
    _ request: Metro_Meeting_Public_V1_ScheduleMeetingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_ScheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse>

  func makeRescheduleMeetingCall(
    _ request: Metro_Meeting_Public_V1_RescheduleMeetingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_RescheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse>

  func makeConfirmMeetingCall(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse>

  func makeCancelMeetingCall(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse>

  func makeGetMeetingByIDCall(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_MeetingResponse>

  func makeGetMeetingsCall(
    _ request: Metro_Meeting_Public_V1_GetMeetingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_GetMeetingsRequest, Metro_Meeting_Public_V1_MeetingsListResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Meeting_Public_V1_MeetingsPublicServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeScheduleMeetingCall(
    _ request: Metro_Meeting_Public_V1_ScheduleMeetingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_ScheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.scheduleMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleMeetingInterceptors() ?? []
    )
  }

  public func makeRescheduleMeetingCall(
    _ request: Metro_Meeting_Public_V1_RescheduleMeetingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_RescheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.rescheduleMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRescheduleMeetingInterceptors() ?? []
    )
  }

  public func makeConfirmMeetingCall(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.confirmMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmMeetingInterceptors() ?? []
    )
  }

  public func makeCancelMeetingCall(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.cancelMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMeetingInterceptors() ?? []
    )
  }

  public func makeGetMeetingByIDCall(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_MeetingResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetingById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeetingByIdInterceptors() ?? []
    )
  }

  public func makeGetMeetingsCall(
    _ request: Metro_Meeting_Public_V1_GetMeetingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Metro_Meeting_Public_V1_GetMeetingsRequest, Metro_Meeting_Public_V1_MeetingsListResponse> {
    return self.makeAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeetingsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Metro_Meeting_Public_V1_MeetingsPublicServiceAsyncClientProtocol {
  public func scheduleMeeting(
    _ request: Metro_Meeting_Public_V1_ScheduleMeetingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Meeting_Public_V1_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.scheduleMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleMeetingInterceptors() ?? []
    )
  }

  public func rescheduleMeeting(
    _ request: Metro_Meeting_Public_V1_RescheduleMeetingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Meeting_Public_V1_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.rescheduleMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRescheduleMeetingInterceptors() ?? []
    )
  }

  public func confirmMeeting(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Meeting_Public_V1_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.confirmMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmMeetingInterceptors() ?? []
    )
  }

  public func cancelMeeting(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Meeting_Public_V1_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.cancelMeeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMeetingInterceptors() ?? []
    )
  }

  public func getMeetingById(
    _ request: Metro_Meeting_Public_V1_MeetingIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Meeting_Public_V1_MeetingResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetingById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeetingByIdInterceptors() ?? []
    )
  }

  public func getMeetings(
    _ request: Metro_Meeting_Public_V1_GetMeetingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Metro_Meeting_Public_V1_MeetingsListResponse {
    return try await self.performAsyncUnaryCall(
      path: Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeetingsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Metro_Meeting_Public_V1_MeetingsPublicServiceAsyncClient: Metro_Meeting_Public_V1_MeetingsPublicServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Metro_Meeting_Public_V1_MeetingsPublicServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'scheduleMeeting'.
  func makeScheduleMeetingInterceptors() -> [ClientInterceptor<Metro_Meeting_Public_V1_ScheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'rescheduleMeeting'.
  func makeRescheduleMeetingInterceptors() -> [ClientInterceptor<Metro_Meeting_Public_V1_RescheduleMeetingRequest, Metro_Meeting_Public_V1_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmMeeting'.
  func makeConfirmMeetingInterceptors() -> [ClientInterceptor<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelMeeting'.
  func makeCancelMeetingInterceptors() -> [ClientInterceptor<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getMeetingById'.
  func makeGetMeetingByIdInterceptors() -> [ClientInterceptor<Metro_Meeting_Public_V1_MeetingIdRequest, Metro_Meeting_Public_V1_MeetingResponse>]

  /// - Returns: Interceptors to use when invoking 'getMeetings'.
  func makeGetMeetingsInterceptors() -> [ClientInterceptor<Metro_Meeting_Public_V1_GetMeetingsRequest, Metro_Meeting_Public_V1_MeetingsListResponse>]
}

public enum Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MeetingsPublicService",
    fullName: "metro.meeting.public.v1.MeetingsPublicService",
    methods: [
      Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.scheduleMeeting,
      Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.rescheduleMeeting,
      Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.confirmMeeting,
      Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.cancelMeeting,
      Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetingById,
      Metro_Meeting_Public_V1_MeetingsPublicServiceClientMetadata.Methods.getMeetings,
    ]
  )

  public enum Methods {
    public static let scheduleMeeting = GRPCMethodDescriptor(
      name: "ScheduleMeeting",
      path: "/metro.meeting.public.v1.MeetingsPublicService/ScheduleMeeting",
      type: GRPCCallType.unary
    )

    public static let rescheduleMeeting = GRPCMethodDescriptor(
      name: "RescheduleMeeting",
      path: "/metro.meeting.public.v1.MeetingsPublicService/RescheduleMeeting",
      type: GRPCCallType.unary
    )

    public static let confirmMeeting = GRPCMethodDescriptor(
      name: "ConfirmMeeting",
      path: "/metro.meeting.public.v1.MeetingsPublicService/ConfirmMeeting",
      type: GRPCCallType.unary
    )

    public static let cancelMeeting = GRPCMethodDescriptor(
      name: "CancelMeeting",
      path: "/metro.meeting.public.v1.MeetingsPublicService/CancelMeeting",
      type: GRPCCallType.unary
    )

    public static let getMeetingById = GRPCMethodDescriptor(
      name: "GetMeetingById",
      path: "/metro.meeting.public.v1.MeetingsPublicService/GetMeetingById",
      type: GRPCCallType.unary
    )

    public static let getMeetings = GRPCMethodDescriptor(
      name: "GetMeetings",
      path: "/metro.meeting.public.v1.MeetingsPublicService/GetMeetings",
      type: GRPCCallType.unary
    )
  }
}


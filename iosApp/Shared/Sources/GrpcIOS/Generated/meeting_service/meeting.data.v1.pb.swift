// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: meeting_service/meeting.data.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Metro_Meeting_Data_V1_Reason: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownReason // = 0
  case companyProfileChange // = 1
  case userProfileChange // = 2
  case bonusProgram // = 3
  case cip // = 4
  case vouchers // = 5
  case creditSystem // = 6
  case noReason // = 7
  case clickAndCollect // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownReason
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownReason
    case 1: self = .companyProfileChange
    case 2: self = .userProfileChange
    case 3: self = .bonusProgram
    case 4: self = .cip
    case 5: self = .vouchers
    case 6: self = .creditSystem
    case 7: self = .noReason
    case 8: self = .clickAndCollect
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownReason: return 0
    case .companyProfileChange: return 1
    case .userProfileChange: return 2
    case .bonusProgram: return 3
    case .cip: return 4
    case .vouchers: return 5
    case .creditSystem: return 6
    case .noReason: return 7
    case .clickAndCollect: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Meeting_Data_V1_Reason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Meeting_Data_V1_Reason] = [
    .unknownReason,
    .companyProfileChange,
    .userProfileChange,
    .bonusProgram,
    .cip,
    .vouchers,
    .creditSystem,
    .noReason,
    .clickAndCollect,
  ]
}

#endif  // swift(>=4.2)

public enum Metro_Meeting_Data_V1_State: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownState // = 0
  case accepted // = 1
  case waiting // = 2
  case moved // = 3
  case cancelled // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownState
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownState
    case 1: self = .accepted
    case 2: self = .waiting
    case 3: self = .moved
    case 4: self = .cancelled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownState: return 0
    case .accepted: return 1
    case .waiting: return 2
    case .moved: return 3
    case .cancelled: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Meeting_Data_V1_State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Meeting_Data_V1_State] = [
    .unknownState,
    .accepted,
    .waiting,
    .moved,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

public enum Metro_Meeting_Data_V1_Event: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownEvent // = 0
  case userScheduled // = 1
  case adminMoved // = 2
  case userMoved // = 3
  case adminConfirmed // = 4
  case userCancelled // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownEvent
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownEvent
    case 1: self = .userScheduled
    case 2: self = .adminMoved
    case 3: self = .userMoved
    case 4: self = .adminConfirmed
    case 5: self = .userCancelled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownEvent: return 0
    case .userScheduled: return 1
    case .adminMoved: return 2
    case .userMoved: return 3
    case .adminConfirmed: return 4
    case .userCancelled: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Meeting_Data_V1_Event: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Meeting_Data_V1_Event] = [
    .unknownEvent,
    .userScheduled,
    .adminMoved,
    .userMoved,
    .adminConfirmed,
    .userCancelled,
  ]
}

#endif  // swift(>=4.2)

public enum Metro_Meeting_Data_V1_SortKey: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownKey // = 0
  case identifier // = 1
  case startDate // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownKey
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownKey
    case 1: self = .identifier
    case 2: self = .startDate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownKey: return 0
    case .identifier: return 1
    case .startDate: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Metro_Meeting_Data_V1_SortKey: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Metro_Meeting_Data_V1_SortKey] = [
    .unknownKey,
    .identifier,
    .startDate,
  ]
}

#endif  // swift(>=4.2)

public struct Metro_Meeting_Data_V1_Meeting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var reason: Metro_Meeting_Data_V1_Reason = .unknownReason

  public var state: Metro_Meeting_Data_V1_State = .unknownState

  public var startDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  public var hasStartDate: Bool {return self._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  public mutating func clearStartDate() {self._startDate = nil}

  public var endDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  public var hasEndDate: Bool {return self._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  public mutating func clearEndDate() {self._endDate = nil}

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {self._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Metro_Meeting_Data_V1_MeetingDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var reason: Metro_Meeting_Data_V1_Reason = .unknownReason

  public var state: Metro_Meeting_Data_V1_State = .unknownState

  public var startDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  public var hasStartDate: Bool {return self._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  public mutating func clearStartDate() {self._startDate = nil}

  public var endDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  public var hasEndDate: Bool {return self._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  public mutating func clearEndDate() {self._endDate = nil}

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {self._updatedAt = nil}

  public var history: [Metro_Meeting_Data_V1_MeetingHistory] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Metro_Meeting_Data_V1_MeetingHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var event: Metro_Meeting_Data_V1_Event = .unknownEvent

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var startDateOriginal: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startDateOriginal ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startDateOriginal = newValue}
  }
  /// Returns true if `startDateOriginal` has been explicitly set.
  public var hasStartDateOriginal: Bool {return self._startDateOriginal != nil}
  /// Clears the value of `startDateOriginal`. Subsequent reads from it will return its default value.
  public mutating func clearStartDateOriginal() {self._startDateOriginal = nil}

  public var endDateOriginal: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endDateOriginal ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endDateOriginal = newValue}
  }
  /// Returns true if `endDateOriginal` has been explicitly set.
  public var hasEndDateOriginal: Bool {return self._endDateOriginal != nil}
  /// Clears the value of `endDateOriginal`. Subsequent reads from it will return its default value.
  public mutating func clearEndDateOriginal() {self._endDateOriginal = nil}

  public var startDateNew: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startDateNew ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startDateNew = newValue}
  }
  /// Returns true if `startDateNew` has been explicitly set.
  public var hasStartDateNew: Bool {return self._startDateNew != nil}
  /// Clears the value of `startDateNew`. Subsequent reads from it will return its default value.
  public mutating func clearStartDateNew() {self._startDateNew = nil}

  public var endDateNew: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endDateNew ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endDateNew = newValue}
  }
  /// Returns true if `endDateNew` has been explicitly set.
  public var hasEndDateNew: Bool {return self._endDateNew != nil}
  /// Clears the value of `endDateNew`. Subsequent reads from it will return its default value.
  public mutating func clearEndDateNew() {self._endDateNew = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _startDateOriginal: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endDateOriginal: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _startDateNew: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endDateNew: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Metro_Meeting_Data_V1_Reason: @unchecked Sendable {}
extension Metro_Meeting_Data_V1_State: @unchecked Sendable {}
extension Metro_Meeting_Data_V1_Event: @unchecked Sendable {}
extension Metro_Meeting_Data_V1_SortKey: @unchecked Sendable {}
extension Metro_Meeting_Data_V1_Meeting: @unchecked Sendable {}
extension Metro_Meeting_Data_V1_MeetingDetail: @unchecked Sendable {}
extension Metro_Meeting_Data_V1_MeetingHistory: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metro.meeting.data.v1"

extension Metro_Meeting_Data_V1_Reason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_REASON"),
    1: .same(proto: "COMPANY_PROFILE_CHANGE"),
    2: .same(proto: "USER_PROFILE_CHANGE"),
    3: .same(proto: "BONUS_PROGRAM"),
    4: .same(proto: "CIP"),
    5: .same(proto: "VOUCHERS"),
    6: .same(proto: "CREDIT_SYSTEM"),
    7: .same(proto: "NO_REASON"),
    8: .same(proto: "CLICK_AND_COLLECT"),
  ]
}

extension Metro_Meeting_Data_V1_State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_STATE"),
    1: .same(proto: "ACCEPTED"),
    2: .same(proto: "WAITING"),
    3: .same(proto: "MOVED"),
    4: .same(proto: "CANCELLED"),
  ]
}

extension Metro_Meeting_Data_V1_Event: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_EVENT"),
    1: .same(proto: "USER_SCHEDULED"),
    2: .same(proto: "ADMIN_MOVED"),
    3: .same(proto: "USER_MOVED"),
    4: .same(proto: "ADMIN_CONFIRMED"),
    5: .same(proto: "USER_CANCELLED"),
  ]
}

extension Metro_Meeting_Data_V1_SortKey: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_KEY"),
    1: .same(proto: "IDENTIFIER"),
    2: .same(proto: "START_DATE"),
  ]
}

extension Metro_Meeting_Data_V1_Meeting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Meeting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    4: .same(proto: "reason"),
    5: .same(proto: "state"),
    6: .same(proto: "startDate"),
    7: .same(proto: "endDate"),
    8: .same(proto: "createdAt"),
    9: .same(proto: "updatedAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._startDate) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._endDate) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.reason != .unknownReason {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 4)
    }
    if self.state != .unknownState {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 5)
    }
    try { if let v = self._startDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._endDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Meeting_Data_V1_Meeting, rhs: Metro_Meeting_Data_V1_Meeting) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.state != rhs.state {return false}
    if lhs._startDate != rhs._startDate {return false}
    if lhs._endDate != rhs._endDate {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Meeting_Data_V1_MeetingDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MeetingDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    4: .same(proto: "reason"),
    5: .same(proto: "state"),
    6: .same(proto: "startDate"),
    7: .same(proto: "endDate"),
    8: .same(proto: "createdAt"),
    9: .same(proto: "updatedAt"),
    10: .same(proto: "history"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._startDate) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._endDate) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.history) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.reason != .unknownReason {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 4)
    }
    if self.state != .unknownState {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 5)
    }
    try { if let v = self._startDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._endDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.history.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.history, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Meeting_Data_V1_MeetingDetail, rhs: Metro_Meeting_Data_V1_MeetingDetail) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.state != rhs.state {return false}
    if lhs._startDate != rhs._startDate {return false}
    if lhs._endDate != rhs._endDate {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.history != rhs.history {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metro_Meeting_Data_V1_MeetingHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MeetingHistory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "startDateOriginal"),
    4: .same(proto: "endDateOriginal"),
    5: .same(proto: "startDateNew"),
    6: .same(proto: "endDateNew"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.event) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startDateOriginal) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._endDateOriginal) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._startDateNew) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._endDateNew) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.event != .unknownEvent {
      try visitor.visitSingularEnumField(value: self.event, fieldNumber: 1)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._startDateOriginal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._endDateOriginal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._startDateNew {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._endDateNew {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Metro_Meeting_Data_V1_MeetingHistory, rhs: Metro_Meeting_Data_V1_MeetingHistory) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._startDateOriginal != rhs._startDateOriginal {return false}
    if lhs._endDateOriginal != rhs._endDateOriginal {return false}
    if lhs._startDateNew != rhs._startDateNew {return false}
    if lhs._endDateNew != rhs._endDateNew {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

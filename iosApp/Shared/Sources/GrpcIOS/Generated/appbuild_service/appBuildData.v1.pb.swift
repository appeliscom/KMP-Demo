// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: appbuild_service/appBuildData.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Appbuild_V1_TemplateName: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownTemplate // = 0
  case solaris10 // = 1
  case flavor10 // = 2
  case orion10 // = 3
  case jantar10 // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownTemplate
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownTemplate
    case 1: self = .solaris10
    case 2: self = .flavor10
    case 3: self = .orion10
    case 4: self = .jantar10
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownTemplate: return 0
    case .solaris10: return 1
    case .flavor10: return 2
    case .orion10: return 3
    case .jantar10: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Appbuild_V1_TemplateName: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Appbuild_V1_TemplateName] = [
    .unknownTemplate,
    .solaris10,
    .flavor10,
    .orion10,
    .jantar10,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Appbuild_V1_TemplateEnvironment: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownEnv // = 0
  case prd // = 1
  case dev // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownEnv
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownEnv
    case 1: self = .prd
    case 2: self = .dev
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownEnv: return 0
    case .prd: return 1
    case .dev: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Appbuild_V1_TemplateEnvironment: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Appbuild_V1_TemplateEnvironment] = [
    .unknownEnv,
    .prd,
    .dev,
  ]
}

#endif  // swift(>=4.2)

/// Will be shown in administration
public struct Appelis_Appbuild_V1_TemplateV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name is like ID of template
  public var name: Appelis_Appbuild_V1_TemplateName = .unknownTemplate

  /// Template should say which assets needs to be provided.
  public var wantedAssets: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Output. Usage in build step.
public struct Appelis_Appbuild_V1_TemplateDataV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name is like ID of template
  public var name: Appelis_Appbuild_V1_TemplateName {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Color palette which application build must use.
  public var theme: Appelis_Appbuild_V1_AppTheme {
    get {return _storage._theme ?? Appelis_Appbuild_V1_AppTheme()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  public var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  public mutating func clearTheme() {_uniqueStorage()._theme = nil}

  /// Color palette which will be used to colorize assets.
  public var assetsTheme: Appelis_Appbuild_V1_AssetsTheme {
    get {return _storage._assetsTheme ?? Appelis_Appbuild_V1_AssetsTheme()}
    set {_uniqueStorage()._assetsTheme = newValue}
  }
  /// Returns true if `assetsTheme` has been explicitly set.
  public var hasAssetsTheme: Bool {return _storage._assetsTheme != nil}
  /// Clears the value of `assetsTheme`. Subsequent reads from it will return its default value.
  public mutating func clearAssetsTheme() {_uniqueStorage()._assetsTheme = nil}

  /// Url of assets that will be downloaded during build.
  public var assetsURL: String {
    get {return _storage._assetsURL}
    set {_uniqueStorage()._assetsURL = newValue}
  }

  /// Environment settings.
  public var env: Appelis_Appbuild_V1_TemplateEnvironment {
    get {return _storage._env}
    set {_uniqueStorage()._env = newValue}
  }

  public var appKey: String {
    get {return _storage._appKey}
    set {_uniqueStorage()._appKey = newValue}
  }

  /// Nice, formatted name of app.
  public var appName: String {
    get {return _storage._appName}
    set {_uniqueStorage()._appName = newValue}
  }

  /// AppName used in magic links
  public var serviceAppName: String {
    get {return _storage._serviceAppName}
    set {_uniqueStorage()._serviceAppName = newValue}
  }

  public var mapsApiKey: String {
    get {return _storage._mapsApiKey}
    set {_uniqueStorage()._mapsApiKey = newValue}
  }

  public var googleLoginApiKey: String {
    get {return _storage._googleLoginApiKey}
    set {_uniqueStorage()._googleLoginApiKey = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Appelis_Appbuild_V1_AppTheme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var primary: Appelis_HexColor {
    get {return _storage._primary ?? Appelis_HexColor()}
    set {_uniqueStorage()._primary = newValue}
  }
  /// Returns true if `primary` has been explicitly set.
  public var hasPrimary: Bool {return _storage._primary != nil}
  /// Clears the value of `primary`. Subsequent reads from it will return its default value.
  public mutating func clearPrimary() {_uniqueStorage()._primary = nil}

  public var primaryVariant: Appelis_HexColor {
    get {return _storage._primaryVariant ?? Appelis_HexColor()}
    set {_uniqueStorage()._primaryVariant = newValue}
  }
  /// Returns true if `primaryVariant` has been explicitly set.
  public var hasPrimaryVariant: Bool {return _storage._primaryVariant != nil}
  /// Clears the value of `primaryVariant`. Subsequent reads from it will return its default value.
  public mutating func clearPrimaryVariant() {_uniqueStorage()._primaryVariant = nil}

  public var onPrimaryH: Appelis_HexColor {
    get {return _storage._onPrimaryH ?? Appelis_HexColor()}
    set {_uniqueStorage()._onPrimaryH = newValue}
  }
  /// Returns true if `onPrimaryH` has been explicitly set.
  public var hasOnPrimaryH: Bool {return _storage._onPrimaryH != nil}
  /// Clears the value of `onPrimaryH`. Subsequent reads from it will return its default value.
  public mutating func clearOnPrimaryH() {_uniqueStorage()._onPrimaryH = nil}

  public var onPrimaryP: Appelis_HexColor {
    get {return _storage._onPrimaryP ?? Appelis_HexColor()}
    set {_uniqueStorage()._onPrimaryP = newValue}
  }
  /// Returns true if `onPrimaryP` has been explicitly set.
  public var hasOnPrimaryP: Bool {return _storage._onPrimaryP != nil}
  /// Clears the value of `onPrimaryP`. Subsequent reads from it will return its default value.
  public mutating func clearOnPrimaryP() {_uniqueStorage()._onPrimaryP = nil}

  public var secondary: Appelis_HexColor {
    get {return _storage._secondary ?? Appelis_HexColor()}
    set {_uniqueStorage()._secondary = newValue}
  }
  /// Returns true if `secondary` has been explicitly set.
  public var hasSecondary: Bool {return _storage._secondary != nil}
  /// Clears the value of `secondary`. Subsequent reads from it will return its default value.
  public mutating func clearSecondary() {_uniqueStorage()._secondary = nil}

  public var secondaryVariant: Appelis_HexColor {
    get {return _storage._secondaryVariant ?? Appelis_HexColor()}
    set {_uniqueStorage()._secondaryVariant = newValue}
  }
  /// Returns true if `secondaryVariant` has been explicitly set.
  public var hasSecondaryVariant: Bool {return _storage._secondaryVariant != nil}
  /// Clears the value of `secondaryVariant`. Subsequent reads from it will return its default value.
  public mutating func clearSecondaryVariant() {_uniqueStorage()._secondaryVariant = nil}

  public var onSecondaryH: Appelis_HexColor {
    get {return _storage._onSecondaryH ?? Appelis_HexColor()}
    set {_uniqueStorage()._onSecondaryH = newValue}
  }
  /// Returns true if `onSecondaryH` has been explicitly set.
  public var hasOnSecondaryH: Bool {return _storage._onSecondaryH != nil}
  /// Clears the value of `onSecondaryH`. Subsequent reads from it will return its default value.
  public mutating func clearOnSecondaryH() {_uniqueStorage()._onSecondaryH = nil}

  public var onSecondaryP: Appelis_HexColor {
    get {return _storage._onSecondaryP ?? Appelis_HexColor()}
    set {_uniqueStorage()._onSecondaryP = newValue}
  }
  /// Returns true if `onSecondaryP` has been explicitly set.
  public var hasOnSecondaryP: Bool {return _storage._onSecondaryP != nil}
  /// Clears the value of `onSecondaryP`. Subsequent reads from it will return its default value.
  public mutating func clearOnSecondaryP() {_uniqueStorage()._onSecondaryP = nil}

  public var appBackground: Appelis_HexColor {
    get {return _storage._appBackground ?? Appelis_HexColor()}
    set {_uniqueStorage()._appBackground = newValue}
  }
  /// Returns true if `appBackground` has been explicitly set.
  public var hasAppBackground: Bool {return _storage._appBackground != nil}
  /// Clears the value of `appBackground`. Subsequent reads from it will return its default value.
  public mutating func clearAppBackground() {_uniqueStorage()._appBackground = nil}

  public var onBackgroundH: Appelis_HexColor {
    get {return _storage._onBackgroundH ?? Appelis_HexColor()}
    set {_uniqueStorage()._onBackgroundH = newValue}
  }
  /// Returns true if `onBackgroundH` has been explicitly set.
  public var hasOnBackgroundH: Bool {return _storage._onBackgroundH != nil}
  /// Clears the value of `onBackgroundH`. Subsequent reads from it will return its default value.
  public mutating func clearOnBackgroundH() {_uniqueStorage()._onBackgroundH = nil}

  public var onBackgroundP: Appelis_HexColor {
    get {return _storage._onBackgroundP ?? Appelis_HexColor()}
    set {_uniqueStorage()._onBackgroundP = newValue}
  }
  /// Returns true if `onBackgroundP` has been explicitly set.
  public var hasOnBackgroundP: Bool {return _storage._onBackgroundP != nil}
  /// Clears the value of `onBackgroundP`. Subsequent reads from it will return its default value.
  public mutating func clearOnBackgroundP() {_uniqueStorage()._onBackgroundP = nil}

  public var surface: Appelis_HexColor {
    get {return _storage._surface ?? Appelis_HexColor()}
    set {_uniqueStorage()._surface = newValue}
  }
  /// Returns true if `surface` has been explicitly set.
  public var hasSurface: Bool {return _storage._surface != nil}
  /// Clears the value of `surface`. Subsequent reads from it will return its default value.
  public mutating func clearSurface() {_uniqueStorage()._surface = nil}

  public var onSurfaceH: Appelis_HexColor {
    get {return _storage._onSurfaceH ?? Appelis_HexColor()}
    set {_uniqueStorage()._onSurfaceH = newValue}
  }
  /// Returns true if `onSurfaceH` has been explicitly set.
  public var hasOnSurfaceH: Bool {return _storage._onSurfaceH != nil}
  /// Clears the value of `onSurfaceH`. Subsequent reads from it will return its default value.
  public mutating func clearOnSurfaceH() {_uniqueStorage()._onSurfaceH = nil}

  public var onSurfaceP: Appelis_HexColor {
    get {return _storage._onSurfaceP ?? Appelis_HexColor()}
    set {_uniqueStorage()._onSurfaceP = newValue}
  }
  /// Returns true if `onSurfaceP` has been explicitly set.
  public var hasOnSurfaceP: Bool {return _storage._onSurfaceP != nil}
  /// Clears the value of `onSurfaceP`. Subsequent reads from it will return its default value.
  public mutating func clearOnSurfaceP() {_uniqueStorage()._onSurfaceP = nil}

  public var badge: Appelis_HexColor {
    get {return _storage._badge ?? Appelis_HexColor()}
    set {_uniqueStorage()._badge = newValue}
  }
  /// Returns true if `badge` has been explicitly set.
  public var hasBadge: Bool {return _storage._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
  public mutating func clearBadge() {_uniqueStorage()._badge = nil}

  public var onBadge: Appelis_HexColor {
    get {return _storage._onBadge ?? Appelis_HexColor()}
    set {_uniqueStorage()._onBadge = newValue}
  }
  /// Returns true if `onBadge` has been explicitly set.
  public var hasOnBadge: Bool {return _storage._onBadge != nil}
  /// Clears the value of `onBadge`. Subsequent reads from it will return its default value.
  public mutating func clearOnBadge() {_uniqueStorage()._onBadge = nil}

  public var error: Appelis_HexColor {
    get {return _storage._error ?? Appelis_HexColor()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  public var hintColor: Appelis_HexColor {
    get {return _storage._hintColor ?? Appelis_HexColor()}
    set {_uniqueStorage()._hintColor = newValue}
  }
  /// Returns true if `hintColor` has been explicitly set.
  public var hasHintColor: Bool {return _storage._hintColor != nil}
  /// Clears the value of `hintColor`. Subsequent reads from it will return its default value.
  public mutating func clearHintColor() {_uniqueStorage()._hintColor = nil}

  public var dividerColor: Appelis_HexColor {
    get {return _storage._dividerColor ?? Appelis_HexColor()}
    set {_uniqueStorage()._dividerColor = newValue}
  }
  /// Returns true if `dividerColor` has been explicitly set.
  public var hasDividerColor: Bool {return _storage._dividerColor != nil}
  /// Clears the value of `dividerColor`. Subsequent reads from it will return its default value.
  public mutating func clearDividerColor() {_uniqueStorage()._dividerColor = nil}

  public var specialGreen: Appelis_HexColor {
    get {return _storage._specialGreen ?? Appelis_HexColor()}
    set {_uniqueStorage()._specialGreen = newValue}
  }
  /// Returns true if `specialGreen` has been explicitly set.
  public var hasSpecialGreen: Bool {return _storage._specialGreen != nil}
  /// Clears the value of `specialGreen`. Subsequent reads from it will return its default value.
  public mutating func clearSpecialGreen() {_uniqueStorage()._specialGreen = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Appelis_Appbuild_V1_AssetsTheme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var baseColor: Appelis_HexColor {
    get {return _baseColor ?? Appelis_HexColor()}
    set {_baseColor = newValue}
  }
  /// Returns true if `baseColor` has been explicitly set.
  public var hasBaseColor: Bool {return self._baseColor != nil}
  /// Clears the value of `baseColor`. Subsequent reads from it will return its default value.
  public mutating func clearBaseColor() {self._baseColor = nil}

  public var baseLight: Appelis_HexColor {
    get {return _baseLight ?? Appelis_HexColor()}
    set {_baseLight = newValue}
  }
  /// Returns true if `baseLight` has been explicitly set.
  public var hasBaseLight: Bool {return self._baseLight != nil}
  /// Clears the value of `baseLight`. Subsequent reads from it will return its default value.
  public mutating func clearBaseLight() {self._baseLight = nil}

  public var baseDark: Appelis_HexColor {
    get {return _baseDark ?? Appelis_HexColor()}
    set {_baseDark = newValue}
  }
  /// Returns true if `baseDark` has been explicitly set.
  public var hasBaseDark: Bool {return self._baseDark != nil}
  /// Clears the value of `baseDark`. Subsequent reads from it will return its default value.
  public mutating func clearBaseDark() {self._baseDark = nil}

  public var black: Appelis_HexColor {
    get {return _black ?? Appelis_HexColor()}
    set {_black = newValue}
  }
  /// Returns true if `black` has been explicitly set.
  public var hasBlack: Bool {return self._black != nil}
  /// Clears the value of `black`. Subsequent reads from it will return its default value.
  public mutating func clearBlack() {self._black = nil}

  public var white: Appelis_HexColor {
    get {return _white ?? Appelis_HexColor()}
    set {_white = newValue}
  }
  /// Returns true if `white` has been explicitly set.
  public var hasWhite: Bool {return self._white != nil}
  /// Clears the value of `white`. Subsequent reads from it will return its default value.
  public mutating func clearWhite() {self._white = nil}

  public var success: Appelis_HexColor {
    get {return _success ?? Appelis_HexColor()}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  public var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  public mutating func clearSuccess() {self._success = nil}

  public var error: Appelis_HexColor {
    get {return _error ?? Appelis_HexColor()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var badge: Appelis_HexColor {
    get {return _badge ?? Appelis_HexColor()}
    set {_badge = newValue}
  }
  /// Returns true if `badge` has been explicitly set.
  public var hasBadge: Bool {return self._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
  public mutating func clearBadge() {self._badge = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _baseColor: Appelis_HexColor? = nil
  fileprivate var _baseLight: Appelis_HexColor? = nil
  fileprivate var _baseDark: Appelis_HexColor? = nil
  fileprivate var _black: Appelis_HexColor? = nil
  fileprivate var _white: Appelis_HexColor? = nil
  fileprivate var _success: Appelis_HexColor? = nil
  fileprivate var _error: Appelis_HexColor? = nil
  fileprivate var _badge: Appelis_HexColor? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Appbuild_V1_TemplateName: @unchecked Sendable {}
extension Appelis_Appbuild_V1_TemplateEnvironment: @unchecked Sendable {}
extension Appelis_Appbuild_V1_TemplateV1: @unchecked Sendable {}
extension Appelis_Appbuild_V1_TemplateDataV1: @unchecked Sendable {}
extension Appelis_Appbuild_V1_AppTheme: @unchecked Sendable {}
extension Appelis_Appbuild_V1_AssetsTheme: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.appbuild.v1"

extension Appelis_Appbuild_V1_TemplateName: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_TEMPLATE"),
    1: .same(proto: "SOLARIS_1_0"),
    2: .same(proto: "FLAVOR_1_0"),
    3: .same(proto: "ORION_1_0"),
    4: .same(proto: "JANTAR_1_0"),
  ]
}

extension Appelis_Appbuild_V1_TemplateEnvironment: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_ENV"),
    1: .same(proto: "PRD"),
    2: .same(proto: "DEV"),
  ]
}

extension Appelis_Appbuild_V1_TemplateV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TemplateV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "wantedAssets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.wantedAssets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.name != .unknownTemplate {
      try visitor.visitSingularEnumField(value: self.name, fieldNumber: 1)
    }
    if !self.wantedAssets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.wantedAssets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_TemplateV1, rhs: Appelis_Appbuild_V1_TemplateV1) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.wantedAssets != rhs.wantedAssets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_TemplateDataV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TemplateDataV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "theme"),
    3: .same(proto: "assetsTheme"),
    4: .same(proto: "assetsUrl"),
    5: .same(proto: "env"),
    6: .same(proto: "appKey"),
    7: .same(proto: "appName"),
    8: .same(proto: "serviceAppName"),
    9: .same(proto: "mapsApiKey"),
    10: .same(proto: "googleLoginApiKey"),
  ]

  fileprivate class _StorageClass {
    var _name: Appelis_Appbuild_V1_TemplateName = .unknownTemplate
    var _theme: Appelis_Appbuild_V1_AppTheme? = nil
    var _assetsTheme: Appelis_Appbuild_V1_AssetsTheme? = nil
    var _assetsURL: String = String()
    var _env: Appelis_Appbuild_V1_TemplateEnvironment = .unknownEnv
    var _appKey: String = String()
    var _appName: String = String()
    var _serviceAppName: String = String()
    var _mapsApiKey: String = String()
    var _googleLoginApiKey: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _theme = source._theme
      _assetsTheme = source._assetsTheme
      _assetsURL = source._assetsURL
      _env = source._env
      _appKey = source._appKey
      _appName = source._appName
      _serviceAppName = source._serviceAppName
      _mapsApiKey = source._mapsApiKey
      _googleLoginApiKey = source._googleLoginApiKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._theme) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._assetsTheme) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._assetsURL) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._env) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._appKey) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._appName) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._serviceAppName) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._mapsApiKey) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._googleLoginApiKey) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._name != .unknownTemplate {
        try visitor.visitSingularEnumField(value: _storage._name, fieldNumber: 1)
      }
      try { if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._assetsTheme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._assetsURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetsURL, fieldNumber: 4)
      }
      if _storage._env != .unknownEnv {
        try visitor.visitSingularEnumField(value: _storage._env, fieldNumber: 5)
      }
      if !_storage._appKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appKey, fieldNumber: 6)
      }
      if !_storage._appName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appName, fieldNumber: 7)
      }
      if !_storage._serviceAppName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceAppName, fieldNumber: 8)
      }
      if !_storage._mapsApiKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mapsApiKey, fieldNumber: 9)
      }
      if !_storage._googleLoginApiKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._googleLoginApiKey, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_TemplateDataV1, rhs: Appelis_Appbuild_V1_TemplateDataV1) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._assetsTheme != rhs_storage._assetsTheme {return false}
        if _storage._assetsURL != rhs_storage._assetsURL {return false}
        if _storage._env != rhs_storage._env {return false}
        if _storage._appKey != rhs_storage._appKey {return false}
        if _storage._appName != rhs_storage._appName {return false}
        if _storage._serviceAppName != rhs_storage._serviceAppName {return false}
        if _storage._mapsApiKey != rhs_storage._mapsApiKey {return false}
        if _storage._googleLoginApiKey != rhs_storage._googleLoginApiKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_AppTheme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppTheme"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "primary"),
    2: .same(proto: "primaryVariant"),
    3: .same(proto: "onPrimaryH"),
    4: .same(proto: "onPrimaryP"),
    5: .same(proto: "secondary"),
    6: .same(proto: "secondaryVariant"),
    7: .same(proto: "onSecondaryH"),
    8: .same(proto: "onSecondaryP"),
    9: .same(proto: "appBackground"),
    10: .same(proto: "onBackgroundH"),
    11: .same(proto: "onBackgroundP"),
    12: .same(proto: "surface"),
    13: .same(proto: "onSurfaceH"),
    14: .same(proto: "onSurfaceP"),
    15: .same(proto: "badge"),
    16: .same(proto: "onBadge"),
    17: .same(proto: "error"),
    18: .same(proto: "hintColor"),
    19: .same(proto: "dividerColor"),
    20: .same(proto: "specialGreen"),
  ]

  fileprivate class _StorageClass {
    var _primary: Appelis_HexColor? = nil
    var _primaryVariant: Appelis_HexColor? = nil
    var _onPrimaryH: Appelis_HexColor? = nil
    var _onPrimaryP: Appelis_HexColor? = nil
    var _secondary: Appelis_HexColor? = nil
    var _secondaryVariant: Appelis_HexColor? = nil
    var _onSecondaryH: Appelis_HexColor? = nil
    var _onSecondaryP: Appelis_HexColor? = nil
    var _appBackground: Appelis_HexColor? = nil
    var _onBackgroundH: Appelis_HexColor? = nil
    var _onBackgroundP: Appelis_HexColor? = nil
    var _surface: Appelis_HexColor? = nil
    var _onSurfaceH: Appelis_HexColor? = nil
    var _onSurfaceP: Appelis_HexColor? = nil
    var _badge: Appelis_HexColor? = nil
    var _onBadge: Appelis_HexColor? = nil
    var _error: Appelis_HexColor? = nil
    var _hintColor: Appelis_HexColor? = nil
    var _dividerColor: Appelis_HexColor? = nil
    var _specialGreen: Appelis_HexColor? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _primary = source._primary
      _primaryVariant = source._primaryVariant
      _onPrimaryH = source._onPrimaryH
      _onPrimaryP = source._onPrimaryP
      _secondary = source._secondary
      _secondaryVariant = source._secondaryVariant
      _onSecondaryH = source._onSecondaryH
      _onSecondaryP = source._onSecondaryP
      _appBackground = source._appBackground
      _onBackgroundH = source._onBackgroundH
      _onBackgroundP = source._onBackgroundP
      _surface = source._surface
      _onSurfaceH = source._onSurfaceH
      _onSurfaceP = source._onSurfaceP
      _badge = source._badge
      _onBadge = source._onBadge
      _error = source._error
      _hintColor = source._hintColor
      _dividerColor = source._dividerColor
      _specialGreen = source._specialGreen
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._primary) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._primaryVariant) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._onPrimaryH) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._onPrimaryP) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._secondary) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._secondaryVariant) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._onSecondaryH) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._onSecondaryP) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._appBackground) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._onBackgroundH) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._onBackgroundP) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._surface) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._onSurfaceH) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._onSurfaceP) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._badge) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._onBadge) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._error) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._hintColor) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._dividerColor) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._specialGreen) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._primary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._primaryVariant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._onPrimaryH {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._onPrimaryP {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._secondary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._secondaryVariant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._onSecondaryH {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._onSecondaryP {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._appBackground {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._onBackgroundH {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._onBackgroundP {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._surface {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._onSurfaceH {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._onSurfaceP {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._badge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._onBadge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._hintColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._dividerColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._specialGreen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_AppTheme, rhs: Appelis_Appbuild_V1_AppTheme) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._primary != rhs_storage._primary {return false}
        if _storage._primaryVariant != rhs_storage._primaryVariant {return false}
        if _storage._onPrimaryH != rhs_storage._onPrimaryH {return false}
        if _storage._onPrimaryP != rhs_storage._onPrimaryP {return false}
        if _storage._secondary != rhs_storage._secondary {return false}
        if _storage._secondaryVariant != rhs_storage._secondaryVariant {return false}
        if _storage._onSecondaryH != rhs_storage._onSecondaryH {return false}
        if _storage._onSecondaryP != rhs_storage._onSecondaryP {return false}
        if _storage._appBackground != rhs_storage._appBackground {return false}
        if _storage._onBackgroundH != rhs_storage._onBackgroundH {return false}
        if _storage._onBackgroundP != rhs_storage._onBackgroundP {return false}
        if _storage._surface != rhs_storage._surface {return false}
        if _storage._onSurfaceH != rhs_storage._onSurfaceH {return false}
        if _storage._onSurfaceP != rhs_storage._onSurfaceP {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._onBadge != rhs_storage._onBadge {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._hintColor != rhs_storage._hintColor {return false}
        if _storage._dividerColor != rhs_storage._dividerColor {return false}
        if _storage._specialGreen != rhs_storage._specialGreen {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_AssetsTheme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetsTheme"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "baseColor"),
    2: .same(proto: "baseLight"),
    3: .same(proto: "baseDark"),
    4: .same(proto: "black"),
    5: .same(proto: "white"),
    6: .same(proto: "success"),
    7: .same(proto: "error"),
    8: .same(proto: "badge"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseColor) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._baseLight) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._baseDark) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._black) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._white) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._success) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._badge) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._baseLight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._baseDark {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._black {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._white {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._success {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._badge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_AssetsTheme, rhs: Appelis_Appbuild_V1_AssetsTheme) -> Bool {
    if lhs._baseColor != rhs._baseColor {return false}
    if lhs._baseLight != rhs._baseLight {return false}
    if lhs._baseDark != rhs._baseDark {return false}
    if lhs._black != rhs._black {return false}
    if lhs._white != rhs._white {return false}
    if lhs._success != rhs._success {return false}
    if lhs._error != rhs._error {return false}
    if lhs._badge != rhs._badge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: appbuild_service/build.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_Appbuild_V1_Build {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var projectID: String = String()

  public var config: Appelis_Appbuild_V1_BuildConfiguration {
    get {return _config ?? Appelis_Appbuild_V1_BuildConfiguration()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  /// TODO Artifacts
  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _config: Appelis_Appbuild_V1_BuildConfiguration? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Appelis_Appbuild_V1_BuildConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var template: Appelis_Appbuild_V1_TemplateDataV1 {
    get {return _storage._template ?? Appelis_Appbuild_V1_TemplateDataV1()}
    set {_uniqueStorage()._template = newValue}
  }
  /// Returns true if `template` has been explicitly set.
  public var hasTemplate: Bool {return _storage._template != nil}
  /// Clears the value of `template`. Subsequent reads from it will return its default value.
  public mutating func clearTemplate() {_uniqueStorage()._template = nil}

  public var android: Appelis_Appbuild_V1_AndroidConfiguration {
    get {return _storage._android ?? Appelis_Appbuild_V1_AndroidConfiguration()}
    set {_uniqueStorage()._android = newValue}
  }
  /// Returns true if `android` has been explicitly set.
  public var hasAndroid: Bool {return _storage._android != nil}
  /// Clears the value of `android`. Subsequent reads from it will return its default value.
  public mutating func clearAndroid() {_uniqueStorage()._android = nil}

  public var ios: Appelis_Appbuild_V1_IosConfiguration {
    get {return _storage._ios ?? Appelis_Appbuild_V1_IosConfiguration()}
    set {_uniqueStorage()._ios = newValue}
  }
  /// Returns true if `ios` has been explicitly set.
  public var hasIos: Bool {return _storage._ios != nil}
  /// Clears the value of `ios`. Subsequent reads from it will return its default value.
  public mutating func clearIos() {_uniqueStorage()._ios = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Appelis_Appbuild_V1_AndroidConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var packageName: String = String()

  public var git: Appelis_Appbuild_V1_GitConfiguration {
    get {return _git ?? Appelis_Appbuild_V1_GitConfiguration()}
    set {_git = newValue}
  }
  /// Returns true if `git` has been explicitly set.
  public var hasGit: Bool {return self._git != nil}
  /// Clears the value of `git`. Subsequent reads from it will return its default value.
  public mutating func clearGit() {self._git = nil}

  public var releaseCertificate: Appelis_Appbuild_V1_ReleaseCertificate {
    get {return _releaseCertificate ?? Appelis_Appbuild_V1_ReleaseCertificate()}
    set {_releaseCertificate = newValue}
  }
  /// Returns true if `releaseCertificate` has been explicitly set.
  public var hasReleaseCertificate: Bool {return self._releaseCertificate != nil}
  /// Clears the value of `releaseCertificate`. Subsequent reads from it will return its default value.
  public mutating func clearReleaseCertificate() {self._releaseCertificate = nil}

  public var googleServicesJson: Data = Data()

  public var versionCode: UInt64 = 0

  public var version: Appelis_SemVer {
    get {return _version ?? Appelis_SemVer()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _git: Appelis_Appbuild_V1_GitConfiguration? = nil
  fileprivate var _releaseCertificate: Appelis_Appbuild_V1_ReleaseCertificate? = nil
  fileprivate var _version: Appelis_SemVer? = nil
}

public struct Appelis_Appbuild_V1_ReleaseCertificate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var keyAlias: String = String()

  public var keyPassword: String = String()

  public var storePassword: String = String()

  public var content: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Appbuild_V1_IosConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bundleID: String = String()

  public var git: Appelis_Appbuild_V1_GitConfiguration {
    get {return _git ?? Appelis_Appbuild_V1_GitConfiguration()}
    set {_git = newValue}
  }
  /// Returns true if `git` has been explicitly set.
  public var hasGit: Bool {return self._git != nil}
  /// Clears the value of `git`. Subsequent reads from it will return its default value.
  public mutating func clearGit() {self._git = nil}

  public var releaseCertificate: Data = Data()

  public var googleServicesPlist: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _git: Appelis_Appbuild_V1_GitConfiguration? = nil
}

public struct Appelis_Appbuild_V1_GitConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var repositoryURL: String = String()

  public var ref: String = String()

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {self._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Appbuild_V1_Build: @unchecked Sendable {}
extension Appelis_Appbuild_V1_BuildConfiguration: @unchecked Sendable {}
extension Appelis_Appbuild_V1_AndroidConfiguration: @unchecked Sendable {}
extension Appelis_Appbuild_V1_ReleaseCertificate: @unchecked Sendable {}
extension Appelis_Appbuild_V1_IosConfiguration: @unchecked Sendable {}
extension Appelis_Appbuild_V1_GitConfiguration: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.appbuild.v1"

extension Appelis_Appbuild_V1_Build: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Build"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "projectId"),
    3: .same(proto: "config"),
    4: .same(proto: "createdAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_Build, rhs: Appelis_Appbuild_V1_Build) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs._config != rhs._config {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_BuildConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "template"),
    2: .same(proto: "android"),
    3: .same(proto: "ios"),
  ]

  fileprivate class _StorageClass {
    var _template: Appelis_Appbuild_V1_TemplateDataV1? = nil
    var _android: Appelis_Appbuild_V1_AndroidConfiguration? = nil
    var _ios: Appelis_Appbuild_V1_IosConfiguration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _template = source._template
      _android = source._android
      _ios = source._ios
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._template) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._android) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._ios) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._template {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._android {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ios {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_BuildConfiguration, rhs: Appelis_Appbuild_V1_BuildConfiguration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._template != rhs_storage._template {return false}
        if _storage._android != rhs_storage._android {return false}
        if _storage._ios != rhs_storage._ios {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_AndroidConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AndroidConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packageName"),
    2: .same(proto: "git"),
    3: .same(proto: "releaseCertificate"),
    4: .same(proto: "googleServicesJson"),
    5: .same(proto: "versionCode"),
    6: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.packageName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._git) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._releaseCertificate) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.googleServicesJson) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.versionCode) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.packageName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageName, fieldNumber: 1)
    }
    try { if let v = self._git {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._releaseCertificate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.googleServicesJson.isEmpty {
      try visitor.visitSingularBytesField(value: self.googleServicesJson, fieldNumber: 4)
    }
    if self.versionCode != 0 {
      try visitor.visitSingularUInt64Field(value: self.versionCode, fieldNumber: 5)
    }
    try { if let v = self._version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_AndroidConfiguration, rhs: Appelis_Appbuild_V1_AndroidConfiguration) -> Bool {
    if lhs.packageName != rhs.packageName {return false}
    if lhs._git != rhs._git {return false}
    if lhs._releaseCertificate != rhs._releaseCertificate {return false}
    if lhs.googleServicesJson != rhs.googleServicesJson {return false}
    if lhs.versionCode != rhs.versionCode {return false}
    if lhs._version != rhs._version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_ReleaseCertificate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReleaseCertificate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyAlias"),
    2: .same(proto: "keyPassword"),
    3: .same(proto: "storePassword"),
    4: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyAlias) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.keyPassword) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.storePassword) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyAlias.isEmpty {
      try visitor.visitSingularStringField(value: self.keyAlias, fieldNumber: 1)
    }
    if !self.keyPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.keyPassword, fieldNumber: 2)
    }
    if !self.storePassword.isEmpty {
      try visitor.visitSingularStringField(value: self.storePassword, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_ReleaseCertificate, rhs: Appelis_Appbuild_V1_ReleaseCertificate) -> Bool {
    if lhs.keyAlias != rhs.keyAlias {return false}
    if lhs.keyPassword != rhs.keyPassword {return false}
    if lhs.storePassword != rhs.storePassword {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_IosConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IosConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bundleId"),
    2: .same(proto: "git"),
    3: .same(proto: "releaseCertificate"),
    4: .same(proto: "googleServicesPlist"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bundleID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._git) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.releaseCertificate) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.googleServicesPlist) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.bundleID.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleID, fieldNumber: 1)
    }
    try { if let v = self._git {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.releaseCertificate.isEmpty {
      try visitor.visitSingularBytesField(value: self.releaseCertificate, fieldNumber: 3)
    }
    if !self.googleServicesPlist.isEmpty {
      try visitor.visitSingularBytesField(value: self.googleServicesPlist, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_IosConfiguration, rhs: Appelis_Appbuild_V1_IosConfiguration) -> Bool {
    if lhs.bundleID != rhs.bundleID {return false}
    if lhs._git != rhs._git {return false}
    if lhs.releaseCertificate != rhs.releaseCertificate {return false}
    if lhs.googleServicesPlist != rhs.googleServicesPlist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Appbuild_V1_GitConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GitConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "repositoryUrl"),
    3: .same(proto: "ref"),
    4: .same(proto: "updatedAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.repositoryURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ref) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.repositoryURL.isEmpty {
      try visitor.visitSingularStringField(value: self.repositoryURL, fieldNumber: 2)
    }
    if !self.ref.isEmpty {
      try visitor.visitSingularStringField(value: self.ref, fieldNumber: 3)
    }
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Appbuild_V1_GitConfiguration, rhs: Appelis_Appbuild_V1_GitConfiguration) -> Bool {
    if lhs.repositoryURL != rhs.repositoryURL {return false}
    if lhs.ref != rhs.ref {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: user_service/userGroupsService.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol? { get }

  func usersGroups(
    _ request: Appelis_UserService_Groups_V1_UserGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UserGroupsRequest, Appelis_UserService_Groups_V1_UserGroupsResponse>

  func groupUsers(
    _ request: Appelis_UserService_Groups_V1_GroupUsersRequest,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_UserService_Groups_V1_Int64Array) -> Void
  ) -> ServerStreamingCall<Appelis_UserService_Groups_V1_GroupUsersRequest, Appelis_UserService_Groups_V1_Int64Array>

  func setUserGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteUsersGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func clearGroupUsers(
    _ request: Appelis_UserService_Groups_V1_ClearGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_ClearGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getDistinctIcosCountByIdGroup(
    _ request: Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest, Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupResponse>
}

extension Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientProtocol {
  public var serviceName: String {
    return "appelis.userService.groups.v1.UserGroupsPrivateAdmin"
  }

  /// Returns per user his groups array.
  ///
  /// - Parameters:
  ///   - request: Request to send to UsersGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func usersGroups(
    _ request: Appelis_UserService_Groups_V1_UserGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UserGroupsRequest, Appelis_UserService_Groups_V1_UserGroupsResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.usersGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUsersGroupsInterceptors() ?? []
    )
  }

  /// Returns for group, mobile users ids.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupUsers.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func groupUsers(
    _ request: Appelis_UserService_Groups_V1_GroupUsersRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_UserService_Groups_V1_Int64Array) -> Void
  ) -> ServerStreamingCall<Appelis_UserService_Groups_V1_GroupUsersRequest, Appelis_UserService_Groups_V1_Int64Array> {
    return self.makeServerStreamingCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.groupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupUsersInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to SetUserGroupMap
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUserGroupMap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setUserGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.setUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupMapInterceptors() ?? []
    )
  }

  /// Unary call to DeleteUsersGroupMap
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUsersGroupMap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteUsersGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.deleteUsersGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersGroupMapInterceptors() ?? []
    )
  }

  /// Deletes all group mapping.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clearGroupUsers(
    _ request: Appelis_UserService_Groups_V1_ClearGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_ClearGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.clearGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearGroupUsersInterceptors() ?? []
    )
  }

  /// Unary call to GetDistinctIcosCountByIdGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDistinctIcosCountByIdGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDistinctIcosCountByIdGroup(
    _ request: Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest, Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.getDistinctIcosCountByIdGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDistinctIcosCountByIdGroupInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Groups_V1_UserGroupsPrivateAdminNIOClient")
public final class Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClient: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.groups.v1.UserGroupsPrivateAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Groups_V1_UserGroupsPrivateAdminNIOClient: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.groups.v1.UserGroupsPrivateAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Groups_V1_UserGroupsPrivateAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol? { get }

  func makeUsersGroupsCall(
    _ request: Appelis_UserService_Groups_V1_UserGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UserGroupsRequest, Appelis_UserService_Groups_V1_UserGroupsResponse>

  func makeGroupUsersCall(
    _ request: Appelis_UserService_Groups_V1_GroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_UserService_Groups_V1_GroupUsersRequest, Appelis_UserService_Groups_V1_Int64Array>

  func makeSetUserGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteUsersGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeClearGroupUsersCall(
    _ request: Appelis_UserService_Groups_V1_ClearGroupUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_ClearGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetDistinctIcosCountByIDGroupCall(
    _ request: Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest, Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Groups_V1_UserGroupsPrivateAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeUsersGroupsCall(
    _ request: Appelis_UserService_Groups_V1_UserGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UserGroupsRequest, Appelis_UserService_Groups_V1_UserGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.usersGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUsersGroupsInterceptors() ?? []
    )
  }

  public func makeGroupUsersCall(
    _ request: Appelis_UserService_Groups_V1_GroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_UserService_Groups_V1_GroupUsersRequest, Appelis_UserService_Groups_V1_Int64Array> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.groupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupUsersInterceptors() ?? []
    )
  }

  public func makeSetUserGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.setUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupMapInterceptors() ?? []
    )
  }

  public func makeDeleteUsersGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.deleteUsersGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersGroupMapInterceptors() ?? []
    )
  }

  public func makeClearGroupUsersCall(
    _ request: Appelis_UserService_Groups_V1_ClearGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_ClearGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.clearGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearGroupUsersInterceptors() ?? []
    )
  }

  public func makeGetDistinctIcosCountByIDGroupCall(
    _ request: Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest, Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.getDistinctIcosCountByIdGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDistinctIcosCountByIdGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Groups_V1_UserGroupsPrivateAdminAsyncClientProtocol {
  public func usersGroups(
    _ request: Appelis_UserService_Groups_V1_UserGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Groups_V1_UserGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.usersGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUsersGroupsInterceptors() ?? []
    )
  }

  public func groupUsers(
    _ request: Appelis_UserService_Groups_V1_GroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_UserService_Groups_V1_Int64Array> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.groupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupUsersInterceptors() ?? []
    )
  }

  public func setUserGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.setUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupMapInterceptors() ?? []
    )
  }

  public func deleteUsersGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.deleteUsersGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersGroupMapInterceptors() ?? []
    )
  }

  public func clearGroupUsers(
    _ request: Appelis_UserService_Groups_V1_ClearGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.clearGroupUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearGroupUsersInterceptors() ?? []
    )
  }

  public func getDistinctIcosCountByIdGroup(
    _ request: Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.getDistinctIcosCountByIdGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDistinctIcosCountByIdGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Groups_V1_UserGroupsPrivateAdminAsyncClient: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'usersGroups'.
  func makeUsersGroupsInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_UserGroupsRequest, Appelis_UserService_Groups_V1_UserGroupsResponse>]

  /// - Returns: Interceptors to use when invoking 'groupUsers'.
  func makeGroupUsersInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_GroupUsersRequest, Appelis_UserService_Groups_V1_Int64Array>]

  /// - Returns: Interceptors to use when invoking 'setUserGroupMap'.
  func makeSetUserGroupMapInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteUsersGroupMap'.
  func makeDeleteUsersGroupMapInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_UsersGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'clearGroupUsers'.
  func makeClearGroupUsersInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_ClearGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getDistinctIcosCountByIdGroup'.
  func makeGetDistinctIcosCountByIdGroupInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupRequest, Appelis_UserService_Groups_V1_GetDistinctIcosCountByIdGroupResponse>]
}

public enum Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserGroupsPrivateAdmin",
    fullName: "appelis.userService.groups.v1.UserGroupsPrivateAdmin",
    methods: [
      Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.usersGroups,
      Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.groupUsers,
      Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.setUserGroupMap,
      Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.deleteUsersGroupMap,
      Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.clearGroupUsers,
      Appelis_UserService_Groups_V1_UserGroupsPrivateAdminClientMetadata.Methods.getDistinctIcosCountByIdGroup,
    ]
  )

  public enum Methods {
    public static let usersGroups = GRPCMethodDescriptor(
      name: "UsersGroups",
      path: "/appelis.userService.groups.v1.UserGroupsPrivateAdmin/UsersGroups",
      type: GRPCCallType.unary
    )

    public static let groupUsers = GRPCMethodDescriptor(
      name: "GroupUsers",
      path: "/appelis.userService.groups.v1.UserGroupsPrivateAdmin/GroupUsers",
      type: GRPCCallType.serverStreaming
    )

    public static let setUserGroupMap = GRPCMethodDescriptor(
      name: "SetUserGroupMap",
      path: "/appelis.userService.groups.v1.UserGroupsPrivateAdmin/SetUserGroupMap",
      type: GRPCCallType.unary
    )

    public static let deleteUsersGroupMap = GRPCMethodDescriptor(
      name: "DeleteUsersGroupMap",
      path: "/appelis.userService.groups.v1.UserGroupsPrivateAdmin/DeleteUsersGroupMap",
      type: GRPCCallType.unary
    )

    public static let clearGroupUsers = GRPCMethodDescriptor(
      name: "ClearGroupUsers",
      path: "/appelis.userService.groups.v1.UserGroupsPrivateAdmin/ClearGroupUsers",
      type: GRPCCallType.unary
    )

    public static let getDistinctIcosCountByIdGroup = GRPCMethodDescriptor(
      name: "GetDistinctIcosCountByIdGroup",
      path: "/appelis.userService.groups.v1.UserGroupsPrivateAdmin/GetDistinctIcosCountByIdGroup",
      type: GRPCCallType.unary
    )
  }
}


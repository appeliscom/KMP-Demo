// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_service/userCompanyService.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_UserService_Companies_V1_GetCompaniesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_GetCompaniesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Appelis_UserService_Companies_V1_Company] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_GetCompanyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_ByExternalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var projectID: String = String()

  public var companyExternalID: String = String()

  public var businessExternalID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_GetCompanyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var company: Appelis_UserService_Companies_V1_Company {
    get {return _company ?? Appelis_UserService_Companies_V1_Company()}
    set {_company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  public var hasCompany: Bool {return self._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  public mutating func clearCompany() {self._company = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _company: Appelis_UserService_Companies_V1_Company? = nil
}

public struct Appelis_UserService_Companies_V1_ByExternalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var company: Appelis_UserService_Companies_V1_Company {
    get {return _company ?? Appelis_UserService_Companies_V1_Company()}
    set {_company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  public var hasCompany: Bool {return self._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  public mutating func clearCompany() {self._company = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _company: Appelis_UserService_Companies_V1_Company? = nil
}

public struct Appelis_UserService_Companies_V1_CompanyBusiness {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idBusiness: Int64 = 0

  public var name: String = String()

  public var externalID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _externalID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  public var hasExternalID: Bool {return self._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalID() {self._externalID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _externalID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Appelis_UserService_Companies_V1_Company {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Appelis_UserService_Companies_V1_Company.CompanyType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var idCompany: Int64 {
    get {return _storage._idCompany}
    set {_uniqueStorage()._idCompany = newValue}
  }

  public var idBusiness: Int64 {
    get {return _storage._idBusiness}
    set {_uniqueStorage()._idBusiness = newValue}
  }

  public var active: Bool {
    get {return _storage._active}
    set {_uniqueStorage()._active = newValue}
  }

  public var projectID: String {
    get {return _storage._projectID}
    set {_uniqueStorage()._projectID = newValue}
  }

  public var prospectSendActive: Bool {
    get {return _storage._prospectSendActive}
    set {_uniqueStorage()._prospectSendActive = newValue}
  }

  public var bonusSystemStatus: Appelis_UserService_Companies_V1_Company.SystemStatus {
    get {return _storage._bonusSystemStatus}
    set {_uniqueStorage()._bonusSystemStatus = newValue}
  }

  public var creditSystemStatus: Appelis_UserService_Companies_V1_Company.SystemStatus {
    get {return _storage._creditSystemStatus}
    set {_uniqueStorage()._creditSystemStatus = newValue}
  }

  public var ico: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._ico ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._ico = newValue}
  }
  /// Returns true if `ico` has been explicitly set.
  public var hasIco: Bool {return _storage._ico != nil}
  /// Clears the value of `ico`. Subsequent reads from it will return its default value.
  public mutating func clearIco() {_uniqueStorage()._ico = nil}

  public var prospectSendAddress: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._prospectSendAddress ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._prospectSendAddress = newValue}
  }
  /// Returns true if `prospectSendAddress` has been explicitly set.
  public var hasProspectSendAddress: Bool {return _storage._prospectSendAddress != nil}
  /// Clears the value of `prospectSendAddress`. Subsequent reads from it will return its default value.
  public mutating func clearProspectSendAddress() {_uniqueStorage()._prospectSendAddress = nil}

  public var externalID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._externalID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  public var hasExternalID: Bool {return _storage._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalID() {_uniqueStorage()._externalID = nil}

  public var externalCheckDig: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._externalCheckDig ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._externalCheckDig = newValue}
  }
  /// Returns true if `externalCheckDig` has been explicitly set.
  public var hasExternalCheckDig: Bool {return _storage._externalCheckDig != nil}
  /// Clears the value of `externalCheckDig`. Subsequent reads from it will return its default value.
  public mutating func clearExternalCheckDig() {_uniqueStorage()._externalCheckDig = nil}

  public var externalCatID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._externalCatID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._externalCatID = newValue}
  }
  /// Returns true if `externalCatID` has been explicitly set.
  public var hasExternalCatID: Bool {return _storage._externalCatID != nil}
  /// Clears the value of `externalCatID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalCatID() {_uniqueStorage()._externalCatID = nil}

  public var advisorID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._advisorID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._advisorID = newValue}
  }
  /// Returns true if `advisorID` has been explicitly set.
  public var hasAdvisorID: Bool {return _storage._advisorID != nil}
  /// Clears the value of `advisorID`. Subsequent reads from it will return its default value.
  public mutating func clearAdvisorID() {_uniqueStorage()._advisorID = nil}

  public var timeRegistration: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timeRegistration ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timeRegistration = newValue}
  }
  /// Returns true if `timeRegistration` has been explicitly set.
  public var hasTimeRegistration: Bool {return _storage._timeRegistration != nil}
  /// Clears the value of `timeRegistration`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRegistration() {_uniqueStorage()._timeRegistration = nil}

  public var business: Appelis_UserService_Companies_V1_CompanyBusiness {
    get {return _storage._business ?? Appelis_UserService_Companies_V1_CompanyBusiness()}
    set {_uniqueStorage()._business = newValue}
  }
  /// Returns true if `business` has been explicitly set.
  public var hasBusiness: Bool {return _storage._business != nil}
  /// Clears the value of `business`. Subsequent reads from it will return its default value.
  public mutating func clearBusiness() {_uniqueStorage()._business = nil}

  public var icoProfile: Appelis_UserService_Companies_V1_IcoProfile {
    get {return _storage._icoProfile ?? Appelis_UserService_Companies_V1_IcoProfile()}
    set {_uniqueStorage()._icoProfile = newValue}
  }
  /// Returns true if `icoProfile` has been explicitly set.
  public var hasIcoProfile: Bool {return _storage._icoProfile != nil}
  /// Clears the value of `icoProfile`. Subsequent reads from it will return its default value.
  public mutating func clearIcoProfile() {_uniqueStorage()._icoProfile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum SystemStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case statusUnknown // = 0
    case active // = 1
    case notActive // = 2
    case blocked // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .statusUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .statusUnknown
      case 1: self = .active
      case 2: self = .notActive
      case 3: self = .blocked
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .statusUnknown: return 0
      case .active: return 1
      case .notActive: return 2
      case .blocked: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum CompanyType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case typeUnknown // = 0
    case gold // = 1
    case silver // = 2
    case normal // = 3
    case delivery // = 4
    case vip // = 5
    case staff // = 6
    case peb // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .typeUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .typeUnknown
      case 1: self = .gold
      case 2: self = .silver
      case 3: self = .normal
      case 4: self = .delivery
      case 5: self = .vip
      case 6: self = .staff
      case 7: self = .peb
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .typeUnknown: return 0
      case .gold: return 1
      case .silver: return 2
      case .normal: return 3
      case .delivery: return 4
      case .vip: return 5
      case .staff: return 6
      case .peb: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Appelis_UserService_Companies_V1_Company.SystemStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_UserService_Companies_V1_Company.SystemStatus] = [
    .statusUnknown,
    .active,
    .notActive,
    .blocked,
  ]
}

extension Appelis_UserService_Companies_V1_Company.CompanyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_UserService_Companies_V1_Company.CompanyType] = [
    .typeUnknown,
    .gold,
    .silver,
    .normal,
    .delivery,
    .vip,
    .staff,
    .peb,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_UserService_Companies_V1_IcoProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Primary for IcoProfile
  public var ico: String = String()

  public var dic: String = String()

  public var address: String = String()

  public var name: String = String()

  public var companyCeo: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ids: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Dictionary<Int64,Metro_Common_Data_V1_CompanySegment> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ids: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Metro_Common_Data_V1_CompanySegmentMapEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_UserService_Companies_V1_GetCompaniesRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetCompaniesResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetCompanyRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_ByExternalRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetCompanyResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_ByExternalResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_CompanyBusiness: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_Company: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_Company.SystemStatus: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_Company.CompanyType: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_IcoProfile: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.userService.companies.v1"

extension Appelis_UserService_Companies_V1_GetCompaniesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompaniesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitPackedInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompaniesRequest, rhs: Appelis_UserService_Companies_V1_GetCompaniesRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetCompaniesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompaniesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompaniesResponse, rhs: Appelis_UserService_Companies_V1_GetCompaniesResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetCompanyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompanyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompanyRequest, rhs: Appelis_UserService_Companies_V1_GetCompanyRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_ByExternalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ByExternalRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "projectId"),
    2: .same(proto: "companyExternalId"),
    3: .same(proto: "businessExternalId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.companyExternalID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.businessExternalID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.companyExternalID.isEmpty {
      try visitor.visitSingularStringField(value: self.companyExternalID, fieldNumber: 2)
    }
    if !self.businessExternalID.isEmpty {
      try visitor.visitSingularStringField(value: self.businessExternalID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_ByExternalRequest, rhs: Appelis_UserService_Companies_V1_ByExternalRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.companyExternalID != rhs.companyExternalID {return false}
    if lhs.businessExternalID != rhs.businessExternalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetCompanyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompanyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "company"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._company) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._company {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompanyResponse, rhs: Appelis_UserService_Companies_V1_GetCompanyResponse) -> Bool {
    if lhs._company != rhs._company {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_ByExternalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ByExternalResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "company"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._company) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._company {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_ByExternalResponse, rhs: Appelis_UserService_Companies_V1_ByExternalResponse) -> Bool {
    if lhs._company != rhs._company {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_CompanyBusiness: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyBusiness"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idBusiness"),
    2: .same(proto: "name"),
    3: .same(proto: "externalId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.idBusiness) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._externalID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.idBusiness != 0 {
      try visitor.visitSingularInt64Field(value: self.idBusiness, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._externalID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_CompanyBusiness, rhs: Appelis_UserService_Companies_V1_CompanyBusiness) -> Bool {
    if lhs.idBusiness != rhs.idBusiness {return false}
    if lhs.name != rhs.name {return false}
    if lhs._externalID != rhs._externalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_Company: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Company"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "idCompany"),
    3: .same(proto: "idBusiness"),
    4: .same(proto: "active"),
    5: .same(proto: "projectId"),
    6: .same(proto: "prospectSendActive"),
    7: .same(proto: "bonusSystemStatus"),
    8: .same(proto: "creditSystemStatus"),
    9: .same(proto: "ico"),
    10: .same(proto: "prospectSendAddress"),
    11: .same(proto: "externalId"),
    12: .same(proto: "externalCheckDig"),
    13: .same(proto: "externalCatId"),
    14: .same(proto: "advisorId"),
    15: .same(proto: "timeRegistration"),
    16: .same(proto: "Business"),
    17: .same(proto: "icoProfile"),
  ]

  fileprivate class _StorageClass {
    var _type: Appelis_UserService_Companies_V1_Company.CompanyType = .typeUnknown
    var _idCompany: Int64 = 0
    var _idBusiness: Int64 = 0
    var _active: Bool = false
    var _projectID: String = String()
    var _prospectSendActive: Bool = false
    var _bonusSystemStatus: Appelis_UserService_Companies_V1_Company.SystemStatus = .statusUnknown
    var _creditSystemStatus: Appelis_UserService_Companies_V1_Company.SystemStatus = .statusUnknown
    var _ico: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _prospectSendAddress: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _externalID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _externalCheckDig: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _externalCatID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _advisorID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _timeRegistration: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _business: Appelis_UserService_Companies_V1_CompanyBusiness? = nil
    var _icoProfile: Appelis_UserService_Companies_V1_IcoProfile? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _idCompany = source._idCompany
      _idBusiness = source._idBusiness
      _active = source._active
      _projectID = source._projectID
      _prospectSendActive = source._prospectSendActive
      _bonusSystemStatus = source._bonusSystemStatus
      _creditSystemStatus = source._creditSystemStatus
      _ico = source._ico
      _prospectSendAddress = source._prospectSendAddress
      _externalID = source._externalID
      _externalCheckDig = source._externalCheckDig
      _externalCatID = source._externalCatID
      _advisorID = source._advisorID
      _timeRegistration = source._timeRegistration
      _business = source._business
      _icoProfile = source._icoProfile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._idCompany) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._idBusiness) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._active) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._projectID) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._prospectSendActive) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._bonusSystemStatus) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._creditSystemStatus) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._ico) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._prospectSendAddress) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._externalID) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._externalCheckDig) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._externalCatID) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._advisorID) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._timeRegistration) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._business) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._icoProfile) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != .typeUnknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if _storage._idCompany != 0 {
        try visitor.visitSingularInt64Field(value: _storage._idCompany, fieldNumber: 2)
      }
      if _storage._idBusiness != 0 {
        try visitor.visitSingularInt64Field(value: _storage._idBusiness, fieldNumber: 3)
      }
      if _storage._active != false {
        try visitor.visitSingularBoolField(value: _storage._active, fieldNumber: 4)
      }
      if !_storage._projectID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectID, fieldNumber: 5)
      }
      if _storage._prospectSendActive != false {
        try visitor.visitSingularBoolField(value: _storage._prospectSendActive, fieldNumber: 6)
      }
      if _storage._bonusSystemStatus != .statusUnknown {
        try visitor.visitSingularEnumField(value: _storage._bonusSystemStatus, fieldNumber: 7)
      }
      if _storage._creditSystemStatus != .statusUnknown {
        try visitor.visitSingularEnumField(value: _storage._creditSystemStatus, fieldNumber: 8)
      }
      try { if let v = _storage._ico {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._prospectSendAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._externalID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._externalCheckDig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._externalCatID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._advisorID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._timeRegistration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._business {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._icoProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_Company, rhs: Appelis_UserService_Companies_V1_Company) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._idCompany != rhs_storage._idCompany {return false}
        if _storage._idBusiness != rhs_storage._idBusiness {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._projectID != rhs_storage._projectID {return false}
        if _storage._prospectSendActive != rhs_storage._prospectSendActive {return false}
        if _storage._bonusSystemStatus != rhs_storage._bonusSystemStatus {return false}
        if _storage._creditSystemStatus != rhs_storage._creditSystemStatus {return false}
        if _storage._ico != rhs_storage._ico {return false}
        if _storage._prospectSendAddress != rhs_storage._prospectSendAddress {return false}
        if _storage._externalID != rhs_storage._externalID {return false}
        if _storage._externalCheckDig != rhs_storage._externalCheckDig {return false}
        if _storage._externalCatID != rhs_storage._externalCatID {return false}
        if _storage._advisorID != rhs_storage._advisorID {return false}
        if _storage._timeRegistration != rhs_storage._timeRegistration {return false}
        if _storage._business != rhs_storage._business {return false}
        if _storage._icoProfile != rhs_storage._icoProfile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_Company.SystemStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "ACTIVE"),
    2: .same(proto: "NOT_ACTIVE"),
    3: .same(proto: "BLOCKED"),
  ]
}

extension Appelis_UserService_Companies_V1_Company.CompanyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "GOLD"),
    2: .same(proto: "SILVER"),
    3: .same(proto: "NORMAL"),
    4: .same(proto: "DELIVERY"),
    5: .same(proto: "VIP"),
    6: .same(proto: "STAFF"),
    7: .same(proto: "PEB"),
  ]
}

extension Appelis_UserService_Companies_V1_IcoProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IcoProfile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ico"),
    2: .same(proto: "dic"),
    3: .same(proto: "address"),
    4: .same(proto: "name"),
    5: .same(proto: "companyCeo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ico) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dic) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.companyCeo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ico.isEmpty {
      try visitor.visitSingularStringField(value: self.ico, fieldNumber: 1)
    }
    if !self.dic.isEmpty {
      try visitor.visitSingularStringField(value: self.dic, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.companyCeo.isEmpty {
      try visitor.visitSingularStringField(value: self.companyCeo, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_IcoProfile, rhs: Appelis_UserService_Companies_V1_IcoProfile) -> Bool {
    if lhs.ico != rhs.ico {return false}
    if lhs.dic != rhs.dic {return false}
    if lhs.address != rhs.address {return false}
    if lhs.name != rhs.name {return false}
    if lhs.companyCeo != rhs.companyCeo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompanySegmentsByMobileUserIdsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsRequest, rhs: Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsRequest) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompanySegmentsByMobileUserIdsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,Metro_Common_Data_V1_CompanySegment>.self, value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,Metro_Common_Data_V1_CompanySegment>.self, value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsResponse, rhs: Appelis_UserService_Companies_V1_GetCompanySegmentsByMobileUserIdsResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompanySegmentsMapByMobileUserIdsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsRequest, rhs: Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsRequest) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCompanySegmentsMapByMobileUserIdsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsResponse, rhs: Appelis_UserService_Companies_V1_GetCompanySegmentsMapByMobileUserIdsResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

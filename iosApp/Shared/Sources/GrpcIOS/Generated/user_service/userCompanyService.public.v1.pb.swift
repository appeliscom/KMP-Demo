// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_service/userCompanyService.public.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_UserService_Companies_V1_GetTokenCompanyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  /// FieldMask will be used to load nested object in company.
  /// Create fieldMask with nested object paths. ("Business", "IcoProfile")
  public var fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldMask = newValue}
  }
  /// Returns true if `fieldMask` has been explicitly set.
  public var hasFieldMask: Bool {return self._fieldMask != nil}
  /// Clears the value of `fieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldMask() {self._fieldMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

public struct Appelis_UserService_Companies_V1_GetTokenCompanyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_UserService_Companies_V1_GetTokenCompanyResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var data: Appelis_UserService_Companies_V1_Company {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_UserService_Companies_V1_Company()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case data(Appelis_UserService_Companies_V1_Company)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_UserService_Companies_V1_GetTokenCompanyResponse.OneOf_Payload, rhs: Appelis_UserService_Companies_V1_GetTokenCompanyResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_UserService_Companies_V1_StreamCompaniesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var fieldmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldmask = newValue}
  }
  /// Returns true if `fieldmask` has been explicitly set.
  public var hasFieldmask: Bool {return self._fieldmask != nil}
  /// Clears the value of `fieldmask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldmask() {self._fieldmask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
  fileprivate var _fieldmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

public struct Appelis_UserService_Companies_V1_StreamCompaniesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_UserService_Companies_V1_StreamCompaniesResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var data: Appelis_UserService_Companies_V1_GetCompaniesResponse {
    get {
      if case .data(let v)? = payload {return v}
      return Appelis_UserService_Companies_V1_GetCompaniesResponse()
    }
    set {payload = .data(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)
    case data(Appelis_UserService_Companies_V1_GetCompaniesResponse)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_UserService_Companies_V1_StreamCompaniesResponse.OneOf_Payload, rhs: Appelis_UserService_Companies_V1_StreamCompaniesResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_UserService_Companies_V1_SetCompaniesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var data: [Appelis_UserService_Companies_V1_CompanyInput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_UserService_Companies_V1_DeleteCompaniesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: Appelis_Identity_Common_V1_Token {
    get {return _token ?? Appelis_Identity_Common_V1_Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var ids: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Appelis_Identity_Common_V1_Token? = nil
}

public struct Appelis_UserService_Companies_V1_DeleteCompaniesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_UserService_Companies_V1_DeleteCompaniesResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_UserService_Companies_V1_DeleteCompaniesResponse.OneOf_Payload, rhs: Appelis_UserService_Companies_V1_DeleteCompaniesResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_UserService_Companies_V1_SetCompaniesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Appelis_UserService_Companies_V1_SetCompaniesResponse.OneOf_Payload? = nil

  public var err: Appelis_Identity_Common_V1_TokenError {
    get {
      if case .err(let v)? = payload {return v}
      return .unknownTokenError
    }
    set {payload = .err(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case err(Appelis_Identity_Common_V1_TokenError)

  #if !swift(>=4.1)
    public static func ==(lhs: Appelis_UserService_Companies_V1_SetCompaniesResponse.OneOf_Payload, rhs: Appelis_UserService_Companies_V1_SetCompaniesResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.err, .err): return {
        guard case .err(let l) = lhs, case .err(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

public struct Appelis_UserService_Companies_V1_CompanyInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Appelis_UserService_Companies_V1_Company.CompanyType = .typeUnknown

  public var idCompany: Int64 = 0

  public var idBusiness: Int64 = 0

  public var active: Bool = false

  public var projectID: String = String()

  public var prospectSendActive: Bool = false

  public var bonusSystemStatus: Appelis_UserService_Companies_V1_Company.SystemStatus = .statusUnknown

  public var creditSystemStatus: Appelis_UserService_Companies_V1_Company.SystemStatus = .statusUnknown

  public var ico: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _ico ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_ico = newValue}
  }
  /// Returns true if `ico` has been explicitly set.
  public var hasIco: Bool {return self._ico != nil}
  /// Clears the value of `ico`. Subsequent reads from it will return its default value.
  public mutating func clearIco() {self._ico = nil}

  public var prospectSendAddress: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _prospectSendAddress ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_prospectSendAddress = newValue}
  }
  /// Returns true if `prospectSendAddress` has been explicitly set.
  public var hasProspectSendAddress: Bool {return self._prospectSendAddress != nil}
  /// Clears the value of `prospectSendAddress`. Subsequent reads from it will return its default value.
  public mutating func clearProspectSendAddress() {self._prospectSendAddress = nil}

  public var externalID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _externalID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  public var hasExternalID: Bool {return self._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalID() {self._externalID = nil}

  public var externalCheckDig: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _externalCheckDig ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_externalCheckDig = newValue}
  }
  /// Returns true if `externalCheckDig` has been explicitly set.
  public var hasExternalCheckDig: Bool {return self._externalCheckDig != nil}
  /// Clears the value of `externalCheckDig`. Subsequent reads from it will return its default value.
  public mutating func clearExternalCheckDig() {self._externalCheckDig = nil}

  public var externalCatID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _externalCatID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_externalCatID = newValue}
  }
  /// Returns true if `externalCatID` has been explicitly set.
  public var hasExternalCatID: Bool {return self._externalCatID != nil}
  /// Clears the value of `externalCatID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalCatID() {self._externalCatID = nil}

  public var advisorID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _advisorID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_advisorID = newValue}
  }
  /// Returns true if `advisorID` has been explicitly set.
  public var hasAdvisorID: Bool {return self._advisorID != nil}
  /// Clears the value of `advisorID`. Subsequent reads from it will return its default value.
  public mutating func clearAdvisorID() {self._advisorID = nil}

  public var timeRegistration: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeRegistration ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeRegistration = newValue}
  }
  /// Returns true if `timeRegistration` has been explicitly set.
  public var hasTimeRegistration: Bool {return self._timeRegistration != nil}
  /// Clears the value of `timeRegistration`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRegistration() {self._timeRegistration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ico: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _prospectSendAddress: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _externalID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _externalCheckDig: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _externalCatID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _advisorID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _timeRegistration: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_UserService_Companies_V1_GetTokenCompanyRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetTokenCompanyResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_GetTokenCompanyResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_StreamCompaniesRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_StreamCompaniesResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_StreamCompaniesResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_SetCompaniesRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_DeleteCompaniesRequest: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_DeleteCompaniesResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_DeleteCompaniesResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_SetCompaniesResponse: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_SetCompaniesResponse.OneOf_Payload: @unchecked Sendable {}
extension Appelis_UserService_Companies_V1_CompanyInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.userService.companies.v1"

extension Appelis_UserService_Companies_V1_GetTokenCompanyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTokenCompanyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "fieldMask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fieldMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fieldMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetTokenCompanyRequest, rhs: Appelis_UserService_Companies_V1_GetTokenCompanyRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._fieldMask != rhs._fieldMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_GetTokenCompanyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTokenCompanyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_UserService_Companies_V1_Company?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_GetTokenCompanyResponse, rhs: Appelis_UserService_Companies_V1_GetTokenCompanyResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_StreamCompaniesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamCompaniesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "fieldmask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fieldmask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fieldmask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_StreamCompaniesRequest, rhs: Appelis_UserService_Companies_V1_StreamCompaniesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._fieldmask != rhs._fieldmask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_StreamCompaniesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamCompaniesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      case 2: try {
        var v: Appelis_UserService_Companies_V1_GetCompaniesResponse?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .data(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .err?: try {
      guard case .err(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_StreamCompaniesResponse, rhs: Appelis_UserService_Companies_V1_StreamCompaniesResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_SetCompaniesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCompaniesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_SetCompaniesRequest, rhs: Appelis_UserService_Companies_V1_SetCompaniesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_DeleteCompaniesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteCompaniesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.ids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_DeleteCompaniesRequest, rhs: Appelis_UserService_Companies_V1_DeleteCompaniesRequest) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_DeleteCompaniesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteCompaniesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .err(let v)? = self.payload {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_DeleteCompaniesResponse, rhs: Appelis_UserService_Companies_V1_DeleteCompaniesResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_SetCompaniesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCompaniesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Appelis_Identity_Common_V1_TokenError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .err(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .err(let v)? = self.payload {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_SetCompaniesResponse, rhs: Appelis_UserService_Companies_V1_SetCompaniesResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_UserService_Companies_V1_CompanyInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "idCompany"),
    3: .same(proto: "idBusiness"),
    4: .same(proto: "active"),
    5: .same(proto: "projectId"),
    6: .same(proto: "prospectSendActive"),
    7: .same(proto: "bonusSystemStatus"),
    8: .same(proto: "creditSystemStatus"),
    9: .same(proto: "ico"),
    10: .same(proto: "prospectSendAddress"),
    11: .same(proto: "externalId"),
    12: .same(proto: "externalCheckDig"),
    13: .same(proto: "externalCatId"),
    14: .same(proto: "advisorId"),
    15: .same(proto: "timeRegistration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.idCompany) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.idBusiness) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.prospectSendActive) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.bonusSystemStatus) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.creditSystemStatus) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._ico) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._prospectSendAddress) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._externalID) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._externalCheckDig) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._externalCatID) }()
      case 14: try { try decoder.decodeSingularMessageField(value: &self._advisorID) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._timeRegistration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .typeUnknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.idCompany != 0 {
      try visitor.visitSingularInt64Field(value: self.idCompany, fieldNumber: 2)
    }
    if self.idBusiness != 0 {
      try visitor.visitSingularInt64Field(value: self.idBusiness, fieldNumber: 3)
    }
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 4)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 5)
    }
    if self.prospectSendActive != false {
      try visitor.visitSingularBoolField(value: self.prospectSendActive, fieldNumber: 6)
    }
    if self.bonusSystemStatus != .statusUnknown {
      try visitor.visitSingularEnumField(value: self.bonusSystemStatus, fieldNumber: 7)
    }
    if self.creditSystemStatus != .statusUnknown {
      try visitor.visitSingularEnumField(value: self.creditSystemStatus, fieldNumber: 8)
    }
    try { if let v = self._ico {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._prospectSendAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._externalID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._externalCheckDig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._externalCatID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._advisorID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._timeRegistration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_UserService_Companies_V1_CompanyInput, rhs: Appelis_UserService_Companies_V1_CompanyInput) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.idCompany != rhs.idCompany {return false}
    if lhs.idBusiness != rhs.idBusiness {return false}
    if lhs.active != rhs.active {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.prospectSendActive != rhs.prospectSendActive {return false}
    if lhs.bonusSystemStatus != rhs.bonusSystemStatus {return false}
    if lhs.creditSystemStatus != rhs.creditSystemStatus {return false}
    if lhs._ico != rhs._ico {return false}
    if lhs._prospectSendAddress != rhs._prospectSendAddress {return false}
    if lhs._externalID != rhs._externalID {return false}
    if lhs._externalCheckDig != rhs._externalCheckDig {return false}
    if lhs._externalCatID != rhs._externalCatID {return false}
    if lhs._advisorID != rhs._advisorID {return false}
    if lhs._timeRegistration != rhs._timeRegistration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

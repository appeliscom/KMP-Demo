//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: user_service/userCompanyService.public.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_UserService_Companies_V1_CompanyPublicClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Companies_V1_CompanyPublicClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol? { get }

  func getTokenCompany(
    _ request: Appelis_UserService_Companies_V1_GetTokenCompanyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Companies_V1_GetTokenCompanyRequest, Appelis_UserService_Companies_V1_GetTokenCompanyResponse>
}

extension Appelis_UserService_Companies_V1_CompanyPublicClientProtocol {
  public var serviceName: String {
    return "appelis.userService.companies.v1.CompanyPublic"
  }

  /// Unary call to GetTokenCompany
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenCompany.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenCompany(
    _ request: Appelis_UserService_Companies_V1_GetTokenCompanyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Companies_V1_GetTokenCompanyRequest, Appelis_UserService_Companies_V1_GetTokenCompanyResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicClientMetadata.Methods.getTokenCompany.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenCompanyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Companies_V1_CompanyPublicClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Companies_V1_CompanyPublicNIOClient")
public final class Appelis_UserService_Companies_V1_CompanyPublicClient: Appelis_UserService_Companies_V1_CompanyPublicClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.companies.v1.CompanyPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Companies_V1_CompanyPublicNIOClient: Appelis_UserService_Companies_V1_CompanyPublicClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.companies.v1.CompanyPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Companies_V1_CompanyPublicAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol? { get }

  func makeGetTokenCompanyCall(
    _ request: Appelis_UserService_Companies_V1_GetTokenCompanyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Companies_V1_GetTokenCompanyRequest, Appelis_UserService_Companies_V1_GetTokenCompanyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Companies_V1_CompanyPublicAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Companies_V1_CompanyPublicClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetTokenCompanyCall(
    _ request: Appelis_UserService_Companies_V1_GetTokenCompanyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Companies_V1_GetTokenCompanyRequest, Appelis_UserService_Companies_V1_GetTokenCompanyResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicClientMetadata.Methods.getTokenCompany.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenCompanyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Companies_V1_CompanyPublicAsyncClientProtocol {
  public func getTokenCompany(
    _ request: Appelis_UserService_Companies_V1_GetTokenCompanyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Companies_V1_GetTokenCompanyResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicClientMetadata.Methods.getTokenCompany.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenCompanyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Companies_V1_CompanyPublicAsyncClient: Appelis_UserService_Companies_V1_CompanyPublicAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Companies_V1_CompanyPublicClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getTokenCompany'.
  func makeGetTokenCompanyInterceptors() -> [ClientInterceptor<Appelis_UserService_Companies_V1_GetTokenCompanyRequest, Appelis_UserService_Companies_V1_GetTokenCompanyResponse>]
}

public enum Appelis_UserService_Companies_V1_CompanyPublicClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CompanyPublic",
    fullName: "appelis.userService.companies.v1.CompanyPublic",
    methods: [
      Appelis_UserService_Companies_V1_CompanyPublicClientMetadata.Methods.getTokenCompany,
    ]
  )

  public enum Methods {
    public static let getTokenCompany = GRPCMethodDescriptor(
      name: "GetTokenCompany",
      path: "/appelis.userService.companies.v1.CompanyPublic/GetTokenCompany",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Appelis_UserService_Companies_V1_CompanyPublicAdminClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Companies_V1_CompanyPublicAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol? { get }

  func streamCompanies(
    _ request: Appelis_UserService_Companies_V1_StreamCompaniesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_UserService_Companies_V1_StreamCompaniesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_UserService_Companies_V1_StreamCompaniesRequest, Appelis_UserService_Companies_V1_StreamCompaniesResponse>

  func setCompanies(
    _ request: Appelis_UserService_Companies_V1_SetCompaniesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Companies_V1_SetCompaniesRequest, Appelis_UserService_Companies_V1_SetCompaniesResponse>

  func deleteCompanies(
    _ request: Appelis_UserService_Companies_V1_DeleteCompaniesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Companies_V1_DeleteCompaniesRequest, Appelis_UserService_Companies_V1_DeleteCompaniesResponse>
}

extension Appelis_UserService_Companies_V1_CompanyPublicAdminClientProtocol {
  public var serviceName: String {
    return "appelis.userService.companies.v1.CompanyPublicAdmin"
  }

  /// Server streaming call to StreamCompanies
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamCompanies.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamCompanies(
    _ request: Appelis_UserService_Companies_V1_StreamCompaniesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_UserService_Companies_V1_StreamCompaniesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_UserService_Companies_V1_StreamCompaniesRequest, Appelis_UserService_Companies_V1_StreamCompaniesResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.streamCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamCompaniesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to SetCompanies
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCompanies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setCompanies(
    _ request: Appelis_UserService_Companies_V1_SetCompaniesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Companies_V1_SetCompaniesRequest, Appelis_UserService_Companies_V1_SetCompaniesResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.setCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCompaniesInterceptors() ?? []
    )
  }

  /// Unary call to DeleteCompanies
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCompanies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCompanies(
    _ request: Appelis_UserService_Companies_V1_DeleteCompaniesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Companies_V1_DeleteCompaniesRequest, Appelis_UserService_Companies_V1_DeleteCompaniesResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.deleteCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCompaniesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Companies_V1_CompanyPublicAdminClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Companies_V1_CompanyPublicAdminNIOClient")
public final class Appelis_UserService_Companies_V1_CompanyPublicAdminClient: Appelis_UserService_Companies_V1_CompanyPublicAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.companies.v1.CompanyPublicAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Companies_V1_CompanyPublicAdminNIOClient: Appelis_UserService_Companies_V1_CompanyPublicAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.companies.v1.CompanyPublicAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Companies_V1_CompanyPublicAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol? { get }

  func makeStreamCompaniesCall(
    _ request: Appelis_UserService_Companies_V1_StreamCompaniesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_UserService_Companies_V1_StreamCompaniesRequest, Appelis_UserService_Companies_V1_StreamCompaniesResponse>

  func makeSetCompaniesCall(
    _ request: Appelis_UserService_Companies_V1_SetCompaniesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Companies_V1_SetCompaniesRequest, Appelis_UserService_Companies_V1_SetCompaniesResponse>

  func makeDeleteCompaniesCall(
    _ request: Appelis_UserService_Companies_V1_DeleteCompaniesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Companies_V1_DeleteCompaniesRequest, Appelis_UserService_Companies_V1_DeleteCompaniesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Companies_V1_CompanyPublicAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeStreamCompaniesCall(
    _ request: Appelis_UserService_Companies_V1_StreamCompaniesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_UserService_Companies_V1_StreamCompaniesRequest, Appelis_UserService_Companies_V1_StreamCompaniesResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.streamCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamCompaniesInterceptors() ?? []
    )
  }

  public func makeSetCompaniesCall(
    _ request: Appelis_UserService_Companies_V1_SetCompaniesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Companies_V1_SetCompaniesRequest, Appelis_UserService_Companies_V1_SetCompaniesResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.setCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCompaniesInterceptors() ?? []
    )
  }

  public func makeDeleteCompaniesCall(
    _ request: Appelis_UserService_Companies_V1_DeleteCompaniesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Companies_V1_DeleteCompaniesRequest, Appelis_UserService_Companies_V1_DeleteCompaniesResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.deleteCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCompaniesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Companies_V1_CompanyPublicAdminAsyncClientProtocol {
  public func streamCompanies(
    _ request: Appelis_UserService_Companies_V1_StreamCompaniesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_UserService_Companies_V1_StreamCompaniesResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.streamCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamCompaniesInterceptors() ?? []
    )
  }

  public func setCompanies(
    _ request: Appelis_UserService_Companies_V1_SetCompaniesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Companies_V1_SetCompaniesResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.setCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCompaniesInterceptors() ?? []
    )
  }

  public func deleteCompanies(
    _ request: Appelis_UserService_Companies_V1_DeleteCompaniesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Companies_V1_DeleteCompaniesResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.deleteCompanies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCompaniesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Companies_V1_CompanyPublicAdminAsyncClient: Appelis_UserService_Companies_V1_CompanyPublicAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Companies_V1_CompanyPublicAdminClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'streamCompanies'.
  func makeStreamCompaniesInterceptors() -> [ClientInterceptor<Appelis_UserService_Companies_V1_StreamCompaniesRequest, Appelis_UserService_Companies_V1_StreamCompaniesResponse>]

  /// - Returns: Interceptors to use when invoking 'setCompanies'.
  func makeSetCompaniesInterceptors() -> [ClientInterceptor<Appelis_UserService_Companies_V1_SetCompaniesRequest, Appelis_UserService_Companies_V1_SetCompaniesResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteCompanies'.
  func makeDeleteCompaniesInterceptors() -> [ClientInterceptor<Appelis_UserService_Companies_V1_DeleteCompaniesRequest, Appelis_UserService_Companies_V1_DeleteCompaniesResponse>]
}

public enum Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CompanyPublicAdmin",
    fullName: "appelis.userService.companies.v1.CompanyPublicAdmin",
    methods: [
      Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.streamCompanies,
      Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.setCompanies,
      Appelis_UserService_Companies_V1_CompanyPublicAdminClientMetadata.Methods.deleteCompanies,
    ]
  )

  public enum Methods {
    public static let streamCompanies = GRPCMethodDescriptor(
      name: "StreamCompanies",
      path: "/appelis.userService.companies.v1.CompanyPublicAdmin/StreamCompanies",
      type: GRPCCallType.serverStreaming
    )

    public static let setCompanies = GRPCMethodDescriptor(
      name: "SetCompanies",
      path: "/appelis.userService.companies.v1.CompanyPublicAdmin/SetCompanies",
      type: GRPCCallType.unary
    )

    public static let deleteCompanies = GRPCMethodDescriptor(
      name: "DeleteCompanies",
      path: "/appelis.userService.companies.v1.CompanyPublicAdmin/DeleteCompanies",
      type: GRPCCallType.unary
    )
  }
}


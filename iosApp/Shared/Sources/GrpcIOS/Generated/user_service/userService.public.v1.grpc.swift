//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: user_service/userService.public.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_UserService_Users_V1_MobileUsersPublicClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Users_V1_MobileUsersPublicClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol? { get }

  func getTokenUser(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserResponse>

  func getTokenUserChanges(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_UserService_Users_V1_GetTokenUserChangesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserChangesResponse>

  func updateUser(
    _ request: Appelis_UserService_Users_V1_UpdateUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Users_V1_UpdateUserRequest, Appelis_UserService_Users_V1_UpdateUserResponse>
}

extension Appelis_UserService_Users_V1_MobileUsersPublicClientProtocol {
  public var serviceName: String {
    return "appelis.userService.users.v1.MobileUsersPublic"
  }

  /// Rpc will check token and returns data if exists for user claimed by token data, if there is no user payload will be null.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenUser(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserInterceptors() ?? []
    )
  }

  /// Rpc will send empty payload in case that user data has changed...
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenUserChanges.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getTokenUserChanges(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_UserService_Users_V1_GetTokenUserChangesResponse) -> Void
  ) -> ServerStreamingCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserChangesResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUserChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserChangesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Updates user claimed by token data.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateUser(
    _ request: Appelis_UserService_Users_V1_UpdateUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Users_V1_UpdateUserRequest, Appelis_UserService_Users_V1_UpdateUserResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.updateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Users_V1_MobileUsersPublicClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Users_V1_MobileUsersPublicNIOClient")
public final class Appelis_UserService_Users_V1_MobileUsersPublicClient: Appelis_UserService_Users_V1_MobileUsersPublicClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.users.v1.MobileUsersPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Users_V1_MobileUsersPublicNIOClient: Appelis_UserService_Users_V1_MobileUsersPublicClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.users.v1.MobileUsersPublic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Users_V1_MobileUsersPublicAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol? { get }

  func makeGetTokenUserCall(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserResponse>

  func makeGetTokenUserChangesCall(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserChangesResponse>

  func makeUpdateUserCall(
    _ request: Appelis_UserService_Users_V1_UpdateUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_UpdateUserRequest, Appelis_UserService_Users_V1_UpdateUserResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Users_V1_MobileUsersPublicAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetTokenUserCall(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserInterceptors() ?? []
    )
  }

  public func makeGetTokenUserChangesCall(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserChangesResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUserChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserChangesInterceptors() ?? []
    )
  }

  public func makeUpdateUserCall(
    _ request: Appelis_UserService_Users_V1_UpdateUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_UpdateUserRequest, Appelis_UserService_Users_V1_UpdateUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.updateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Users_V1_MobileUsersPublicAsyncClientProtocol {
  public func getTokenUser(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Users_V1_GetTokenUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserInterceptors() ?? []
    )
  }

  public func getTokenUserChanges(
    _ request: Appelis_UserService_Users_V1_GetTokenUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_UserService_Users_V1_GetTokenUserChangesResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUserChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserChangesInterceptors() ?? []
    )
  }

  public func updateUser(
    _ request: Appelis_UserService_Users_V1_UpdateUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Users_V1_UpdateUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.updateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Users_V1_MobileUsersPublicAsyncClient: Appelis_UserService_Users_V1_MobileUsersPublicAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Users_V1_MobileUsersPublicClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getTokenUser'.
  func makeGetTokenUserInterceptors() -> [ClientInterceptor<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserResponse>]

  /// - Returns: Interceptors to use when invoking 'getTokenUserChanges'.
  func makeGetTokenUserChangesInterceptors() -> [ClientInterceptor<Appelis_UserService_Users_V1_GetTokenUserRequest, Appelis_UserService_Users_V1_GetTokenUserChangesResponse>]

  /// - Returns: Interceptors to use when invoking 'updateUser'.
  func makeUpdateUserInterceptors() -> [ClientInterceptor<Appelis_UserService_Users_V1_UpdateUserRequest, Appelis_UserService_Users_V1_UpdateUserResponse>]
}

public enum Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MobileUsersPublic",
    fullName: "appelis.userService.users.v1.MobileUsersPublic",
    methods: [
      Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUser,
      Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.getTokenUserChanges,
      Appelis_UserService_Users_V1_MobileUsersPublicClientMetadata.Methods.updateUser,
    ]
  )

  public enum Methods {
    public static let getTokenUser = GRPCMethodDescriptor(
      name: "GetTokenUser",
      path: "/appelis.userService.users.v1.MobileUsersPublic/GetTokenUser",
      type: GRPCCallType.unary
    )

    public static let getTokenUserChanges = GRPCMethodDescriptor(
      name: "GetTokenUserChanges",
      path: "/appelis.userService.users.v1.MobileUsersPublic/GetTokenUserChanges",
      type: GRPCCallType.serverStreaming
    )

    public static let updateUser = GRPCMethodDescriptor(
      name: "UpdateUser",
      path: "/appelis.userService.users.v1.MobileUsersPublic/UpdateUser",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Appelis_UserService_Users_V1_MobileUsersPublicAdminClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Users_V1_MobileUsersPublicAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol? { get }

  func streamUsers(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_UserService_Users_V1_StreamUsersResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Users_V1_StreamUsersResponse>

  func setUsers(
    _ request: Appelis_UserService_Users_V1_SetUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Users_V1_SetUsersRequest, Appelis_UserService_Users_V1_SetUsersResponse>

  func deleteUsers(
    _ request: Appelis_UserService_Users_V1_DeleteUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Users_V1_DeleteUsersRequest, Appelis_UserService_Users_V1_DeleteUsersResponse>
}

extension Appelis_UserService_Users_V1_MobileUsersPublicAdminClientProtocol {
  public var serviceName: String {
    return "appelis.userService.users.v1.MobileUsersPublicAdmin"
  }

  /// Rpc will stream all users per projectId in provided token.
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamUsers.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamUsers(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_UserService_Users_V1_StreamUsersResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Users_V1_StreamUsersResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.streamUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamUsersInterceptors() ?? [],
      handler: handler
    )
  }

  /// Rpc will update users in database.
  /// If user doesn't have id, user will be created.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setUsers(
    _ request: Appelis_UserService_Users_V1_SetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Users_V1_SetUsersRequest, Appelis_UserService_Users_V1_SetUsersResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.setUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUsersInterceptors() ?? []
    )
  }

  /// Delete users by provided ids.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteUsers(
    _ request: Appelis_UserService_Users_V1_DeleteUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Users_V1_DeleteUsersRequest, Appelis_UserService_Users_V1_DeleteUsersResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.deleteUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Users_V1_MobileUsersPublicAdminClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Users_V1_MobileUsersPublicAdminNIOClient")
public final class Appelis_UserService_Users_V1_MobileUsersPublicAdminClient: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.users.v1.MobileUsersPublicAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Users_V1_MobileUsersPublicAdminNIOClient: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.users.v1.MobileUsersPublicAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Users_V1_MobileUsersPublicAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol? { get }

  func makeStreamUsersCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Users_V1_StreamUsersResponse>

  func makeSetUsersCall(
    _ request: Appelis_UserService_Users_V1_SetUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_SetUsersRequest, Appelis_UserService_Users_V1_SetUsersResponse>

  func makeDeleteUsersCall(
    _ request: Appelis_UserService_Users_V1_DeleteUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_DeleteUsersRequest, Appelis_UserService_Users_V1_DeleteUsersResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Users_V1_MobileUsersPublicAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeStreamUsersCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Users_V1_StreamUsersResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.streamUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamUsersInterceptors() ?? []
    )
  }

  public func makeSetUsersCall(
    _ request: Appelis_UserService_Users_V1_SetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_SetUsersRequest, Appelis_UserService_Users_V1_SetUsersResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.setUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUsersInterceptors() ?? []
    )
  }

  public func makeDeleteUsersCall(
    _ request: Appelis_UserService_Users_V1_DeleteUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Users_V1_DeleteUsersRequest, Appelis_UserService_Users_V1_DeleteUsersResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.deleteUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Users_V1_MobileUsersPublicAdminAsyncClientProtocol {
  public func streamUsers(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_UserService_Users_V1_StreamUsersResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.streamUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamUsersInterceptors() ?? []
    )
  }

  public func setUsers(
    _ request: Appelis_UserService_Users_V1_SetUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Users_V1_SetUsersResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.setUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUsersInterceptors() ?? []
    )
  }

  public func deleteUsers(
    _ request: Appelis_UserService_Users_V1_DeleteUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Users_V1_DeleteUsersResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.deleteUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Users_V1_MobileUsersPublicAdminAsyncClient: Appelis_UserService_Users_V1_MobileUsersPublicAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Users_V1_MobileUsersPublicAdminClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'streamUsers'.
  func makeStreamUsersInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_UserService_Users_V1_StreamUsersResponse>]

  /// - Returns: Interceptors to use when invoking 'setUsers'.
  func makeSetUsersInterceptors() -> [ClientInterceptor<Appelis_UserService_Users_V1_SetUsersRequest, Appelis_UserService_Users_V1_SetUsersResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteUsers'.
  func makeDeleteUsersInterceptors() -> [ClientInterceptor<Appelis_UserService_Users_V1_DeleteUsersRequest, Appelis_UserService_Users_V1_DeleteUsersResponse>]
}

public enum Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MobileUsersPublicAdmin",
    fullName: "appelis.userService.users.v1.MobileUsersPublicAdmin",
    methods: [
      Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.streamUsers,
      Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.setUsers,
      Appelis_UserService_Users_V1_MobileUsersPublicAdminClientMetadata.Methods.deleteUsers,
    ]
  )

  public enum Methods {
    public static let streamUsers = GRPCMethodDescriptor(
      name: "StreamUsers",
      path: "/appelis.userService.users.v1.MobileUsersPublicAdmin/StreamUsers",
      type: GRPCCallType.serverStreaming
    )

    public static let setUsers = GRPCMethodDescriptor(
      name: "SetUsers",
      path: "/appelis.userService.users.v1.MobileUsersPublicAdmin/SetUsers",
      type: GRPCCallType.unary
    )

    public static let deleteUsers = GRPCMethodDescriptor(
      name: "DeleteUsers",
      path: "/appelis.userService.users.v1.MobileUsersPublicAdmin/DeleteUsers",
      type: GRPCCallType.unary
    )
  }
}


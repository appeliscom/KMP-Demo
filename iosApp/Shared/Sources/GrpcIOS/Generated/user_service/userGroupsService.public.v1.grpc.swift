//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: user_service/userGroupsService.public.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_UserService_Groups_V1_UserGroupsClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Groups_V1_UserGroupsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol? { get }

  func getTokenUserGroupsMap(
    _ request: Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest, Appelis_UserService_Groups_V1_GetTokenUserGroupsMapResponse>
}

extension Appelis_UserService_Groups_V1_UserGroupsClientProtocol {
  public var serviceName: String {
    return "appelis.userService.groups.v1.UserGroups"
  }

  /// Unary call to GetTokenUserGroupsMap
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenUserGroupsMap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenUserGroupsMap(
    _ request: Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest, Appelis_UserService_Groups_V1_GetTokenUserGroupsMapResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsClientMetadata.Methods.getTokenUserGroupsMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserGroupsMapInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Groups_V1_UserGroupsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Groups_V1_UserGroupsNIOClient")
public final class Appelis_UserService_Groups_V1_UserGroupsClient: Appelis_UserService_Groups_V1_UserGroupsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.groups.v1.UserGroups service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Groups_V1_UserGroupsNIOClient: Appelis_UserService_Groups_V1_UserGroupsClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.groups.v1.UserGroups service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Groups_V1_UserGroupsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol? { get }

  func makeGetTokenUserGroupsMapCall(
    _ request: Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest, Appelis_UserService_Groups_V1_GetTokenUserGroupsMapResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Groups_V1_UserGroupsAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Groups_V1_UserGroupsClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetTokenUserGroupsMapCall(
    _ request: Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest, Appelis_UserService_Groups_V1_GetTokenUserGroupsMapResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsClientMetadata.Methods.getTokenUserGroupsMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserGroupsMapInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Groups_V1_UserGroupsAsyncClientProtocol {
  public func getTokenUserGroupsMap(
    _ request: Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Groups_V1_GetTokenUserGroupsMapResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsClientMetadata.Methods.getTokenUserGroupsMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenUserGroupsMapInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Groups_V1_UserGroupsAsyncClient: Appelis_UserService_Groups_V1_UserGroupsAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Groups_V1_UserGroupsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getTokenUserGroupsMap'.
  func makeGetTokenUserGroupsMapInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_GetTokenUserGroupsMapRequest, Appelis_UserService_Groups_V1_GetTokenUserGroupsMapResponse>]
}

public enum Appelis_UserService_Groups_V1_UserGroupsClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserGroups",
    fullName: "appelis.userService.groups.v1.UserGroups",
    methods: [
      Appelis_UserService_Groups_V1_UserGroupsClientMetadata.Methods.getTokenUserGroupsMap,
    ]
  )

  public enum Methods {
    public static let getTokenUserGroupsMap = GRPCMethodDescriptor(
      name: "GetTokenUserGroupsMap",
      path: "/appelis.userService.groups.v1.UserGroups/GetTokenUserGroupsMap",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Appelis_UserService_Groups_V1_UserGroupsPublicAdminClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol? { get }

  func streamUserGroupMap(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_UserService_Groups_V1_StreamUserGroupMapResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Groups_V1_StreamUserGroupMapResponse>

  func setUserGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupMapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse>

  func deleteUsersGroupMap(
    _ request: Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse>
}

extension Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientProtocol {
  public var serviceName: String {
    return "appelis.userService.groups.v1.UserGroupsPublicAdmin"
  }

  /// Server streaming call to StreamUserGroupMap
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamUserGroupMap.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamUserGroupMap(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_UserService_Groups_V1_StreamUserGroupMapResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Groups_V1_StreamUserGroupMapResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.streamUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamUserGroupMapInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to SetUserGroupMap
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUserGroupMap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setUserGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupMapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_UsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.setUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupMapInterceptors() ?? []
    )
  }

  /// Unary call to DeleteUsersGroupMap
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUsersGroupMap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteUsersGroupMap(
    _ request: Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.deleteUsersGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersGroupMapInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Groups_V1_UserGroupsPublicAdminClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Groups_V1_UserGroupsPublicAdminNIOClient")
public final class Appelis_UserService_Groups_V1_UserGroupsPublicAdminClient: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.groups.v1.UserGroupsPublicAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Groups_V1_UserGroupsPublicAdminNIOClient: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.groups.v1.UserGroupsPublicAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Groups_V1_UserGroupsPublicAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol? { get }

  func makeStreamUserGroupMapCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Groups_V1_StreamUserGroupMapResponse>

  func makeSetUserGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_UsersGroupMapRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse>

  func makeDeleteUsersGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Groups_V1_UserGroupsPublicAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeStreamUserGroupMapCall(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_Identity_Common_V1_Token, Appelis_UserService_Groups_V1_StreamUserGroupMapResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.streamUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamUserGroupMapInterceptors() ?? []
    )
  }

  public func makeSetUserGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_UsersGroupMapRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_UsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.setUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupMapInterceptors() ?? []
    )
  }

  public func makeDeleteUsersGroupMapCall(
    _ request: Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.deleteUsersGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersGroupMapInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Groups_V1_UserGroupsPublicAdminAsyncClientProtocol {
  public func streamUserGroupMap(
    _ request: Appelis_Identity_Common_V1_Token,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_UserService_Groups_V1_StreamUserGroupMapResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.streamUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamUserGroupMapInterceptors() ?? []
    )
  }

  public func setUserGroupMap(
    _ request: Appelis_UserService_Groups_V1_UsersGroupMapRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Groups_V1_UsersGroupMapResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.setUserGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupMapInterceptors() ?? []
    )
  }

  public func deleteUsersGroupMap(
    _ request: Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Groups_V1_UsersGroupMapResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.deleteUsersGroupMap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUsersGroupMapInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Groups_V1_UserGroupsPublicAdminAsyncClient: Appelis_UserService_Groups_V1_UserGroupsPublicAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'streamUserGroupMap'.
  func makeStreamUserGroupMapInterceptors() -> [ClientInterceptor<Appelis_Identity_Common_V1_Token, Appelis_UserService_Groups_V1_StreamUserGroupMapResponse>]

  /// - Returns: Interceptors to use when invoking 'setUserGroupMap'.
  func makeSetUserGroupMapInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_UsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteUsersGroupMap'.
  func makeDeleteUsersGroupMapInterceptors() -> [ClientInterceptor<Appelis_UserService_Groups_V1_DeleteUsersGroupMapRequest, Appelis_UserService_Groups_V1_UsersGroupMapResponse>]
}

public enum Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserGroupsPublicAdmin",
    fullName: "appelis.userService.groups.v1.UserGroupsPublicAdmin",
    methods: [
      Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.streamUserGroupMap,
      Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.setUserGroupMap,
      Appelis_UserService_Groups_V1_UserGroupsPublicAdminClientMetadata.Methods.deleteUsersGroupMap,
    ]
  )

  public enum Methods {
    public static let streamUserGroupMap = GRPCMethodDescriptor(
      name: "StreamUserGroupMap",
      path: "/appelis.userService.groups.v1.UserGroupsPublicAdmin/StreamUserGroupMap",
      type: GRPCCallType.serverStreaming
    )

    public static let setUserGroupMap = GRPCMethodDescriptor(
      name: "SetUserGroupMap",
      path: "/appelis.userService.groups.v1.UserGroupsPublicAdmin/SetUserGroupMap",
      type: GRPCCallType.unary
    )

    public static let deleteUsersGroupMap = GRPCMethodDescriptor(
      name: "DeleteUsersGroupMap",
      path: "/appelis.userService.groups.v1.UserGroupsPublicAdmin/DeleteUsersGroupMap",
      type: GRPCCallType.unary
    )
  }
}


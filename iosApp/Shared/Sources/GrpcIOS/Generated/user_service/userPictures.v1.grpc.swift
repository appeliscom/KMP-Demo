//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: user_service/userPictures.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_UserService_Pictures_V1_PicturesClient`, then call methods of this protocol to make API calls.
public protocol Appelis_UserService_Pictures_V1_PicturesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol? { get }

  func getUserPicture(
    _ request: Appelis_UserService_Pictures_V1_GetUserPictureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Pictures_V1_GetUserPictureRequest, Appelis_UserService_Pictures_V1_GetUserPictureResponse>

  func setUserPicture(
    _ request: Appelis_UserService_Pictures_V1_SetUserPictureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_UserService_Pictures_V1_SetUserPictureRequest, Appelis_UserService_Pictures_V1_SetUserPictureResponse>
}

extension Appelis_UserService_Pictures_V1_PicturesClientProtocol {
  public var serviceName: String {
    return "appelis.userService.pictures.v1.Pictures"
  }

  /// Get user (from token) picture. Response can be empty...
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserPicture.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUserPicture(
    _ request: Appelis_UserService_Pictures_V1_GetUserPictureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Pictures_V1_GetUserPictureRequest, Appelis_UserService_Pictures_V1_GetUserPictureResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.getUserPicture.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserPictureInterceptors() ?? []
    )
  }

  /// Rpc will store picture to external service and save data for user picture.
  /// If processing finish without error payload will be null.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUserPicture.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setUserPicture(
    _ request: Appelis_UserService_Pictures_V1_SetUserPictureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_UserService_Pictures_V1_SetUserPictureRequest, Appelis_UserService_Pictures_V1_SetUserPictureResponse> {
    return self.makeUnaryCall(
      path: Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.setUserPicture.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserPictureInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_UserService_Pictures_V1_PicturesClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_UserService_Pictures_V1_PicturesNIOClient")
public final class Appelis_UserService_Pictures_V1_PicturesClient: Appelis_UserService_Pictures_V1_PicturesClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.userService.pictures.v1.Pictures service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_UserService_Pictures_V1_PicturesNIOClient: Appelis_UserService_Pictures_V1_PicturesClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.userService.pictures.v1.Pictures service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_UserService_Pictures_V1_PicturesAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol? { get }

  func makeGetUserPictureCall(
    _ request: Appelis_UserService_Pictures_V1_GetUserPictureRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Pictures_V1_GetUserPictureRequest, Appelis_UserService_Pictures_V1_GetUserPictureResponse>

  func makeSetUserPictureCall(
    _ request: Appelis_UserService_Pictures_V1_SetUserPictureRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Pictures_V1_SetUserPictureRequest, Appelis_UserService_Pictures_V1_SetUserPictureResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Pictures_V1_PicturesAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_UserService_Pictures_V1_PicturesClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetUserPictureCall(
    _ request: Appelis_UserService_Pictures_V1_GetUserPictureRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Pictures_V1_GetUserPictureRequest, Appelis_UserService_Pictures_V1_GetUserPictureResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.getUserPicture.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserPictureInterceptors() ?? []
    )
  }

  public func makeSetUserPictureCall(
    _ request: Appelis_UserService_Pictures_V1_SetUserPictureRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_UserService_Pictures_V1_SetUserPictureRequest, Appelis_UserService_Pictures_V1_SetUserPictureResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.setUserPicture.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserPictureInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_UserService_Pictures_V1_PicturesAsyncClientProtocol {
  public func getUserPicture(
    _ request: Appelis_UserService_Pictures_V1_GetUserPictureRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Pictures_V1_GetUserPictureResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.getUserPicture.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserPictureInterceptors() ?? []
    )
  }

  public func setUserPicture(
    _ request: Appelis_UserService_Pictures_V1_SetUserPictureRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_UserService_Pictures_V1_SetUserPictureResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.setUserPicture.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserPictureInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_UserService_Pictures_V1_PicturesAsyncClient: Appelis_UserService_Pictures_V1_PicturesAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_UserService_Pictures_V1_PicturesClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getUserPicture'.
  func makeGetUserPictureInterceptors() -> [ClientInterceptor<Appelis_UserService_Pictures_V1_GetUserPictureRequest, Appelis_UserService_Pictures_V1_GetUserPictureResponse>]

  /// - Returns: Interceptors to use when invoking 'setUserPicture'.
  func makeSetUserPictureInterceptors() -> [ClientInterceptor<Appelis_UserService_Pictures_V1_SetUserPictureRequest, Appelis_UserService_Pictures_V1_SetUserPictureResponse>]
}

public enum Appelis_UserService_Pictures_V1_PicturesClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Pictures",
    fullName: "appelis.userService.pictures.v1.Pictures",
    methods: [
      Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.getUserPicture,
      Appelis_UserService_Pictures_V1_PicturesClientMetadata.Methods.setUserPicture,
    ]
  )

  public enum Methods {
    public static let getUserPicture = GRPCMethodDescriptor(
      name: "GetUserPicture",
      path: "/appelis.userService.pictures.v1.Pictures/GetUserPicture",
      type: GRPCCallType.unary
    )

    public static let setUserPicture = GRPCMethodDescriptor(
      name: "SetUserPicture",
      path: "/appelis.userService.pictures.v1.Pictures/SetUserPicture",
      type: GRPCCallType.unary
    )
  }
}


// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: article_package_service/article_package.data.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_ArticlePackage_Data_V1_Package {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var price: Appelis_PriceValue {
    get {return _price ?? Appelis_PriceValue()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  public var priceTax: Appelis_PriceValue {
    get {return _priceTax ?? Appelis_PriceValue()}
    set {_priceTax = newValue}
  }
  /// Returns true if `priceTax` has been explicitly set.
  public var hasPriceTax: Bool {return self._priceTax != nil}
  /// Clears the value of `priceTax`. Subsequent reads from it will return its default value.
  public mutating func clearPriceTax() {self._priceTax = nil}

  public var picture: Appelis_Picture {
    get {return _picture ?? Appelis_Picture()}
    set {_picture = newValue}
  }
  /// Returns true if `picture` has been explicitly set.
  public var hasPicture: Bool {return self._picture != nil}
  /// Clears the value of `picture`. Subsequent reads from it will return its default value.
  public mutating func clearPicture() {self._picture = nil}

  public var name: String = String()

  public var idBusiness: Int64 {
    get {return _idBusiness ?? 0}
    set {_idBusiness = newValue}
  }
  /// Returns true if `idBusiness` has been explicitly set.
  public var hasIDBusiness: Bool {return self._idBusiness != nil}
  /// Clears the value of `idBusiness`. Subsequent reads from it will return its default value.
  public mutating func clearIDBusiness() {self._idBusiness = nil}

  public var percentageTax: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _price: Appelis_PriceValue? = nil
  fileprivate var _priceTax: Appelis_PriceValue? = nil
  fileprivate var _picture: Appelis_Picture? = nil
  fileprivate var _idBusiness: Int64? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_ArticlePackage_Data_V1_Package: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.article_package.data.v1"

extension Appelis_ArticlePackage_Data_V1_Package: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Package"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "price"),
    3: .same(proto: "priceTax"),
    4: .same(proto: "picture"),
    5: .same(proto: "name"),
    6: .same(proto: "idBusiness"),
    7: .same(proto: "percentageTax"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._price) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._priceTax) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._picture) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self._idBusiness) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.percentageTax) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._priceTax {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._picture {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try { if let v = self._idBusiness {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    } }()
    if self.percentageTax != 0 {
      try visitor.visitSingularFloatField(value: self.percentageTax, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_ArticlePackage_Data_V1_Package, rhs: Appelis_ArticlePackage_Data_V1_Package) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._price != rhs._price {return false}
    if lhs._priceTax != rhs._priceTax {return false}
    if lhs._picture != rhs._picture {return false}
    if lhs.name != rhs.name {return false}
    if lhs._idBusiness != rhs._idBusiness {return false}
    if lhs.percentageTax != rhs.percentageTax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

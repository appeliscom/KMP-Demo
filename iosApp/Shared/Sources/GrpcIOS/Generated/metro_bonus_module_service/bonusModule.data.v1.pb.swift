// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: metro_bonus_module_service/bonusModule.data.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Cz_Makro_Bonus_V1_BonusModule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idBonusModule: Int64 {
    get {return _storage._idBonusModule}
    set {_uniqueStorage()._idBonusModule = newValue}
  }

  public var idCompany: Int64 {
    get {return _storage._idCompany}
    set {_uniqueStorage()._idCompany = newValue}
  }

  public var emailing: Bool {
    get {return _storage._emailing}
    set {_uniqueStorage()._emailing = newValue}
  }

  public var maxBonusAchieved: Bool {
    get {return _storage._maxBonusAchieved}
    set {_uniqueStorage()._maxBonusAchieved = newValue}
  }

  public var toSpend: Int32 {
    get {return _storage._toSpend}
    set {_uniqueStorage()._toSpend = newValue}
  }

  public var actualBonusPrice: Int32 {
    get {return _storage._actualBonusPrice}
    set {_uniqueStorage()._actualBonusPrice = newValue}
  }

  public var actualBonusPercentage: Int32 {
    get {return _storage._actualBonusPercentage}
    set {_uniqueStorage()._actualBonusPercentage = newValue}
  }

  public var actualBonusTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._actualBonusTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._actualBonusTime = newValue}
  }
  /// Returns true if `actualBonusTime` has been explicitly set.
  public var hasActualBonusTime: Bool {return _storage._actualBonusTime != nil}
  /// Clears the value of `actualBonusTime`. Subsequent reads from it will return its default value.
  public mutating func clearActualBonusTime() {_uniqueStorage()._actualBonusTime = nil}

  public var actualBonusURL: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._actualBonusURL ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._actualBonusURL = newValue}
  }
  /// Returns true if `actualBonusURL` has been explicitly set.
  public var hasActualBonusURL: Bool {return _storage._actualBonusURL != nil}
  /// Clears the value of `actualBonusURL`. Subsequent reads from it will return its default value.
  public mutating func clearActualBonusURL() {_uniqueStorage()._actualBonusURL = nil}

  public var nextBonusPrice: Int32 {
    get {return _storage._nextBonusPrice}
    set {_uniqueStorage()._nextBonusPrice = newValue}
  }

  public var nextBonusPercentage: Int32 {
    get {return _storage._nextBonusPercentage}
    set {_uniqueStorage()._nextBonusPercentage = newValue}
  }

  public var nextBonusTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._nextBonusTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._nextBonusTime = newValue}
  }
  /// Returns true if `nextBonusTime` has been explicitly set.
  public var hasNextBonusTime: Bool {return _storage._nextBonusTime != nil}
  /// Clears the value of `nextBonusTime`. Subsequent reads from it will return its default value.
  public mutating func clearNextBonusTime() {_uniqueStorage()._nextBonusTime = nil}

  public var nominalTurnover: Int64 {
    get {return _storage._nominalTurnover}
    set {_uniqueStorage()._nominalTurnover = newValue}
  }

  public var bonusTurnover: Int64 {
    get {return _storage._bonusTurnover}
    set {_uniqueStorage()._bonusTurnover = newValue}
  }

  public var timeAvailableBonus: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timeAvailableBonus ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timeAvailableBonus = newValue}
  }
  /// Returns true if `timeAvailableBonus` has been explicitly set.
  public var hasTimeAvailableBonus: Bool {return _storage._timeAvailableBonus != nil}
  /// Clears the value of `timeAvailableBonus`. Subsequent reads from it will return its default value.
  public mutating func clearTimeAvailableBonus() {_uniqueStorage()._timeAvailableBonus = nil}

  public var bonusAvailableAmount: Int32 {
    get {return _storage._bonusAvailableAmount}
    set {_uniqueStorage()._bonusAvailableAmount = newValue}
  }

  public var usedBonus: Int64 {
    get {return _storage._usedBonus}
    set {_uniqueStorage()._usedBonus = newValue}
  }

  public var timeEnter: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timeEnter ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timeEnter = newValue}
  }
  /// Returns true if `timeEnter` has been explicitly set.
  public var hasTimeEnter: Bool {return _storage._timeEnter != nil}
  /// Clears the value of `timeEnter`. Subsequent reads from it will return its default value.
  public mutating func clearTimeEnter() {_uniqueStorage()._timeEnter = nil}

  public var timeExit: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timeExit ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timeExit = newValue}
  }
  /// Returns true if `timeExit` has been explicitly set.
  public var hasTimeExit: Bool {return _storage._timeExit != nil}
  /// Clears the value of `timeExit`. Subsequent reads from it will return its default value.
  public mutating func clearTimeExit() {_uniqueStorage()._timeExit = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cz_Makro_Bonus_V1_BonusModuleArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Cz_Makro_Bonus_V1_BonusModule] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cz_Makro_Bonus_V1_BonusHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idBonusHistory: Int64 = 0

  public var idBonusModule: Int64 = 0

  public var payedPrice: Int64 = 0

  public var bonusLevel: Int64 = 0

  public var finalBonusLevel: Int64 = 0

  public var timeCreate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeCreate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeCreate = newValue}
  }
  /// Returns true if `timeCreate` has been explicitly set.
  public var hasTimeCreate: Bool {return self._timeCreate != nil}
  /// Clears the value of `timeCreate`. Subsequent reads from it will return its default value.
  public mutating func clearTimeCreate() {self._timeCreate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeCreate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Cz_Makro_Bonus_V1_BonusHistoryArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Cz_Makro_Bonus_V1_BonusHistory] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cz_Makro_Bonus_V1_BonusModule: @unchecked Sendable {}
extension Cz_Makro_Bonus_V1_BonusModuleArray: @unchecked Sendable {}
extension Cz_Makro_Bonus_V1_BonusHistory: @unchecked Sendable {}
extension Cz_Makro_Bonus_V1_BonusHistoryArray: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cz.makro.bonus.v1"

extension Cz_Makro_Bonus_V1_BonusModule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BonusModule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idBonusModule"),
    2: .same(proto: "idCompany"),
    3: .same(proto: "emailing"),
    4: .same(proto: "maxBonusAchieved"),
    5: .same(proto: "toSpend"),
    6: .same(proto: "actualBonusPrice"),
    7: .same(proto: "actualBonusPercentage"),
    8: .same(proto: "actualBonusTime"),
    9: .same(proto: "actualBonusUrl"),
    10: .same(proto: "nextBonusPrice"),
    11: .same(proto: "nextBonusPercentage"),
    12: .same(proto: "nextBonusTime"),
    13: .same(proto: "nominalTurnover"),
    14: .same(proto: "bonusTurnover"),
    15: .same(proto: "timeAvailableBonus"),
    16: .same(proto: "bonusAvailableAmount"),
    17: .same(proto: "usedBonus"),
    18: .same(proto: "timeEnter"),
    19: .same(proto: "timeExit"),
  ]

  fileprivate class _StorageClass {
    var _idBonusModule: Int64 = 0
    var _idCompany: Int64 = 0
    var _emailing: Bool = false
    var _maxBonusAchieved: Bool = false
    var _toSpend: Int32 = 0
    var _actualBonusPrice: Int32 = 0
    var _actualBonusPercentage: Int32 = 0
    var _actualBonusTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _actualBonusURL: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _nextBonusPrice: Int32 = 0
    var _nextBonusPercentage: Int32 = 0
    var _nextBonusTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _nominalTurnover: Int64 = 0
    var _bonusTurnover: Int64 = 0
    var _timeAvailableBonus: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _bonusAvailableAmount: Int32 = 0
    var _usedBonus: Int64 = 0
    var _timeEnter: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _timeExit: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _idBonusModule = source._idBonusModule
      _idCompany = source._idCompany
      _emailing = source._emailing
      _maxBonusAchieved = source._maxBonusAchieved
      _toSpend = source._toSpend
      _actualBonusPrice = source._actualBonusPrice
      _actualBonusPercentage = source._actualBonusPercentage
      _actualBonusTime = source._actualBonusTime
      _actualBonusURL = source._actualBonusURL
      _nextBonusPrice = source._nextBonusPrice
      _nextBonusPercentage = source._nextBonusPercentage
      _nextBonusTime = source._nextBonusTime
      _nominalTurnover = source._nominalTurnover
      _bonusTurnover = source._bonusTurnover
      _timeAvailableBonus = source._timeAvailableBonus
      _bonusAvailableAmount = source._bonusAvailableAmount
      _usedBonus = source._usedBonus
      _timeEnter = source._timeEnter
      _timeExit = source._timeExit
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._idBonusModule) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._idCompany) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._emailing) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._maxBonusAchieved) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._toSpend) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._actualBonusPrice) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._actualBonusPercentage) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._actualBonusTime) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._actualBonusURL) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._nextBonusPrice) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._nextBonusPercentage) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._nextBonusTime) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._nominalTurnover) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._bonusTurnover) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._timeAvailableBonus) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._bonusAvailableAmount) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._usedBonus) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._timeEnter) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._timeExit) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._idBonusModule != 0 {
        try visitor.visitSingularInt64Field(value: _storage._idBonusModule, fieldNumber: 1)
      }
      if _storage._idCompany != 0 {
        try visitor.visitSingularInt64Field(value: _storage._idCompany, fieldNumber: 2)
      }
      if _storage._emailing != false {
        try visitor.visitSingularBoolField(value: _storage._emailing, fieldNumber: 3)
      }
      if _storage._maxBonusAchieved != false {
        try visitor.visitSingularBoolField(value: _storage._maxBonusAchieved, fieldNumber: 4)
      }
      if _storage._toSpend != 0 {
        try visitor.visitSingularInt32Field(value: _storage._toSpend, fieldNumber: 5)
      }
      if _storage._actualBonusPrice != 0 {
        try visitor.visitSingularInt32Field(value: _storage._actualBonusPrice, fieldNumber: 6)
      }
      if _storage._actualBonusPercentage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._actualBonusPercentage, fieldNumber: 7)
      }
      try { if let v = _storage._actualBonusTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._actualBonusURL {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._nextBonusPrice != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nextBonusPrice, fieldNumber: 10)
      }
      if _storage._nextBonusPercentage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nextBonusPercentage, fieldNumber: 11)
      }
      try { if let v = _storage._nextBonusTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._nominalTurnover != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nominalTurnover, fieldNumber: 13)
      }
      if _storage._bonusTurnover != 0 {
        try visitor.visitSingularInt64Field(value: _storage._bonusTurnover, fieldNumber: 14)
      }
      try { if let v = _storage._timeAvailableBonus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if _storage._bonusAvailableAmount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bonusAvailableAmount, fieldNumber: 16)
      }
      if _storage._usedBonus != 0 {
        try visitor.visitSingularInt64Field(value: _storage._usedBonus, fieldNumber: 17)
      }
      try { if let v = _storage._timeEnter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._timeExit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cz_Makro_Bonus_V1_BonusModule, rhs: Cz_Makro_Bonus_V1_BonusModule) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._idBonusModule != rhs_storage._idBonusModule {return false}
        if _storage._idCompany != rhs_storage._idCompany {return false}
        if _storage._emailing != rhs_storage._emailing {return false}
        if _storage._maxBonusAchieved != rhs_storage._maxBonusAchieved {return false}
        if _storage._toSpend != rhs_storage._toSpend {return false}
        if _storage._actualBonusPrice != rhs_storage._actualBonusPrice {return false}
        if _storage._actualBonusPercentage != rhs_storage._actualBonusPercentage {return false}
        if _storage._actualBonusTime != rhs_storage._actualBonusTime {return false}
        if _storage._actualBonusURL != rhs_storage._actualBonusURL {return false}
        if _storage._nextBonusPrice != rhs_storage._nextBonusPrice {return false}
        if _storage._nextBonusPercentage != rhs_storage._nextBonusPercentage {return false}
        if _storage._nextBonusTime != rhs_storage._nextBonusTime {return false}
        if _storage._nominalTurnover != rhs_storage._nominalTurnover {return false}
        if _storage._bonusTurnover != rhs_storage._bonusTurnover {return false}
        if _storage._timeAvailableBonus != rhs_storage._timeAvailableBonus {return false}
        if _storage._bonusAvailableAmount != rhs_storage._bonusAvailableAmount {return false}
        if _storage._usedBonus != rhs_storage._usedBonus {return false}
        if _storage._timeEnter != rhs_storage._timeEnter {return false}
        if _storage._timeExit != rhs_storage._timeExit {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cz_Makro_Bonus_V1_BonusModuleArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BonusModuleArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cz_Makro_Bonus_V1_BonusModuleArray, rhs: Cz_Makro_Bonus_V1_BonusModuleArray) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cz_Makro_Bonus_V1_BonusHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BonusHistory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idBonusHistory"),
    2: .same(proto: "idBonusModule"),
    3: .same(proto: "payedPrice"),
    4: .same(proto: "bonusLevel"),
    5: .same(proto: "finalBonusLevel"),
    6: .same(proto: "timeCreate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.idBonusHistory) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.idBonusModule) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.payedPrice) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.bonusLevel) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.finalBonusLevel) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._timeCreate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.idBonusHistory != 0 {
      try visitor.visitSingularInt64Field(value: self.idBonusHistory, fieldNumber: 1)
    }
    if self.idBonusModule != 0 {
      try visitor.visitSingularInt64Field(value: self.idBonusModule, fieldNumber: 2)
    }
    if self.payedPrice != 0 {
      try visitor.visitSingularInt64Field(value: self.payedPrice, fieldNumber: 3)
    }
    if self.bonusLevel != 0 {
      try visitor.visitSingularInt64Field(value: self.bonusLevel, fieldNumber: 4)
    }
    if self.finalBonusLevel != 0 {
      try visitor.visitSingularInt64Field(value: self.finalBonusLevel, fieldNumber: 5)
    }
    try { if let v = self._timeCreate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cz_Makro_Bonus_V1_BonusHistory, rhs: Cz_Makro_Bonus_V1_BonusHistory) -> Bool {
    if lhs.idBonusHistory != rhs.idBonusHistory {return false}
    if lhs.idBonusModule != rhs.idBonusModule {return false}
    if lhs.payedPrice != rhs.payedPrice {return false}
    if lhs.bonusLevel != rhs.bonusLevel {return false}
    if lhs.finalBonusLevel != rhs.finalBonusLevel {return false}
    if lhs._timeCreate != rhs._timeCreate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cz_Makro_Bonus_V1_BonusHistoryArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BonusHistoryArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cz_Makro_Bonus_V1_BonusHistoryArray, rhs: Cz_Makro_Bonus_V1_BonusHistoryArray) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: rbac_service/rbacService.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Private api without using token authorization logic.
///
/// Usage: instantiate `Appelis_RbacService_V1_RbacPrivateServiceClient`, then call methods of this protocol to make API calls.
public protocol Appelis_RbacService_V1_RbacPrivateServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol? { get }

  func listProjects(
    _ request: Appelis_RbacService_V1_ListProjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_RbacService_V1_ListProjectsRequest, Appelis_RbacService_V1_ListProjectsResponse>

  func listProjectUserIds(
    _ request: Appelis_RbacService_V1_ListProjectUserIdsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_RbacService_V1_ListProjectUserIdsRequest, Appelis_RbacService_V1_ListProjectUserIdsResponse>
}

extension Appelis_RbacService_V1_RbacPrivateServiceClientProtocol {
  public var serviceName: String {
    return "appelis.rbacService.v1.RbacPrivateService"
  }

  /// Unary call to ListProjects
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listProjects(
    _ request: Appelis_RbacService_V1_ListProjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_RbacService_V1_ListProjectsRequest, Appelis_RbacService_V1_ListProjectsResponse> {
    return self.makeUnaryCall(
      path: Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListProjectsInterceptors() ?? []
    )
  }

  /// Returns distinct list of web user ids, which are associated with given project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProjectUserIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listProjectUserIds(
    _ request: Appelis_RbacService_V1_ListProjectUserIdsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_RbacService_V1_ListProjectUserIdsRequest, Appelis_RbacService_V1_ListProjectUserIdsResponse> {
    return self.makeUnaryCall(
      path: Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjectUserIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListProjectUserIdsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_RbacService_V1_RbacPrivateServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_RbacService_V1_RbacPrivateServiceNIOClient")
public final class Appelis_RbacService_V1_RbacPrivateServiceClient: Appelis_RbacService_V1_RbacPrivateServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.rbacService.v1.RbacPrivateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_RbacService_V1_RbacPrivateServiceNIOClient: Appelis_RbacService_V1_RbacPrivateServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.rbacService.v1.RbacPrivateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Private api without using token authorization logic.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_RbacService_V1_RbacPrivateServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol? { get }

  func makeListProjectsCall(
    _ request: Appelis_RbacService_V1_ListProjectsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ListProjectsRequest, Appelis_RbacService_V1_ListProjectsResponse>

  func makeListProjectUserIdsCall(
    _ request: Appelis_RbacService_V1_ListProjectUserIdsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ListProjectUserIdsRequest, Appelis_RbacService_V1_ListProjectUserIdsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_RbacService_V1_RbacPrivateServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeListProjectsCall(
    _ request: Appelis_RbacService_V1_ListProjectsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ListProjectsRequest, Appelis_RbacService_V1_ListProjectsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListProjectsInterceptors() ?? []
    )
  }

  public func makeListProjectUserIdsCall(
    _ request: Appelis_RbacService_V1_ListProjectUserIdsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ListProjectUserIdsRequest, Appelis_RbacService_V1_ListProjectUserIdsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjectUserIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListProjectUserIdsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_RbacService_V1_RbacPrivateServiceAsyncClientProtocol {
  public func listProjects(
    _ request: Appelis_RbacService_V1_ListProjectsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_RbacService_V1_ListProjectsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListProjectsInterceptors() ?? []
    )
  }

  public func listProjectUserIds(
    _ request: Appelis_RbacService_V1_ListProjectUserIdsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_RbacService_V1_ListProjectUserIdsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjectUserIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListProjectUserIdsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_RbacService_V1_RbacPrivateServiceAsyncClient: Appelis_RbacService_V1_RbacPrivateServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_RbacService_V1_RbacPrivateServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'listProjects'.
  func makeListProjectsInterceptors() -> [ClientInterceptor<Appelis_RbacService_V1_ListProjectsRequest, Appelis_RbacService_V1_ListProjectsResponse>]

  /// - Returns: Interceptors to use when invoking 'listProjectUserIds'.
  func makeListProjectUserIdsInterceptors() -> [ClientInterceptor<Appelis_RbacService_V1_ListProjectUserIdsRequest, Appelis_RbacService_V1_ListProjectUserIdsResponse>]
}

public enum Appelis_RbacService_V1_RbacPrivateServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RbacPrivateService",
    fullName: "appelis.rbacService.v1.RbacPrivateService",
    methods: [
      Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjects,
      Appelis_RbacService_V1_RbacPrivateServiceClientMetadata.Methods.listProjectUserIds,
    ]
  )

  public enum Methods {
    public static let listProjects = GRPCMethodDescriptor(
      name: "ListProjects",
      path: "/appelis.rbacService.v1.RbacPrivateService/ListProjects",
      type: GRPCCallType.unary
    )

    public static let listProjectUserIds = GRPCMethodDescriptor(
      name: "ListProjectUserIds",
      path: "/appelis.rbacService.v1.RbacPrivateService/ListProjectUserIds",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Appelis_RbacService_V1_RbacServiceClient`, then call methods of this protocol to make API calls.
public protocol Appelis_RbacService_V1_RbacServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol? { get }

  func hasPermissions(
    _ request: Appelis_RbacService_V1_HasPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_RbacService_V1_HasPermissionsRequest, Appelis_RbacService_V1_HasPermissionsResponse>

  func addPermissions(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse>

  func removePermissions(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse>
}

extension Appelis_RbacService_V1_RbacServiceClientProtocol {
  public var serviceName: String {
    return "appelis.rbacService.v1.RbacService"
  }

  /// Unary call to HasPermissions
  ///
  /// - Parameters:
  ///   - request: Request to send to HasPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func hasPermissions(
    _ request: Appelis_RbacService_V1_HasPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_RbacService_V1_HasPermissionsRequest, Appelis_RbacService_V1_HasPermissionsResponse> {
    return self.makeUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.hasPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHasPermissionsInterceptors() ?? []
    )
  }

  /// Unary call to AddPermissions
  ///
  /// - Parameters:
  ///   - request: Request to send to AddPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addPermissions(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse> {
    return self.makeUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.addPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddPermissionsInterceptors() ?? []
    )
  }

  /// Unary call to RemovePermissions
  ///
  /// - Parameters:
  ///   - request: Request to send to RemovePermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removePermissions(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse> {
    return self.makeUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.removePermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemovePermissionsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_RbacService_V1_RbacServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_RbacService_V1_RbacServiceNIOClient")
public final class Appelis_RbacService_V1_RbacServiceClient: Appelis_RbacService_V1_RbacServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.rbacService.v1.RbacService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_RbacService_V1_RbacServiceNIOClient: Appelis_RbacService_V1_RbacServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.rbacService.v1.RbacService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_RbacService_V1_RbacServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol? { get }

  func makeHasPermissionsCall(
    _ request: Appelis_RbacService_V1_HasPermissionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_HasPermissionsRequest, Appelis_RbacService_V1_HasPermissionsResponse>

  func makeAddPermissionsCall(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse>

  func makeRemovePermissionsCall(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_RbacService_V1_RbacServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_RbacService_V1_RbacServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeHasPermissionsCall(
    _ request: Appelis_RbacService_V1_HasPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_HasPermissionsRequest, Appelis_RbacService_V1_HasPermissionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.hasPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHasPermissionsInterceptors() ?? []
    )
  }

  public func makeAddPermissionsCall(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.addPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddPermissionsInterceptors() ?? []
    )
  }

  public func makeRemovePermissionsCall(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.removePermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemovePermissionsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_RbacService_V1_RbacServiceAsyncClientProtocol {
  public func hasPermissions(
    _ request: Appelis_RbacService_V1_HasPermissionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_RbacService_V1_HasPermissionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.hasPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHasPermissionsInterceptors() ?? []
    )
  }

  public func addPermissions(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_RbacService_V1_ManagePermissionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.addPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddPermissionsInterceptors() ?? []
    )
  }

  public func removePermissions(
    _ request: Appelis_RbacService_V1_ManagePermissionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_RbacService_V1_ManagePermissionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.removePermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemovePermissionsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_RbacService_V1_RbacServiceAsyncClient: Appelis_RbacService_V1_RbacServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_RbacService_V1_RbacServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'hasPermissions'.
  func makeHasPermissionsInterceptors() -> [ClientInterceptor<Appelis_RbacService_V1_HasPermissionsRequest, Appelis_RbacService_V1_HasPermissionsResponse>]

  /// - Returns: Interceptors to use when invoking 'addPermissions'.
  func makeAddPermissionsInterceptors() -> [ClientInterceptor<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse>]

  /// - Returns: Interceptors to use when invoking 'removePermissions'.
  func makeRemovePermissionsInterceptors() -> [ClientInterceptor<Appelis_RbacService_V1_ManagePermissionsRequest, Appelis_RbacService_V1_ManagePermissionsResponse>]
}

public enum Appelis_RbacService_V1_RbacServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RbacService",
    fullName: "appelis.rbacService.v1.RbacService",
    methods: [
      Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.hasPermissions,
      Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.addPermissions,
      Appelis_RbacService_V1_RbacServiceClientMetadata.Methods.removePermissions,
    ]
  )

  public enum Methods {
    public static let hasPermissions = GRPCMethodDescriptor(
      name: "HasPermissions",
      path: "/appelis.rbacService.v1.RbacService/HasPermissions",
      type: GRPCCallType.unary
    )

    public static let addPermissions = GRPCMethodDescriptor(
      name: "AddPermissions",
      path: "/appelis.rbacService.v1.RbacService/AddPermissions",
      type: GRPCCallType.unary
    )

    public static let removePermissions = GRPCMethodDescriptor(
      name: "RemovePermissions",
      path: "/appelis.rbacService.v1.RbacService/RemovePermissions",
      type: GRPCCallType.unary
    )
  }
}


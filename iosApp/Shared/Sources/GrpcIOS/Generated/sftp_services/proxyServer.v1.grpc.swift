//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: sftp_services/proxyServer.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_Sftp_Proxy_V1_SftpServerProxyClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Sftp_Proxy_V1_SftpServerProxyClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol? { get }

  func listPath(
    _ request: Appelis_Sftp_Proxy_V1_ListPathRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Sftp_Proxy_V1_ListPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse>

  func streamFileContent(
    _ request: Appelis_Sftp_Proxy_V1_StreamFileContentRequest,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_Sftp_Proxy_V1_StreamFileContentResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Sftp_Proxy_V1_StreamFileContentRequest, Appelis_Sftp_Proxy_V1_StreamFileContentResponse>

  func deletePath(
    _ request: Appelis_Sftp_Proxy_V1_DeletePathRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Sftp_Proxy_V1_DeletePathRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func watchPath(
    _ request: Appelis_Sftp_Proxy_V1_WatchPathRequest,
    callOptions: CallOptions?,
    handler: @escaping (Appelis_Sftp_Proxy_V1_ListPathResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Sftp_Proxy_V1_WatchPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse>
}

extension Appelis_Sftp_Proxy_V1_SftpServerProxyClientProtocol {
  public var serviceName: String {
    return "appelis.sftp.proxy.v1.SftpServerProxy"
  }

  /// List all paths from root.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPath.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPath(
    _ request: Appelis_Sftp_Proxy_V1_ListPathRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Sftp_Proxy_V1_ListPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse> {
    return self.makeUnaryCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.listPath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPathInterceptors() ?? []
    )
  }

  /// Streams file content to consumer.
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamFileContent.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamFileContent(
    _ request: Appelis_Sftp_Proxy_V1_StreamFileContentRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_Sftp_Proxy_V1_StreamFileContentResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Sftp_Proxy_V1_StreamFileContentRequest, Appelis_Sftp_Proxy_V1_StreamFileContentResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.streamFileContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamFileContentInterceptors() ?? [],
      handler: handler
    )
  }

  /// Deletes file or empty directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeletePath.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deletePath(
    _ request: Appelis_Sftp_Proxy_V1_DeletePathRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Sftp_Proxy_V1_DeletePathRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.deletePath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeletePathInterceptors() ?? []
    )
  }

  /// Should hit when new files are added to folders
  ///
  /// - Parameters:
  ///   - request: Request to send to WatchPath.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func watchPath(
    _ request: Appelis_Sftp_Proxy_V1_WatchPathRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Appelis_Sftp_Proxy_V1_ListPathResponse) -> Void
  ) -> ServerStreamingCall<Appelis_Sftp_Proxy_V1_WatchPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse> {
    return self.makeServerStreamingCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.watchPath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchPathInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Appelis_Sftp_Proxy_V1_SftpServerProxyClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Sftp_Proxy_V1_SftpServerProxyNIOClient")
public final class Appelis_Sftp_Proxy_V1_SftpServerProxyClient: Appelis_Sftp_Proxy_V1_SftpServerProxyClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.sftp.proxy.v1.SftpServerProxy service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Sftp_Proxy_V1_SftpServerProxyNIOClient: Appelis_Sftp_Proxy_V1_SftpServerProxyClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.sftp.proxy.v1.SftpServerProxy service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Sftp_Proxy_V1_SftpServerProxyAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol? { get }

  func makeListPathCall(
    _ request: Appelis_Sftp_Proxy_V1_ListPathRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Sftp_Proxy_V1_ListPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse>

  func makeStreamFileContentCall(
    _ request: Appelis_Sftp_Proxy_V1_StreamFileContentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_Sftp_Proxy_V1_StreamFileContentRequest, Appelis_Sftp_Proxy_V1_StreamFileContentResponse>

  func makeDeletePathCall(
    _ request: Appelis_Sftp_Proxy_V1_DeletePathRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Sftp_Proxy_V1_DeletePathRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeWatchPathCall(
    _ request: Appelis_Sftp_Proxy_V1_WatchPathRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Appelis_Sftp_Proxy_V1_WatchPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Sftp_Proxy_V1_SftpServerProxyAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeListPathCall(
    _ request: Appelis_Sftp_Proxy_V1_ListPathRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Sftp_Proxy_V1_ListPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.listPath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPathInterceptors() ?? []
    )
  }

  public func makeStreamFileContentCall(
    _ request: Appelis_Sftp_Proxy_V1_StreamFileContentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_Sftp_Proxy_V1_StreamFileContentRequest, Appelis_Sftp_Proxy_V1_StreamFileContentResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.streamFileContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamFileContentInterceptors() ?? []
    )
  }

  public func makeDeletePathCall(
    _ request: Appelis_Sftp_Proxy_V1_DeletePathRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Sftp_Proxy_V1_DeletePathRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.deletePath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeletePathInterceptors() ?? []
    )
  }

  public func makeWatchPathCall(
    _ request: Appelis_Sftp_Proxy_V1_WatchPathRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Appelis_Sftp_Proxy_V1_WatchPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.watchPath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchPathInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Sftp_Proxy_V1_SftpServerProxyAsyncClientProtocol {
  public func listPath(
    _ request: Appelis_Sftp_Proxy_V1_ListPathRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Sftp_Proxy_V1_ListPathResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.listPath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPathInterceptors() ?? []
    )
  }

  public func streamFileContent(
    _ request: Appelis_Sftp_Proxy_V1_StreamFileContentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_Sftp_Proxy_V1_StreamFileContentResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.streamFileContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamFileContentInterceptors() ?? []
    )
  }

  public func deletePath(
    _ request: Appelis_Sftp_Proxy_V1_DeletePathRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.deletePath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeletePathInterceptors() ?? []
    )
  }

  public func watchPath(
    _ request: Appelis_Sftp_Proxy_V1_WatchPathRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Appelis_Sftp_Proxy_V1_ListPathResponse> {
    return self.performAsyncServerStreamingCall(
      path: Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.watchPath.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchPathInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Sftp_Proxy_V1_SftpServerProxyAsyncClient: Appelis_Sftp_Proxy_V1_SftpServerProxyAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Sftp_Proxy_V1_SftpServerProxyClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'listPath'.
  func makeListPathInterceptors() -> [ClientInterceptor<Appelis_Sftp_Proxy_V1_ListPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse>]

  /// - Returns: Interceptors to use when invoking 'streamFileContent'.
  func makeStreamFileContentInterceptors() -> [ClientInterceptor<Appelis_Sftp_Proxy_V1_StreamFileContentRequest, Appelis_Sftp_Proxy_V1_StreamFileContentResponse>]

  /// - Returns: Interceptors to use when invoking 'deletePath'.
  func makeDeletePathInterceptors() -> [ClientInterceptor<Appelis_Sftp_Proxy_V1_DeletePathRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'watchPath'.
  func makeWatchPathInterceptors() -> [ClientInterceptor<Appelis_Sftp_Proxy_V1_WatchPathRequest, Appelis_Sftp_Proxy_V1_ListPathResponse>]
}

public enum Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SftpServerProxy",
    fullName: "appelis.sftp.proxy.v1.SftpServerProxy",
    methods: [
      Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.listPath,
      Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.streamFileContent,
      Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.deletePath,
      Appelis_Sftp_Proxy_V1_SftpServerProxyClientMetadata.Methods.watchPath,
    ]
  )

  public enum Methods {
    public static let listPath = GRPCMethodDescriptor(
      name: "ListPath",
      path: "/appelis.sftp.proxy.v1.SftpServerProxy/ListPath",
      type: GRPCCallType.unary
    )

    public static let streamFileContent = GRPCMethodDescriptor(
      name: "StreamFileContent",
      path: "/appelis.sftp.proxy.v1.SftpServerProxy/StreamFileContent",
      type: GRPCCallType.serverStreaming
    )

    public static let deletePath = GRPCMethodDescriptor(
      name: "DeletePath",
      path: "/appelis.sftp.proxy.v1.SftpServerProxy/DeletePath",
      type: GRPCCallType.unary
    )

    public static let watchPath = GRPCMethodDescriptor(
      name: "WatchPath",
      path: "/appelis.sftp.proxy.v1.SftpServerProxy/WatchPath",
      type: GRPCCallType.serverStreaming
    )
  }
}


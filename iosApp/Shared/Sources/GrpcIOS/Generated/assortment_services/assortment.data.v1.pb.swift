// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: assortment_services/assortment.data.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Assortment_Data_V1_CreateType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownCreateType // = 0
  case automatic // = 1
  case manual // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownCreateType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCreateType
    case 1: self = .automatic
    case 2: self = .manual
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownCreateType: return 0
    case .automatic: return 1
    case .manual: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Assortment_Data_V1_CreateType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Assortment_Data_V1_CreateType] = [
    .unknownCreateType,
    .automatic,
    .manual,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Assortment_Data_V1_PriceType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownPriceType // = 0
  case unit // = 1
  case package // = 2
  case minimalPackage // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownPriceType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownPriceType
    case 1: self = .unit
    case 2: self = .package
    case 3: self = .minimalPackage
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownPriceType: return 0
    case .unit: return 1
    case .package: return 2
    case .minimalPackage: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Assortment_Data_V1_PriceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Assortment_Data_V1_PriceType] = [
    .unknownPriceType,
    .unit,
    .package,
    .minimalPackage,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Assortment_Data_V1_StockStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownStatus // = 0
  case available // = 1
  case temporarilyUnavailable // = 2
  case longtermUnavailable // = 3
  case order // = 4
  case clearanceSale // = 5
  case unlimited // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownStatus
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownStatus
    case 1: self = .available
    case 2: self = .temporarilyUnavailable
    case 3: self = .longtermUnavailable
    case 4: self = .order
    case 5: self = .clearanceSale
    case 6: self = .unlimited
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownStatus: return 0
    case .available: return 1
    case .temporarilyUnavailable: return 2
    case .longtermUnavailable: return 3
    case .order: return 4
    case .clearanceSale: return 5
    case .unlimited: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Assortment_Data_V1_StockStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Assortment_Data_V1_StockStatus] = [
    .unknownStatus,
    .available,
    .temporarilyUnavailable,
    .longtermUnavailable,
    .order,
    .clearanceSale,
    .unlimited,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Assortment_Data_V1_AdminPrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Appelis_Assortment_Data_V1_Price {
    get {return _data ?? Appelis_Assortment_Data_V1_Price()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  /// Price level of user and price must match to use correct price.
  public var priceLevel: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _priceLevel ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_priceLevel = newValue}
  }
  /// Returns true if `priceLevel` has been explicitly set.
  public var hasPriceLevel: Bool {return self._priceLevel != nil}
  /// Clears the value of `priceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPriceLevel() {self._priceLevel = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Appelis_Assortment_Data_V1_Price? = nil
  fileprivate var _priceLevel: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Appelis_Assortment_Data_V1_AdminArticle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Appelis_Assortment_Data_V1_ArticleData {
    get {return _storage._data ?? Appelis_Assortment_Data_V1_ArticleData()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  /// Prices data message to use by client apps.
  public var prices: [Appelis_Assortment_Data_V1_AdminPrice] {
    get {return _storage._prices}
    set {_uniqueStorage()._prices = newValue}
  }

  /// Non-unique attribute values (by value) showed as tags in UI. Provide only ids of attribute values.
  public var attributeValues: [String] {
    get {return _storage._attributeValues}
    set {_uniqueStorage()._attributeValues = newValue}
  }

  /// Mapped categories to article.
  public var categories: [Appelis_Assortment_Data_V1_CategoryMapping] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  /// Static priority when sorting articles in assortment catalog
  public var staticPriority: Double {
    get {return _storage._staticPriority}
    set {_uniqueStorage()._staticPriority = newValue}
  }

  /// Extra articles mapped to this article. Used for article addons in restaurants.
  public var extras: [String] {
    get {return _storage._extras}
    set {_uniqueStorage()._extras = newValue}
  }

  /// Html encoded description for article
  public var htmlDescription: Data {
    get {return _storage._htmlDescription}
    set {_uniqueStorage()._htmlDescription = newValue}
  }

  /// Should be used when article have to be found by other keywords not only by name.
  public var searchKeywords: String {
    get {return _storage._searchKeywords}
    set {_uniqueStorage()._searchKeywords = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Appelis_Assortment_Data_V1_CategoryMapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of category.
  public var id: Int64 = 0

  /// Flag describes if mapping was created automatically from script or manually from administration.
  public var type: Appelis_Assortment_Data_V1_CreateType = .unknownCreateType

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Assortment_Data_V1_Price {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Appelis_Assortment_Data_V1_PriceType = .unknownPriceType

  /// Price is strictly defined on business.
  public var businessID: String = String()

  /// Price for one piece of Article
  public var currency: Appelis_Currency = .unknown

  public var value: Appelis_PriceValue {
    get {return _value ?? Appelis_PriceValue()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var valueTax: Appelis_PriceValue {
    get {return _valueTax ?? Appelis_PriceValue()}
    set {_valueTax = newValue}
  }
  /// Returns true if `valueTax` has been explicitly set.
  public var hasValueTax: Bool {return self._valueTax != nil}
  /// Clears the value of `valueTax`. Subsequent reads from it will return its default value.
  public mutating func clearValueTax() {self._valueTax = nil}

  /// validity of price
  public var validityFrom: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validityFrom ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validityFrom = newValue}
  }
  /// Returns true if `validityFrom` has been explicitly set.
  public var hasValidityFrom: Bool {return self._validityFrom != nil}
  /// Clears the value of `validityFrom`. Subsequent reads from it will return its default value.
  public mutating func clearValidityFrom() {self._validityFrom = nil}

  public var validityTo: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validityTo ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validityTo = newValue}
  }
  /// Returns true if `validityTo` has been explicitly set.
  public var hasValidityTo: Bool {return self._validityTo != nil}
  /// Clears the value of `validityTo`. Subsequent reads from it will return its default value.
  public mutating func clearValidityTo() {self._validityTo = nil}

  public var priceType: Appelis_Articles_V1_PriceType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Appelis_PriceValue? = nil
  fileprivate var _valueTax: Appelis_PriceValue? = nil
  fileprivate var _validityFrom: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validityTo: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Appelis_Assortment_Data_V1_Availability {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Availability is strictly defined on business.
  public var businessID: String = String()

  /// How many items are available
  public var quantity: Int64 = 0

  /// Status of article on defined business.
  public var status: Appelis_Assortment_Data_V1_StockStatus = .unknownStatus

  /// Time when availability was changed.
  public var lastChange: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastChange ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastChange = newValue}
  }
  /// Returns true if `lastChange` has been explicitly set.
  public var hasLastChange: Bool {return self._lastChange != nil}
  /// Clears the value of `lastChange`. Subsequent reads from it will return its default value.
  public mutating func clearLastChange() {self._lastChange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastChange: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Appelis_Assortment_Data_V1_ArticleData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// main id or article
  public var id: String = String()

  /// default article name
  public var name: String = String()

  /// Description of article without html formatting.
  public var shortDescription: String = String()

  /// external id of article. optional id.
  public var externalID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _externalID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  public var hasExternalID: Bool {return self._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalID() {self._externalID = nil}

  /// Tax for article, for showing in UI. (0-100%)
  public var tax: UInt32 = 0

  /// EAN codes for article. (Will be used for searching.)
  public var eans: [String] = []

  /// Flag that describes if article is weighted article. (Price is defined by weight.)
  public var weightIndicator: Bool = false

  /// Flag that describes if article needs shipping in cart.
  public var needShipping: Bool = false

  /// Selected first picture from pictures field.
  public var topPicture: Appelis_Picture {
    get {return _topPicture ?? Appelis_Picture()}
    set {_topPicture = newValue}
  }
  /// Returns true if `topPicture` has been explicitly set.
  public var hasTopPicture: Bool {return self._topPicture != nil}
  /// Clears the value of `topPicture`. Subsequent reads from it will return its default value.
  public mutating func clearTopPicture() {self._topPicture = nil}

  /// Pictures of article
  public var pictures: [Appelis_Picture] = []

  /// Availabilities of article per business.
  public var availabilities: [Appelis_Assortment_Data_V1_Availability] = []

  /// Time when article was created in system.
  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _externalID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _topPicture: Appelis_Picture? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Appelis_Assortment_Data_V1_ArticleArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var array: [Appelis_Assortment_Data_V1_Article] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Assortment_Data_V1_AdminArticleArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var array: [Appelis_Assortment_Data_V1_AdminArticle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Assortment_Data_V1_Article {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Appelis_Assortment_Data_V1_ArticleData {
    get {return _storage._data ?? Appelis_Assortment_Data_V1_ArticleData()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  /// Prices data message to use by client apps.
  public var prices: [Appelis_Assortment_Data_V1_Price] {
    get {return _storage._prices}
    set {_uniqueStorage()._prices = newValue}
  }

  /// Unique attribute values (by value) showed as tags in UI.
  public var attributes: [Appelis_Assortment_Data_V1_AttributeValue] {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  public var categories: [Appelis_Assortment_Data_V1_CategoryMapping] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Appelis_Assortment_Data_V1_StringArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Assortment_Data_V1_CreateType: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_PriceType: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_StockStatus: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_AdminPrice: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_AdminArticle: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_CategoryMapping: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_Price: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_Availability: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_ArticleData: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_ArticleArray: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_AdminArticleArray: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_Article: @unchecked Sendable {}
extension Appelis_Assortment_Data_V1_StringArray: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.assortment.data.v1"

extension Appelis_Assortment_Data_V1_CreateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CREATE_TYPE"),
    1: .same(proto: "AUTOMATIC"),
    2: .same(proto: "MANUAL"),
  ]
}

extension Appelis_Assortment_Data_V1_PriceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_PRICE_TYPE"),
    1: .same(proto: "UNIT"),
    2: .same(proto: "PACKAGE"),
    3: .same(proto: "MINIMAL_PACKAGE"),
  ]
}

extension Appelis_Assortment_Data_V1_StockStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_STATUS"),
    1: .same(proto: "AVAILABLE"),
    2: .same(proto: "TEMPORARILY_UNAVAILABLE"),
    3: .same(proto: "LONGTERM_UNAVAILABLE"),
    4: .same(proto: "ORDER"),
    5: .same(proto: "CLEARANCE_SALE"),
    6: .same(proto: "UNLIMITED"),
  ]
}

extension Appelis_Assortment_Data_V1_AdminPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminPrice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "priceLevel"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._priceLevel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._priceLevel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_AdminPrice, rhs: Appelis_Assortment_Data_V1_AdminPrice) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs._priceLevel != rhs._priceLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_AdminArticle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminArticle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "prices"),
    3: .same(proto: "attributeValues"),
    4: .same(proto: "categories"),
    5: .same(proto: "staticPriority"),
    6: .same(proto: "extras"),
    7: .same(proto: "htmlDescription"),
    8: .same(proto: "searchKeywords"),
  ]

  fileprivate class _StorageClass {
    var _data: Appelis_Assortment_Data_V1_ArticleData? = nil
    var _prices: [Appelis_Assortment_Data_V1_AdminPrice] = []
    var _attributeValues: [String] = []
    var _categories: [Appelis_Assortment_Data_V1_CategoryMapping] = []
    var _staticPriority: Double = 0
    var _extras: [String] = []
    var _htmlDescription: Data = Data()
    var _searchKeywords: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _prices = source._prices
      _attributeValues = source._attributeValues
      _categories = source._categories
      _staticPriority = source._staticPriority
      _extras = source._extras
      _htmlDescription = source._htmlDescription
      _searchKeywords = source._searchKeywords
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._data) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._prices) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._attributeValues) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._categories) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._staticPriority) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._extras) }()
        case 7: try { try decoder.decodeSingularBytesField(value: &_storage._htmlDescription) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._searchKeywords) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._prices.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._prices, fieldNumber: 2)
      }
      if !_storage._attributeValues.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._attributeValues, fieldNumber: 3)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 4)
      }
      if _storage._staticPriority != 0 {
        try visitor.visitSingularDoubleField(value: _storage._staticPriority, fieldNumber: 5)
      }
      if !_storage._extras.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._extras, fieldNumber: 6)
      }
      if !_storage._htmlDescription.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._htmlDescription, fieldNumber: 7)
      }
      if !_storage._searchKeywords.isEmpty {
        try visitor.visitSingularStringField(value: _storage._searchKeywords, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_AdminArticle, rhs: Appelis_Assortment_Data_V1_AdminArticle) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        if _storage._prices != rhs_storage._prices {return false}
        if _storage._attributeValues != rhs_storage._attributeValues {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._staticPriority != rhs_storage._staticPriority {return false}
        if _storage._extras != rhs_storage._extras {return false}
        if _storage._htmlDescription != rhs_storage._htmlDescription {return false}
        if _storage._searchKeywords != rhs_storage._searchKeywords {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_CategoryMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryMapping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.type != .unknownCreateType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_CategoryMapping, rhs: Appelis_Assortment_Data_V1_CategoryMapping) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_Price: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Price"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "businessId"),
    3: .same(proto: "currency"),
    4: .same(proto: "value"),
    5: .same(proto: "valueTax"),
    6: .same(proto: "validityFrom"),
    7: .same(proto: "validityTo"),
    8: .same(proto: "priceType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.businessID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.currency) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._valueTax) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._validityFrom) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._validityTo) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.priceType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .unknownPriceType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.businessID.isEmpty {
      try visitor.visitSingularStringField(value: self.businessID, fieldNumber: 2)
    }
    if self.currency != .unknown {
      try visitor.visitSingularEnumField(value: self.currency, fieldNumber: 3)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._valueTax {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._validityFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._validityTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.priceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.priceType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_Price, rhs: Appelis_Assortment_Data_V1_Price) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.businessID != rhs.businessID {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs._value != rhs._value {return false}
    if lhs._valueTax != rhs._valueTax {return false}
    if lhs._validityFrom != rhs._validityFrom {return false}
    if lhs._validityTo != rhs._validityTo {return false}
    if lhs.priceType != rhs.priceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_Availability: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Availability"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "businessId"),
    2: .same(proto: "quantity"),
    3: .same(proto: "status"),
    4: .same(proto: "lastChange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.businessID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.quantity) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._lastChange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.businessID.isEmpty {
      try visitor.visitSingularStringField(value: self.businessID, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt64Field(value: self.quantity, fieldNumber: 2)
    }
    if self.status != .unknownStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try { if let v = self._lastChange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_Availability, rhs: Appelis_Assortment_Data_V1_Availability) -> Bool {
    if lhs.businessID != rhs.businessID {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.status != rhs.status {return false}
    if lhs._lastChange != rhs._lastChange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_ArticleData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArticleData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "shortDescription"),
    4: .same(proto: "externalId"),
    5: .same(proto: "tax"),
    6: .same(proto: "eans"),
    7: .same(proto: "weightIndicator"),
    8: .same(proto: "needShipping"),
    9: .same(proto: "topPicture"),
    10: .same(proto: "pictures"),
    11: .same(proto: "availabilities"),
    12: .same(proto: "createdAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shortDescription) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._externalID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.tax) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.eans) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.weightIndicator) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.needShipping) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._topPicture) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.pictures) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.availabilities) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.shortDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.shortDescription, fieldNumber: 3)
    }
    try { if let v = self._externalID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.tax != 0 {
      try visitor.visitSingularUInt32Field(value: self.tax, fieldNumber: 5)
    }
    if !self.eans.isEmpty {
      try visitor.visitRepeatedStringField(value: self.eans, fieldNumber: 6)
    }
    if self.weightIndicator != false {
      try visitor.visitSingularBoolField(value: self.weightIndicator, fieldNumber: 7)
    }
    if self.needShipping != false {
      try visitor.visitSingularBoolField(value: self.needShipping, fieldNumber: 8)
    }
    try { if let v = self._topPicture {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.pictures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pictures, fieldNumber: 10)
    }
    if !self.availabilities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.availabilities, fieldNumber: 11)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_ArticleData, rhs: Appelis_Assortment_Data_V1_ArticleData) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.shortDescription != rhs.shortDescription {return false}
    if lhs._externalID != rhs._externalID {return false}
    if lhs.tax != rhs.tax {return false}
    if lhs.eans != rhs.eans {return false}
    if lhs.weightIndicator != rhs.weightIndicator {return false}
    if lhs.needShipping != rhs.needShipping {return false}
    if lhs._topPicture != rhs._topPicture {return false}
    if lhs.pictures != rhs.pictures {return false}
    if lhs.availabilities != rhs.availabilities {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_ArticleArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArticleArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "array"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.array) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.array.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.array, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_ArticleArray, rhs: Appelis_Assortment_Data_V1_ArticleArray) -> Bool {
    if lhs.array != rhs.array {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_AdminArticleArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdminArticleArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "array"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.array) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.array.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.array, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_AdminArticleArray, rhs: Appelis_Assortment_Data_V1_AdminArticleArray) -> Bool {
    if lhs.array != rhs.array {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_Article: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Article"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "prices"),
    3: .same(proto: "attributes"),
    4: .same(proto: "categories"),
  ]

  fileprivate class _StorageClass {
    var _data: Appelis_Assortment_Data_V1_ArticleData? = nil
    var _prices: [Appelis_Assortment_Data_V1_Price] = []
    var _attributes: [Appelis_Assortment_Data_V1_AttributeValue] = []
    var _categories: [Appelis_Assortment_Data_V1_CategoryMapping] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _prices = source._prices
      _attributes = source._attributes
      _categories = source._categories
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._data) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._prices) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._attributes) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._categories) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._prices.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._prices, fieldNumber: 2)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attributes, fieldNumber: 3)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categories, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_Article, rhs: Appelis_Assortment_Data_V1_Article) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        if _storage._prices != rhs_storage._prices {return false}
        if _storage._attributes != rhs_storage._attributes {return false}
        if _storage._categories != rhs_storage._categories {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Assortment_Data_V1_StringArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StringArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedStringField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Assortment_Data_V1_StringArray, rhs: Appelis_Assortment_Data_V1_StringArray) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

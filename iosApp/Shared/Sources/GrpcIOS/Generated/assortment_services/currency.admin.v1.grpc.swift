//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: assortment_services/currency.admin.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_Assortment_V1_CurrencyAdminClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Assortment_V1_CurrencyAdminClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol? { get }

  func setCurrency(
    _ request: Appelis_Assortment_V1_SetCurrencyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Assortment_V1_SetCurrencyRequest, Appelis_Assortment_V1_SetCurrencyResponse>

  func getCurrency(
    _ request: Appelis_Assortment_V1_GetCurrencyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Assortment_V1_GetCurrencyRequest, Appelis_Assortment_V1_GetCurrencyResponse>
}

extension Appelis_Assortment_V1_CurrencyAdminClientProtocol {
  public var serviceName: String {
    return "appelis.assortment.v1.CurrencyAdmin"
  }

  /// Sets currency on project defined in token
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCurrency.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setCurrency(
    _ request: Appelis_Assortment_V1_SetCurrencyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Assortment_V1_SetCurrencyRequest, Appelis_Assortment_V1_SetCurrencyResponse> {
    return self.makeUnaryCall(
      path: Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.setCurrency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCurrencyInterceptors() ?? []
    )
  }

  /// Gets currency from project. If currency was not set returns empty response.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCurrency.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCurrency(
    _ request: Appelis_Assortment_V1_GetCurrencyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Assortment_V1_GetCurrencyRequest, Appelis_Assortment_V1_GetCurrencyResponse> {
    return self.makeUnaryCall(
      path: Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.getCurrency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCurrencyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Assortment_V1_CurrencyAdminClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Assortment_V1_CurrencyAdminNIOClient")
public final class Appelis_Assortment_V1_CurrencyAdminClient: Appelis_Assortment_V1_CurrencyAdminClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.assortment.v1.CurrencyAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Assortment_V1_CurrencyAdminNIOClient: Appelis_Assortment_V1_CurrencyAdminClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.assortment.v1.CurrencyAdmin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Assortment_V1_CurrencyAdminAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol? { get }

  func makeSetCurrencyCall(
    _ request: Appelis_Assortment_V1_SetCurrencyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Assortment_V1_SetCurrencyRequest, Appelis_Assortment_V1_SetCurrencyResponse>

  func makeGetCurrencyCall(
    _ request: Appelis_Assortment_V1_GetCurrencyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Assortment_V1_GetCurrencyRequest, Appelis_Assortment_V1_GetCurrencyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Assortment_V1_CurrencyAdminAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Assortment_V1_CurrencyAdminClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSetCurrencyCall(
    _ request: Appelis_Assortment_V1_SetCurrencyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Assortment_V1_SetCurrencyRequest, Appelis_Assortment_V1_SetCurrencyResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.setCurrency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCurrencyInterceptors() ?? []
    )
  }

  public func makeGetCurrencyCall(
    _ request: Appelis_Assortment_V1_GetCurrencyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Assortment_V1_GetCurrencyRequest, Appelis_Assortment_V1_GetCurrencyResponse> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.getCurrency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCurrencyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Assortment_V1_CurrencyAdminAsyncClientProtocol {
  public func setCurrency(
    _ request: Appelis_Assortment_V1_SetCurrencyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Assortment_V1_SetCurrencyResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.setCurrency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCurrencyInterceptors() ?? []
    )
  }

  public func getCurrency(
    _ request: Appelis_Assortment_V1_GetCurrencyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Appelis_Assortment_V1_GetCurrencyResponse {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.getCurrency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCurrencyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Assortment_V1_CurrencyAdminAsyncClient: Appelis_Assortment_V1_CurrencyAdminAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Assortment_V1_CurrencyAdminClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'setCurrency'.
  func makeSetCurrencyInterceptors() -> [ClientInterceptor<Appelis_Assortment_V1_SetCurrencyRequest, Appelis_Assortment_V1_SetCurrencyResponse>]

  /// - Returns: Interceptors to use when invoking 'getCurrency'.
  func makeGetCurrencyInterceptors() -> [ClientInterceptor<Appelis_Assortment_V1_GetCurrencyRequest, Appelis_Assortment_V1_GetCurrencyResponse>]
}

public enum Appelis_Assortment_V1_CurrencyAdminClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CurrencyAdmin",
    fullName: "appelis.assortment.v1.CurrencyAdmin",
    methods: [
      Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.setCurrency,
      Appelis_Assortment_V1_CurrencyAdminClientMetadata.Methods.getCurrency,
    ]
  )

  public enum Methods {
    public static let setCurrency = GRPCMethodDescriptor(
      name: "SetCurrency",
      path: "/appelis.assortment.v1.CurrencyAdmin/SetCurrency",
      type: GRPCCallType.unary
    )

    public static let getCurrency = GRPCMethodDescriptor(
      name: "GetCurrency",
      path: "/appelis.assortment.v1.CurrencyAdmin/GetCurrency",
      type: GRPCCallType.unary
    )
  }
}


// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: delivery_service/deliveryBusinessHoursData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appelis_Order_Delivery_V1_DeliveryHours {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hours: [Appelis_Order_Delivery_V1_DeliveryHour] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Appelis_Order_Delivery_V1_DeliveryHour {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// part of pk
  public var businessID: String = String()

  /// part of pk
  public var day: Appelis_WeekDay = .unknownWeekDay

  public var openFrom: Appelis_Order_Delivery_V1_DayHours {
    get {return _openFrom ?? Appelis_Order_Delivery_V1_DayHours()}
    set {_openFrom = newValue}
  }
  /// Returns true if `openFrom` has been explicitly set.
  public var hasOpenFrom: Bool {return self._openFrom != nil}
  /// Clears the value of `openFrom`. Subsequent reads from it will return its default value.
  public mutating func clearOpenFrom() {self._openFrom = nil}

  public var openTo: Appelis_Order_Delivery_V1_DayHours {
    get {return _openTo ?? Appelis_Order_Delivery_V1_DayHours()}
    set {_openTo = newValue}
  }
  /// Returns true if `openTo` has been explicitly set.
  public var hasOpenTo: Bool {return self._openTo != nil}
  /// Clears the value of `openTo`. Subsequent reads from it will return its default value.
  public mutating func clearOpenTo() {self._openTo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _openFrom: Appelis_Order_Delivery_V1_DayHours? = nil
  fileprivate var _openTo: Appelis_Order_Delivery_V1_DayHours? = nil
}

public struct Appelis_Order_Delivery_V1_DayHours {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hour: UInt32 = 0

  public var minute: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Order_Delivery_V1_DeliveryHours: @unchecked Sendable {}
extension Appelis_Order_Delivery_V1_DeliveryHour: @unchecked Sendable {}
extension Appelis_Order_Delivery_V1_DayHours: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.order.delivery.v1"

extension Appelis_Order_Delivery_V1_DeliveryHours: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeliveryHours"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hours"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.hours) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hours.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hours, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Order_Delivery_V1_DeliveryHours, rhs: Appelis_Order_Delivery_V1_DeliveryHours) -> Bool {
    if lhs.hours != rhs.hours {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Order_Delivery_V1_DeliveryHour: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeliveryHour"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "businessId"),
    2: .same(proto: "day"),
    3: .same(proto: "openFrom"),
    4: .same(proto: "openTo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.businessID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.day) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._openFrom) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._openTo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.businessID.isEmpty {
      try visitor.visitSingularStringField(value: self.businessID, fieldNumber: 1)
    }
    if self.day != .unknownWeekDay {
      try visitor.visitSingularEnumField(value: self.day, fieldNumber: 2)
    }
    try { if let v = self._openFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._openTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Order_Delivery_V1_DeliveryHour, rhs: Appelis_Order_Delivery_V1_DeliveryHour) -> Bool {
    if lhs.businessID != rhs.businessID {return false}
    if lhs.day != rhs.day {return false}
    if lhs._openFrom != rhs._openFrom {return false}
    if lhs._openTo != rhs._openTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Order_Delivery_V1_DayHours: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DayHours"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hour"),
    2: .same(proto: "minute"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.hour) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.minute) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hour != 0 {
      try visitor.visitSingularUInt32Field(value: self.hour, fieldNumber: 1)
    }
    if self.minute != 0 {
      try visitor.visitSingularUInt32Field(value: self.minute, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Order_Delivery_V1_DayHours, rhs: Appelis_Order_Delivery_V1_DayHours) -> Bool {
    if lhs.hour != rhs.hour {return false}
    if lhs.minute != rhs.minute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

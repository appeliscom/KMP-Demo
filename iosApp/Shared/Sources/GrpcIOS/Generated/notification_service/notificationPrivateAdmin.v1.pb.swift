// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: notification_service/notificationPrivateAdmin.v1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Appelis_Notifications_V1_NotificationType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case category // = 1
  case banner // = 2
  case text // = 3
  case watchdog // = 4
  case elasticArticle // = 5
  case myOffer // = 6
  case myOfferCategory // = 7
  case order // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .category
    case 2: self = .banner
    case 3: self = .text
    case 4: self = .watchdog
    case 5: self = .elasticArticle
    case 6: self = .myOffer
    case 7: self = .myOfferCategory
    case 8: self = .order
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .category: return 1
    case .banner: return 2
    case .text: return 3
    case .watchdog: return 4
    case .elasticArticle: return 5
    case .myOffer: return 6
    case .myOfferCategory: return 7
    case .order: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Notifications_V1_NotificationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Notifications_V1_NotificationType] = [
    .unknown,
    .category,
    .banner,
    .text,
    .watchdog,
    .elasticArticle,
    .myOffer,
    .myOfferCategory,
    .order,
  ]
}

#endif  // swift(>=4.2)

public enum Appelis_Notifications_V1_NotificationSource: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecific // = 0
  case adminMeeting // = 1
  case adminNotification // = 2
  case beacon // = 3
  case watchdogService // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecific
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecific
    case 1: self = .adminMeeting
    case 2: self = .adminNotification
    case 3: self = .beacon
    case 4: self = .watchdogService
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecific: return 0
    case .adminMeeting: return 1
    case .adminNotification: return 2
    case .beacon: return 3
    case .watchdogService: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Appelis_Notifications_V1_NotificationSource: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Appelis_Notifications_V1_NotificationSource] = [
    .unspecific,
    .adminMeeting,
    .adminNotification,
    .beacon,
    .watchdogService,
  ]
}

#endif  // swift(>=4.2)

public struct Appelis_Notifications_V1_SendIdsNotificationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ids: [Int64] = []

  public var projectID: String = String()

  public var data: Appelis_Notifications_V1_NotificationInput {
    get {return _data ?? Appelis_Notifications_V1_NotificationInput()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Appelis_Notifications_V1_NotificationInput? = nil
}

public struct Appelis_Notifications_V1_NotificationInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Appelis_Notifications_V1_NotificationType = .unknown

  public var source: Appelis_Notifications_V1_NotificationSource = .unspecific

  public var title: String = String()

  public var text: String = String()

  public var idItem: String = String()

  public var image: String = String()

  public var icon: String = String()

  public var isData: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appelis_Notifications_V1_NotificationType: @unchecked Sendable {}
extension Appelis_Notifications_V1_NotificationSource: @unchecked Sendable {}
extension Appelis_Notifications_V1_SendIdsNotificationRequest: @unchecked Sendable {}
extension Appelis_Notifications_V1_NotificationInput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appelis.notifications.v1"

extension Appelis_Notifications_V1_NotificationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "CATEGORY"),
    2: .same(proto: "BANNER"),
    3: .same(proto: "TEXT"),
    4: .same(proto: "WATCHDOG"),
    5: .same(proto: "ELASTIC_ARTICLE"),
    6: .same(proto: "MY_OFFER"),
    7: .same(proto: "MY_OFFER_CATEGORY"),
    8: .same(proto: "ORDER"),
  ]
}

extension Appelis_Notifications_V1_NotificationSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIC"),
    1: .same(proto: "ADMIN_MEETING"),
    2: .same(proto: "ADMIN_NOTIFICATION"),
    3: .same(proto: "BEACON"),
    4: .same(proto: "WATCHDOG_SERVICE"),
  ]
}

extension Appelis_Notifications_V1_SendIdsNotificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendIdsNotificationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
    2: .same(proto: "projectId"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.ids) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.ids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ids, fieldNumber: 1)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Notifications_V1_SendIdsNotificationRequest, rhs: Appelis_Notifications_V1_SendIdsNotificationRequest) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appelis_Notifications_V1_NotificationInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NotificationInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "source"),
    3: .same(proto: "title"),
    4: .same(proto: "text"),
    5: .same(proto: "idItem"),
    6: .same(proto: "image"),
    7: .same(proto: "icon"),
    8: .same(proto: "isData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.idItem) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.source != .unspecific {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if !self.idItem.isEmpty {
      try visitor.visitSingularStringField(value: self.idItem, fieldNumber: 5)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 6)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 7)
    }
    if self.isData != false {
      try visitor.visitSingularBoolField(value: self.isData, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appelis_Notifications_V1_NotificationInput, rhs: Appelis_Notifications_V1_NotificationInput) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.source != rhs.source {return false}
    if lhs.title != rhs.title {return false}
    if lhs.text != rhs.text {return false}
    if lhs.idItem != rhs.idItem {return false}
    if lhs.image != rhs.image {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.isData != rhs.isData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: notification_service/notificationPrivateAdmin.v1.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Appelis_Notifications_V1_NotificationPrivateSenderClient`, then call methods of this protocol to make API calls.
public protocol Appelis_Notifications_V1_NotificationPrivateSenderClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol? { get }

  func sendUserNotification(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func sendDeviceNotification(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Appelis_Notifications_V1_NotificationPrivateSenderClientProtocol {
  public var serviceName: String {
    return "appelis.notifications.v1.NotificationPrivateSender"
  }

  /// Unary call to SendUserNotification
  ///
  /// - Parameters:
  ///   - request: Request to send to SendUserNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendUserNotification(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendUserNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendUserNotificationInterceptors() ?? []
    )
  }

  /// Unary call to SendDeviceNotification
  ///
  /// - Parameters:
  ///   - request: Request to send to SendDeviceNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendDeviceNotification(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendDeviceNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendDeviceNotificationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Appelis_Notifications_V1_NotificationPrivateSenderClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Appelis_Notifications_V1_NotificationPrivateSenderNIOClient")
public final class Appelis_Notifications_V1_NotificationPrivateSenderClient: Appelis_Notifications_V1_NotificationPrivateSenderClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the appelis.notifications.v1.NotificationPrivateSender service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Appelis_Notifications_V1_NotificationPrivateSenderNIOClient: Appelis_Notifications_V1_NotificationPrivateSenderClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol?

  /// Creates a client for the appelis.notifications.v1.NotificationPrivateSender service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Appelis_Notifications_V1_NotificationPrivateSenderAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol? { get }

  func makeSendUserNotificationCall(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSendDeviceNotificationCall(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Notifications_V1_NotificationPrivateSenderAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.serviceDescriptor
  }

  public var interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSendUserNotificationCall(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendUserNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendUserNotificationInterceptors() ?? []
    )
  }

  public func makeSendDeviceNotificationCall(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendDeviceNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendDeviceNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Appelis_Notifications_V1_NotificationPrivateSenderAsyncClientProtocol {
  public func sendUserNotification(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendUserNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendUserNotificationInterceptors() ?? []
    )
  }

  public func sendDeviceNotification(
    _ request: Appelis_Notifications_V1_SendIdsNotificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendDeviceNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendDeviceNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Appelis_Notifications_V1_NotificationPrivateSenderAsyncClient: Appelis_Notifications_V1_NotificationPrivateSenderAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Appelis_Notifications_V1_NotificationPrivateSenderClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sendUserNotification'.
  func makeSendUserNotificationInterceptors() -> [ClientInterceptor<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'sendDeviceNotification'.
  func makeSendDeviceNotificationInterceptors() -> [ClientInterceptor<Appelis_Notifications_V1_SendIdsNotificationRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NotificationPrivateSender",
    fullName: "appelis.notifications.v1.NotificationPrivateSender",
    methods: [
      Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendUserNotification,
      Appelis_Notifications_V1_NotificationPrivateSenderClientMetadata.Methods.sendDeviceNotification,
    ]
  )

  public enum Methods {
    public static let sendUserNotification = GRPCMethodDescriptor(
      name: "SendUserNotification",
      path: "/appelis.notifications.v1.NotificationPrivateSender/SendUserNotification",
      type: GRPCCallType.unary
    )

    public static let sendDeviceNotification = GRPCMethodDescriptor(
      name: "SendDeviceNotification",
      path: "/appelis.notifications.v1.NotificationPrivateSender/SendDeviceNotification",
      type: GRPCCallType.unary
    )
  }
}


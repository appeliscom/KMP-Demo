syntax = "proto3";

option go_package = "GoServerCore/proto-storage/generated/go/user_service";
option java_package = "com.appelis.userservice";

package appelis.userService.users.v1;

import "identity_service/common.proto";
import "user_service/userService.proto";


service MobileUsersPublic {
  // Rpc will check token and returns data if exists for user claimed by token data, if there is no user payload will be null.
  rpc GetTokenUser(GetTokenUserRequest) returns (GetTokenUserResponse) {}
  // Rpc will send empty payload in case that user data has changed...
  rpc GetTokenUserChanges(GetTokenUserRequest) returns (stream GetTokenUserChangesResponse) {}
  // Updates user claimed by token data.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
}

message UserUpdateData {
  string name = 1;
  string surname = 2;
  string mobileNumber = 3;
}

message UpdateUserRequest {
  appelis.identity.common.v1.Token token = 1;
  UserUpdateData data = 2;
}

message UpdateUserResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError err = 1;
  }
}


message GetTokenUserRequest {
  appelis.identity.common.v1.Token token = 1;
}

message GetTokenUserChangesResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError err = 1;
  }
}

message GetTokenUserResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError err = 1;
    appelis.userService.users.v1.MobileUser user = 2;
  }
}

service MobileUsersPublicAdmin {
  // Rpc will stream all users per projectId in provided token.
  rpc StreamUsers(appelis.identity.common.v1.Token) returns (stream StreamUsersResponse){
  }

  // Rpc will update users in database.
  // If user doesn't have id, user will be created.
  rpc SetUsers(SetUsersRequest) returns (SetUsersResponse) {
  }
  // Delete users by provided ids.
  rpc DeleteUsers(DeleteUsersRequest) returns (DeleteUsersResponse) {
  }
}

message StreamUsersResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError err = 1;
    appelis.identity.common.v1.PermissionError permErr = 2;
    appelis.userService.users.v1.MobileUsersArray data = 3;
  }
}

message SetUsersRequest {
  appelis.identity.common.v1.Token token = 1;
  appelis.userService.users.v1.MobileUsersArray data = 2;
}

message SetUsersResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError err = 1;
    appelis.identity.common.v1.PermissionError permErr = 2;
  }
}

message DeleteUsersResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError err = 1;
    appelis.identity.common.v1.PermissionError permErr = 2;
  }
}

message DeleteUsersRequest{
  appelis.identity.common.v1.Token token = 1;
  repeated int64 userIds = 2;
}
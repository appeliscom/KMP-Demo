syntax = "proto3";

option go_package = "GoServerCore/proto-storage/generated/go/metro_starclub";

import "identity_service/common.proto";
import "appelis/uuid.proto";
import "appelis/language.proto";

package metro.starclub.v1;

service StarClubPolicy {
  // Can be used to determine if calling user can create registration.
  rpc CanManagePolicy (appelis.identity.common.v1.Token) returns (CanManagePolicyResponse) {
  }
  // Rpc check if there are unapproved policy ... to save transfer of data from GetUnApprovedPolicy.
  rpc GetUnapprovedPolicyFlag(GetUnApprovedPolicyFlagRequest) returns(GetUnapprovedPolicyFlagResponse) {}

  rpc GetUnapprovedPolicy(GetUnApprovedPolicyRequest) returns (GetUnApprovedPolicyResponse) {}

  rpc ApprovePolicy(ApprovePolicyRequest) returns(ApprovePolicyResponse) {}
}

message CanManagePolicyResponse {
  oneof payload {
    appelis.identity.common.v1.TokenError tokenErr = 1;
    bool data = 2;
  }
}

message GetUnapprovedPolicyFlagResponse{
  oneof payload {
    appelis.identity.common.v1.TokenError tokenErr = 1;
    bool pendingPolicy = 2;
  }
}

message ApprovePolicyRequest{
  appelis.identity.common.v1.Token token = 1;
  appelis.UUID id = 2;
}

message ApprovePolicyResponse{
  oneof payload {
    // maybe not found policy error ???
    appelis.identity.common.v1.TokenError tokenErr = 1;
    appelis.identity.common.v1.PermissionError permErr = 2;
  }
}

message GetUnApprovedPolicyFlagRequest {
  appelis.identity.common.v1.Token token = 1;
}

message GetUnApprovedPolicyRequest{
  appelis.identity.common.v1.Token token = 1;
  appelis.Language lang = 2;
}

message GetUnApprovedPolicyResponse{
  oneof payload{
    appelis.identity.common.v1.TokenError tokenErr = 1;
    // Optional is because company can have all approved.
    OptionalPolicy policy = 2;
  }
}

message OptionalPolicy {
  Policy policy = 1;
}

message Policy {
  appelis.UUID id = 1;
  // array of data per language...
  bytes data = 2;
}

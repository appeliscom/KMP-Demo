syntax = "proto3";

option go_package = "GoServerCore/proto-storage/generated/go/clickandcollect_metro_services";

import "google/protobuf/timestamp.proto";
import "identity_service/common.proto";
import "user_service/userService.proto";
import "user_service/userCompanyService.proto";
import "clickandcollect_metro_services/metroUserApprovals.v1.proto";

package appelis.clickandcollect.metro.v1;

service RegistrationVerify {
    rpc CompanyVerify (CompanyVerifyRequest) returns (CompanyVerifyResponse) {

    }
}

message CompanyVerifyRequest {
    string validationToken = 2;
}

message CompanyVerifyResponse {
    enum VerifyError {
        VERIFY_UNKNOWN = 0;
        NOT_VALID = 1;
    }

    oneof payload {
        VerifyError error = 1;
    }
}

service RegistrationAdmin {
    // Used by admin to change status of registration
    rpc ChangeRegistrationStatus (ChangeRegistrationStatusRequest) returns (ChangeRegistrationResponse) {}
    // Returns paged registration for project on token. Registrations will be ordered by id descending(creation_time).
    rpc PagedRegistrations (PagedRegistrationsRequest) returns (PagedRegistrationsResponse) {}
    rpc GetFilterOptions (appelis.identity.common.v1.Token) returns (GetFilterOptionsResponse) {}
    rpc GetRegistration (GetRegistrationRequest) returns (GetRegistrationResponse) {}
    rpc ResetRegistration (ResetRegistrationRequest) returns (ResetRegistrationResponse) {}
    // Creates registration record with approved state.
    rpc CreateAdminRegistration(CreateAdminRegistrationRequest) returns (CreateAdminRegistrationResponse) {}
}

message CreateAdminRegistrationRequest {
    appelis.identity.common.v1.Token token = 1;
    int64 companyId = 2;
    string invoiceEmail = 3;
    int64 applicantId = 4;
}

message CreateAdminRegistrationResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        appelis.identity.common.v1.PermissionError permErr = 2;
    }
}


message ManagingUser {
    string idUser = 1;
    string name = 2;
    string surname = 3;
    string email = 4;
}

message GetFilterOptionsResponse {
    message Data {
        repeated ManagingUser managingUsers = 1;
        // Per Status count of registrations, int32 is enum CompanyRegistration.RegistrationStatus
        map<int32, int64> statusCounts = 2;
    }

    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;

        Data data = 2;
    }
}

message GetRegistrationResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        // When there is no registration for selected id.
        appelis.identity.common.v1.PermissionError permErr = 2;
        // data for registration.
        AdminCompanyRegistrationDetail data = 3;
    }
}

message GetRegistrationRequest {
    appelis.identity.common.v1.Token token = 1;
    int64 registrationId = 2;
}

message PagedRegistrationsRequest {
    // Must be web token of logged user.
    appelis.identity.common.v1.Token token = 1;
    PagingParameters paging = 2;
    RegistrationFilter filter = 3;
}

message PagingParameters {
    // How many items do u want to be in single page
    int64 first = 1;
    // Optional after/before. Because first page doesn't need after.
    oneof cursor {
        string after = 2;
        string before = 3;
    }
}

message RegistrationFilter {
    // Optional registration status to be filtered. If unknown filter will not be applied.
    repeated CompanyRegistration.RegistrationStatus status = 1;
    // If not set, filter will not be applied.
    google.protobuf.Timestamp dateFrom = 2;
    // If not set, filter will not be applied.
    google.protobuf.Timestamp dateTo = 3;
    // If empty, filter will not be applied.
    repeated string storeNo = 4;
    // if empty, filter will not be applied.
    repeated string managingUserId = 5;
    // if default value will be sent, filter will not be applied.
    // If keyword will be applied, then keyword will be used for prefix search on custNo field.
    string keyword = 6;
}

message PagedRegistrationsResponse {
    message RegistrationNode {
        AdminCompanyRegistration registration = 1;
        string cursor = 2;
    }

    message RegistrationPage {
        repeated RegistrationNode page = 1;
        int64 totalCount = 2;
    }

    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        RegistrationPage data = 2;
    }

}

message ChangeRegistrationResponse {
    // If there is no payload set everything was successful.
    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        // When there is no registration for selected id.
        appelis.identity.common.v1.PermissionError permErr = 2;
    }
}

message ChangeRegistrationStatusRequest {
    // Must be web token of logged user.
    appelis.identity.common.v1.Token token = 1;
    // Status to update.
    CompanyRegistration.RegistrationStatus status = 2;
    // Registration id to update.
    int64 registrationId = 3;
    // Note for administrators
    string adminNote = 4;
    // Note for users. Should store reason why registration was blocked.
    string statusNote = 5;
}

// Should be used by executives, to create request for entering click and collect module.
service Registration {
    // If registration was created, returns data. If there is no registration yet, returns null for data.
    rpc GetCompanyRegistration (appelis.identity.common.v1.Token) returns (GetCompanyRegistrationResponse) {

    }
    // Can be used to determine if calling user can create registration.
    rpc CanManageRegistration (appelis.identity.common.v1.Token) returns (CanManageRegistrationResponse) {

    }
    // Should create registration if calling user is executive.
    // If there is already created registration, return stored data.
    // Always will send email with link verification.
    rpc CreateRegistration (CreateRegistrationRequest) returns (CreateRegistrationResponse) {

    }
    // Used by executive to update autoApprove flag.
    rpc UpdateRegistration (UpdateRegistrationRequest) returns (CreateRegistrationResponse) {

    }
}

message UpdateRegistrationRequest {
    appelis.identity.common.v1.Token token = 1;
    bool autoApprove = 3;
}

message CreateRegistrationResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        appelis.identity.common.v1.PermissionError createErr = 2;
        CompanyRegistration data = 3;
    }
}

message CreateRegistrationRequest {
    appelis.identity.common.v1.Token token = 1;
    string invoiceEmail = 2;
    bool autoApprove = 3;
}

message GetCompanyRegistrationResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        OptionalCompanyRegistration data = 2;
    }
}

message OptionalCompanyRegistration {
    // If there is no registration yet, returns null for data.
    CompanyRegistration registration = 1;
}

message CompanyMetadata {
    string custNo = 1;
    string storeNo = 2;
    appelis.userService.companies.v1.Company.CompanyType type = 3;
}

message CompanyRegistration {
    enum RegistrationStatus {
        UNKNOWN = 0;
        PENDING = 1;
        BLOCKED = 2;
        APPROVED = 3;
        INTERESTED = 4;
        COMPANY_VERIFICATION = 5;
    }

    int64 registrationId = 1;
    int64 companyId = 2;
    CompanyMetadata companyMetadata = 3;
    RegistrationStatus status = 4;
    google.protobuf.Timestamp createdAt = 5;
    // email where invoices will be send.
    string invoiceEmail = 6;
    // auto approve feature switch.
    bool autoApprove = 7;
    // User who created registration record. Can be null if there is not applicant
    appelis.userService.users.v1.MobileUser applicant = 8;
    // time of update of registration record (status update)
    google.protobuf.Timestamp updatedAt = 9;
    // Note for users. Should store reason why registration was blocked.
    string statusNote = 10;
    // Managing webUser, if there was no updates to registration then field will be set to default value.
    string managingUserId = 11;
    // if managingUserId is not default value, loads managing user for this record...
    ManagingUser managingUser = 12;
}

message AdminCompanyRegistration {
    CompanyRegistration record = 1;
    // Note for administrators
    string adminNote = 2;
}

message AdminCompanyRegistrationDetail {
    AdminCompanyRegistration registration = 1;
    repeated UsersData users = 2;
}

message UserInterestMetadata {
    int64 interestId = 1;
    int64 mobileUserId = 2;
    int64 companyId = 3;
    google.protobuf.Timestamp createdAt = 4;

}

message UserApprovalMetadata {
    int64 approvalId = 1;
    int64 mobileUserId = 2;
    int64 companyId = 3;
    google.protobuf.Timestamp createdAt = 4;

    appelis.clickandcollect.metro.v1.ApprovalStatus status = 5;
    // Its optional mobile user that changed status of user approval
    appelis.userService.users.v1.MobileUser managedBy = 6;
}

message UsersData {
    appelis.userService.users.v1.MobileUser user = 1;
    UserInterestMetadata interest = 2;
    UserApprovalMetadata approval = 3;
    bool isLogged = 4;
}


message CanManageRegistrationResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        bool data = 2;
    }
}

message ResetRegistrationResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError err = 1;
        // When there is no registration for selected id.
        appelis.identity.common.v1.PermissionError permErr = 2;
    }
}

message ResetRegistrationRequest {
    appelis.identity.common.v1.Token token = 1;
    int64 registrationId = 2;
}
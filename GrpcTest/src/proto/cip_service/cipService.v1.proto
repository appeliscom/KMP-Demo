syntax = "proto3";

option go_package = "GoServerCore/proto-storage/generated/go/cip_service";

package appelis.cip.v1;

import "google/protobuf/timestamp.proto";
import "identity_service/common.proto";
import "appelis/objectid.proto";

service CipPublicAdmin {
    // Rpc will stream all of projects cip prices.
    rpc GetAllPrices (appelis.identity.common.v1.Token) returns (stream PricesResponse) {
    }
    // Rpc will create prices, unique fields are IdCompany and IdArticle, if there will be more items for
    // same combination of these fields, then they will be replaced by last value.
    // Because of Upsert logic, rpc can't return ids of prices...
    rpc CreatePrices (CreatePricesRequest) returns (ChangePricesResponse) {
    }
    // Rpc will delete prices defined by their ids.
    rpc DeletePrices (DeletePricesRequest) returns (ChangePricesResponse) {
    }
}

message ChangePricesResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError error = 1;
    }
}

message DeletePricesRequest {
    appelis.identity.common.v1.Token token = 1;
    repeated appelis.ObjectId data = 2;
}

message CreatePricesRequest {
    appelis.identity.common.v1.Token token = 1;
    repeated CipPriceData prices = 2;
}

message PricesResponse {
    oneof payload {
        appelis.identity.common.v1.TokenError error = 1;
        Prices data = 2;
    }
}

message Prices {
    repeated CipPrice data = 1;
}

message CipPriceData {
    double unitTax = 1;
    double unit = 2;
    double munitTax = 3;
    double munit = 4;
    double packTax = 5;
    double pack = 6;
    string idArticle = 7;
    string idCompany = 8;
    google.protobuf.Timestamp validityFrom = 9;
    google.protobuf.Timestamp validityTo = 10;
}

message CipPrice {
    // Id for deleting whole price.
    appelis.ObjectId idPrice = 11;
    CipPriceData data = 1;
}
